
FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093e0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080094ec  080094ec  0000a4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095b0  080095b0  0000b1cc  2**0
                  CONTENTS
  4 .ARM          00000008  080095b0  080095b0  0000a5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095b8  080095b8  0000b1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095b8  080095b8  0000a5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095bc  080095bc  0000a5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  080095c0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001484  200001cc  0800978c  0000b1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001650  0800978c  0000b650  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014798  00000000  00000000  0000b1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a6  00000000  00000000  0001f98d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00022f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e85  00000000  00000000  00024228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004700  00000000  00000000  000250ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183c3  00000000  00000000  000297ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f9e7  00000000  00000000  00041b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1557  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b0  00000000  00000000  000d159c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d694c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	080094d4 	.word	0x080094d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	080094d4 	.word	0x080094d4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fc11 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f825 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f991 	bl	8000490 <MX_GPIO_Init>
  MX_I2C1_Init();
 800016e:	f000 f87b 	bl	8000268 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000172:	f000 f8d5 	bl	8000320 <MX_TIM1_Init>
  MX_I2C2_Init();
 8000176:	f000 f8a5 	bl	80002c4 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 800017a:	f008 f843 	bl	8008204 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t usb_buffer[32];
	  sprintf(usb_buffer, "GetTick: %u\n", HAL_GetTick());
 800017e:	f000 fc2b 	bl	80009d8 <HAL_GetTick>
 8000182:	4602      	mov	r2, r0
 8000184:	463b      	mov	r3, r7
 8000186:	490a      	ldr	r1, [pc, #40]	@ (80001b0 <main+0x54>)
 8000188:	4618      	mov	r0, r3
 800018a:	f008 fcf3 	bl	8008b74 <siprintf>

	  CDC_Transmit_FS(usb_buffer, strlen((const char*)usb_buffer));
 800018e:	463b      	mov	r3, r7
 8000190:	4618      	mov	r0, r3
 8000192:	f7ff ffdb 	bl	800014c <strlen>
 8000196:	4603      	mov	r3, r0
 8000198:	b29a      	uxth	r2, r3
 800019a:	463b      	mov	r3, r7
 800019c:	4611      	mov	r1, r2
 800019e:	4618      	mov	r0, r3
 80001a0:	f008 f90a 	bl	80083b8 <CDC_Transmit_FS>
	  HAL_Delay (100);
 80001a4:	2064      	movs	r0, #100	@ 0x64
 80001a6:	f000 fc21 	bl	80009ec <HAL_Delay>
  {
 80001aa:	bf00      	nop
 80001ac:	e7e7      	b.n	800017e <main+0x22>
 80001ae:	bf00      	nop
 80001b0:	080094ec 	.word	0x080094ec

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b094      	sub	sp, #80	@ 0x50
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001be:	2228      	movs	r2, #40	@ 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f008 fcf6 	bl	8008bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	f107 0314 	add.w	r3, r7, #20
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
 80001d0:	605a      	str	r2, [r3, #4]
 80001d2:	609a      	str	r2, [r3, #8]
 80001d4:	60da      	str	r2, [r3, #12]
 80001d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e4:	2301      	movs	r3, #1
 80001e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f2:	2301      	movs	r3, #1
 80001f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f6:	2302      	movs	r3, #2
 80001f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000200:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000204:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000206:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800020a:	4618      	mov	r0, r3
 800020c:	f002 fd32 	bl	8002c74 <HAL_RCC_OscConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000216:	f000 f9a2 	bl	800055e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021a:	230f      	movs	r3, #15
 800021c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021e:	2302      	movs	r3, #2
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000226:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800022a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000230:	f107 0314 	add.w	r3, r7, #20
 8000234:	2102      	movs	r1, #2
 8000236:	4618      	mov	r0, r3
 8000238:	f002 ff9e 	bl	8003178 <HAL_RCC_ClockConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000242:	f000 f98c 	bl	800055e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000246:	2310      	movs	r3, #16
 8000248:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f003 f93b 	bl	80034cc <HAL_RCCEx_PeriphCLKConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800025c:	f000 f97f 	bl	800055e <Error_Handler>
  }
}
 8000260:	bf00      	nop
 8000262:	3750      	adds	r7, #80	@ 0x50
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800026c:	4b12      	ldr	r3, [pc, #72]	@ (80002b8 <MX_I2C1_Init+0x50>)
 800026e:	4a13      	ldr	r2, [pc, #76]	@ (80002bc <MX_I2C1_Init+0x54>)
 8000270:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000272:	4b11      	ldr	r3, [pc, #68]	@ (80002b8 <MX_I2C1_Init+0x50>)
 8000274:	4a12      	ldr	r2, [pc, #72]	@ (80002c0 <MX_I2C1_Init+0x58>)
 8000276:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000278:	4b0f      	ldr	r3, [pc, #60]	@ (80002b8 <MX_I2C1_Init+0x50>)
 800027a:	2200      	movs	r2, #0
 800027c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <MX_I2C1_Init+0x50>)
 8000280:	2200      	movs	r2, #0
 8000282:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000284:	4b0c      	ldr	r3, [pc, #48]	@ (80002b8 <MX_I2C1_Init+0x50>)
 8000286:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800028a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800028c:	4b0a      	ldr	r3, [pc, #40]	@ (80002b8 <MX_I2C1_Init+0x50>)
 800028e:	2200      	movs	r2, #0
 8000290:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000292:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <MX_I2C1_Init+0x50>)
 8000294:	2200      	movs	r2, #0
 8000296:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000298:	4b07      	ldr	r3, [pc, #28]	@ (80002b8 <MX_I2C1_Init+0x50>)
 800029a:	2200      	movs	r2, #0
 800029c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800029e:	4b06      	ldr	r3, [pc, #24]	@ (80002b8 <MX_I2C1_Init+0x50>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <MX_I2C1_Init+0x50>)
 80002a6:	f000 fe41 	bl	8000f2c <HAL_I2C_Init>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002b0:	f000 f955 	bl	800055e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	200001e8 	.word	0x200001e8
 80002bc:	40005400 	.word	0x40005400
 80002c0:	000186a0 	.word	0x000186a0

080002c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002c8:	4b12      	ldr	r3, [pc, #72]	@ (8000314 <MX_I2C2_Init+0x50>)
 80002ca:	4a13      	ldr	r2, [pc, #76]	@ (8000318 <MX_I2C2_Init+0x54>)
 80002cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80002ce:	4b11      	ldr	r3, [pc, #68]	@ (8000314 <MX_I2C2_Init+0x50>)
 80002d0:	4a12      	ldr	r2, [pc, #72]	@ (800031c <MX_I2C2_Init+0x58>)
 80002d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000314 <MX_I2C2_Init+0x50>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80002da:	4b0e      	ldr	r3, [pc, #56]	@ (8000314 <MX_I2C2_Init+0x50>)
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000314 <MX_I2C2_Init+0x50>)
 80002e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000314 <MX_I2C2_Init+0x50>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002ee:	4b09      	ldr	r3, [pc, #36]	@ (8000314 <MX_I2C2_Init+0x50>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f4:	4b07      	ldr	r3, [pc, #28]	@ (8000314 <MX_I2C2_Init+0x50>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002fa:	4b06      	ldr	r3, [pc, #24]	@ (8000314 <MX_I2C2_Init+0x50>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000300:	4804      	ldr	r0, [pc, #16]	@ (8000314 <MX_I2C2_Init+0x50>)
 8000302:	f000 fe13 	bl	8000f2c <HAL_I2C_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800030c:	f000 f927 	bl	800055e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	2000023c 	.word	0x2000023c
 8000318:	40005800 	.word	0x40005800
 800031c:	000186a0 	.word	0x000186a0

08000320 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b096      	sub	sp, #88	@ 0x58
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000326:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000334:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800033e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]
 800034e:	615a      	str	r2, [r3, #20]
 8000350:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2220      	movs	r2, #32
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f008 fc2b 	bl	8008bb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800035e:	4b4a      	ldr	r3, [pc, #296]	@ (8000488 <MX_TIM1_Init+0x168>)
 8000360:	4a4a      	ldr	r2, [pc, #296]	@ (800048c <MX_TIM1_Init+0x16c>)
 8000362:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000364:	4b48      	ldr	r3, [pc, #288]	@ (8000488 <MX_TIM1_Init+0x168>)
 8000366:	2200      	movs	r2, #0
 8000368:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036a:	4b47      	ldr	r3, [pc, #284]	@ (8000488 <MX_TIM1_Init+0x168>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8000370:	4b45      	ldr	r3, [pc, #276]	@ (8000488 <MX_TIM1_Init+0x168>)
 8000372:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000376:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000378:	4b43      	ldr	r3, [pc, #268]	@ (8000488 <MX_TIM1_Init+0x168>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800037e:	4b42      	ldr	r3, [pc, #264]	@ (8000488 <MX_TIM1_Init+0x168>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000384:	4b40      	ldr	r3, [pc, #256]	@ (8000488 <MX_TIM1_Init+0x168>)
 8000386:	2200      	movs	r2, #0
 8000388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800038a:	483f      	ldr	r0, [pc, #252]	@ (8000488 <MX_TIM1_Init+0x168>)
 800038c:	f003 f954 	bl	8003638 <HAL_TIM_Base_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000396:	f000 f8e2 	bl	800055e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800039e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80003a4:	4619      	mov	r1, r3
 80003a6:	4838      	ldr	r0, [pc, #224]	@ (8000488 <MX_TIM1_Init+0x168>)
 80003a8:	f003 fbf2 	bl	8003b90 <HAL_TIM_ConfigClockSource>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80003b2:	f000 f8d4 	bl	800055e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003b6:	4834      	ldr	r0, [pc, #208]	@ (8000488 <MX_TIM1_Init+0x168>)
 80003b8:	f003 f9e0 	bl	800377c <HAL_TIM_PWM_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80003c2:	f000 f8cc 	bl	800055e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c6:	2300      	movs	r3, #0
 80003c8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80003d2:	4619      	mov	r1, r3
 80003d4:	482c      	ldr	r0, [pc, #176]	@ (8000488 <MX_TIM1_Init+0x168>)
 80003d6:	f003 ff53 	bl	8004280 <HAL_TIMEx_MasterConfigSynchronization>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80003e0:	f000 f8bd 	bl	800055e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003e4:	2360      	movs	r3, #96	@ 0x60
 80003e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ec:	2300      	movs	r3, #0
 80003ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003f0:	2300      	movs	r3, #0
 80003f2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003f8:	2300      	movs	r3, #0
 80003fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003fc:	2300      	movs	r3, #0
 80003fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000400:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000404:	2200      	movs	r2, #0
 8000406:	4619      	mov	r1, r3
 8000408:	481f      	ldr	r0, [pc, #124]	@ (8000488 <MX_TIM1_Init+0x168>)
 800040a:	f003 faff 	bl	8003a0c <HAL_TIM_PWM_ConfigChannel>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000414:	f000 f8a3 	bl	800055e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000418:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800041c:	2204      	movs	r2, #4
 800041e:	4619      	mov	r1, r3
 8000420:	4819      	ldr	r0, [pc, #100]	@ (8000488 <MX_TIM1_Init+0x168>)
 8000422:	f003 faf3 	bl	8003a0c <HAL_TIM_PWM_ConfigChannel>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800042c:	f000 f897 	bl	800055e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000430:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000434:	2208      	movs	r2, #8
 8000436:	4619      	mov	r1, r3
 8000438:	4813      	ldr	r0, [pc, #76]	@ (8000488 <MX_TIM1_Init+0x168>)
 800043a:	f003 fae7 	bl	8003a0c <HAL_TIM_PWM_ConfigChannel>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000444:	f000 f88b 	bl	800055e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000448:	2300      	movs	r3, #0
 800044a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800044c:	2300      	movs	r3, #0
 800044e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800045c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000460:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000462:	2300      	movs	r3, #0
 8000464:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	4619      	mov	r1, r3
 800046a:	4807      	ldr	r0, [pc, #28]	@ (8000488 <MX_TIM1_Init+0x168>)
 800046c:	f003 ff66 	bl	800433c <HAL_TIMEx_ConfigBreakDeadTime>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000476:	f000 f872 	bl	800055e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800047a:	4803      	ldr	r0, [pc, #12]	@ (8000488 <MX_TIM1_Init+0x168>)
 800047c:	f000 f932 	bl	80006e4 <HAL_TIM_MspPostInit>

}
 8000480:	bf00      	nop
 8000482:	3758      	adds	r7, #88	@ 0x58
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000290 	.word	0x20000290
 800048c:	40012c00 	.word	0x40012c00

08000490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a4:	4b24      	ldr	r3, [pc, #144]	@ (8000538 <MX_GPIO_Init+0xa8>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a23      	ldr	r2, [pc, #140]	@ (8000538 <MX_GPIO_Init+0xa8>)
 80004aa:	f043 0310 	orr.w	r3, r3, #16
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b21      	ldr	r3, [pc, #132]	@ (8000538 <MX_GPIO_Init+0xa8>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0310 	and.w	r3, r3, #16
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000538 <MX_GPIO_Init+0xa8>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000538 <MX_GPIO_Init+0xa8>)
 80004c2:	f043 0320 	orr.w	r3, r3, #32
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000538 <MX_GPIO_Init+0xa8>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0320 	and.w	r3, r3, #32
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d4:	4b18      	ldr	r3, [pc, #96]	@ (8000538 <MX_GPIO_Init+0xa8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a17      	ldr	r2, [pc, #92]	@ (8000538 <MX_GPIO_Init+0xa8>)
 80004da:	f043 0308 	orr.w	r3, r3, #8
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <MX_GPIO_Init+0xa8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0308 	and.w	r3, r3, #8
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <MX_GPIO_Init+0xa8>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a11      	ldr	r2, [pc, #68]	@ (8000538 <MX_GPIO_Init+0xa8>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <MX_GPIO_Init+0xa8>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	603b      	str	r3, [r7, #0]
 8000502:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800050a:	480c      	ldr	r0, [pc, #48]	@ (800053c <MX_GPIO_Init+0xac>)
 800050c:	f000 fcf6 	bl	8000efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000510:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2302      	movs	r3, #2
 8000520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000522:	f107 0310 	add.w	r3, r7, #16
 8000526:	4619      	mov	r1, r3
 8000528:	4804      	ldr	r0, [pc, #16]	@ (800053c <MX_GPIO_Init+0xac>)
 800052a:	f000 fb63 	bl	8000bf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800052e:	bf00      	nop
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000
 800053c:	40011000 	.word	0x40011000

08000540 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000550:	d101      	bne.n	8000556 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000552:	f000 fa2f 	bl	80009b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000562:	b672      	cpsid	i
}
 8000564:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000566:	bf00      	nop
 8000568:	e7fd      	b.n	8000566 <Error_Handler+0x8>
	...

0800056c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000572:	4b15      	ldr	r3, [pc, #84]	@ (80005c8 <HAL_MspInit+0x5c>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a14      	ldr	r2, [pc, #80]	@ (80005c8 <HAL_MspInit+0x5c>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <HAL_MspInit+0x5c>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <HAL_MspInit+0x5c>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a0e      	ldr	r2, [pc, #56]	@ (80005c8 <HAL_MspInit+0x5c>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <HAL_MspInit+0x5c>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005a2:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <HAL_MspInit+0x60>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	4a04      	ldr	r2, [pc, #16]	@ (80005cc <HAL_MspInit+0x60>)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010000 	.word	0x40010000

080005d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0318 	add.w	r3, r7, #24
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a2b      	ldr	r2, [pc, #172]	@ (8000698 <HAL_I2C_MspInit+0xc8>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d124      	bne.n	800063a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f0:	4b2a      	ldr	r3, [pc, #168]	@ (800069c <HAL_I2C_MspInit+0xcc>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a29      	ldr	r2, [pc, #164]	@ (800069c <HAL_I2C_MspInit+0xcc>)
 80005f6:	f043 0308 	orr.w	r3, r3, #8
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b27      	ldr	r3, [pc, #156]	@ (800069c <HAL_I2C_MspInit+0xcc>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0308 	and.w	r3, r3, #8
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000608:	23c0      	movs	r3, #192	@ 0xc0
 800060a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800060c:	2312      	movs	r3, #18
 800060e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 0318 	add.w	r3, r7, #24
 8000618:	4619      	mov	r1, r3
 800061a:	4821      	ldr	r0, [pc, #132]	@ (80006a0 <HAL_I2C_MspInit+0xd0>)
 800061c:	f000 faea 	bl	8000bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000620:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <HAL_I2C_MspInit+0xcc>)
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	4a1d      	ldr	r2, [pc, #116]	@ (800069c <HAL_I2C_MspInit+0xcc>)
 8000626:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800062a:	61d3      	str	r3, [r2, #28]
 800062c:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <HAL_I2C_MspInit+0xcc>)
 800062e:	69db      	ldr	r3, [r3, #28]
 8000630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000638:	e029      	b.n	800068e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a19      	ldr	r2, [pc, #100]	@ (80006a4 <HAL_I2C_MspInit+0xd4>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d124      	bne.n	800068e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000644:	4b15      	ldr	r3, [pc, #84]	@ (800069c <HAL_I2C_MspInit+0xcc>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a14      	ldr	r2, [pc, #80]	@ (800069c <HAL_I2C_MspInit+0xcc>)
 800064a:	f043 0308 	orr.w	r3, r3, #8
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <HAL_I2C_MspInit+0xcc>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0308 	and.w	r3, r3, #8
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800065c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000662:	2312      	movs	r3, #18
 8000664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000666:	2303      	movs	r3, #3
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	4619      	mov	r1, r3
 8000670:	480b      	ldr	r0, [pc, #44]	@ (80006a0 <HAL_I2C_MspInit+0xd0>)
 8000672:	f000 fabf 	bl	8000bf4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <HAL_I2C_MspInit+0xcc>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a08      	ldr	r2, [pc, #32]	@ (800069c <HAL_I2C_MspInit+0xcc>)
 800067c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b06      	ldr	r3, [pc, #24]	@ (800069c <HAL_I2C_MspInit+0xcc>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
}
 800068e:	bf00      	nop
 8000690:	3728      	adds	r7, #40	@ 0x28
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40005400 	.word	0x40005400
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010c00 	.word	0x40010c00
 80006a4:	40005800 	.word	0x40005800

080006a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a09      	ldr	r2, [pc, #36]	@ (80006dc <HAL_TIM_Base_MspInit+0x34>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d10b      	bne.n	80006d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006ba:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <HAL_TIM_Base_MspInit+0x38>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <HAL_TIM_Base_MspInit+0x38>)
 80006c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <HAL_TIM_Base_MspInit+0x38>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40012c00 	.word	0x40012c00
 80006e0:	40021000 	.word	0x40021000

080006e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a10      	ldr	r2, [pc, #64]	@ (8000740 <HAL_TIM_MspPostInit+0x5c>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d118      	bne.n	8000736 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <HAL_TIM_MspPostInit+0x60>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a0e      	ldr	r2, [pc, #56]	@ (8000744 <HAL_TIM_MspPostInit+0x60>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <HAL_TIM_MspPostInit+0x60>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800071c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000720:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2302      	movs	r3, #2
 8000728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0310 	add.w	r3, r7, #16
 800072e:	4619      	mov	r1, r3
 8000730:	4805      	ldr	r0, [pc, #20]	@ (8000748 <HAL_TIM_MspPostInit+0x64>)
 8000732:	f000 fa5f 	bl	8000bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000736:	bf00      	nop
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40012c00 	.word	0x40012c00
 8000744:	40021000 	.word	0x40021000
 8000748:	40010800 	.word	0x40010800

0800074c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	@ 0x38
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000754:	2300      	movs	r3, #0
 8000756:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000758:	2300      	movs	r3, #0
 800075a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800075c:	2300      	movs	r3, #0
 800075e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000762:	4b34      	ldr	r3, [pc, #208]	@ (8000834 <HAL_InitTick+0xe8>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a33      	ldr	r2, [pc, #204]	@ (8000834 <HAL_InitTick+0xe8>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b31      	ldr	r3, [pc, #196]	@ (8000834 <HAL_InitTick+0xe8>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800077a:	f107 0210 	add.w	r2, r7, #16
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f002 fe53 	bl	8003430 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800078e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000790:	2b00      	cmp	r3, #0
 8000792:	d103      	bne.n	800079c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000794:	f002 fe38 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 8000798:	6378      	str	r0, [r7, #52]	@ 0x34
 800079a:	e004      	b.n	80007a6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800079c:	f002 fe34 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 80007a0:	4603      	mov	r3, r0
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007a8:	4a23      	ldr	r2, [pc, #140]	@ (8000838 <HAL_InitTick+0xec>)
 80007aa:	fba2 2303 	umull	r2, r3, r2, r3
 80007ae:	0c9b      	lsrs	r3, r3, #18
 80007b0:	3b01      	subs	r3, #1
 80007b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80007b4:	4b21      	ldr	r3, [pc, #132]	@ (800083c <HAL_InitTick+0xf0>)
 80007b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80007bc:	4b1f      	ldr	r3, [pc, #124]	@ (800083c <HAL_InitTick+0xf0>)
 80007be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007c2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80007c4:	4a1d      	ldr	r2, [pc, #116]	@ (800083c <HAL_InitTick+0xf0>)
 80007c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007c8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <HAL_InitTick+0xf0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <HAL_InitTick+0xf0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d6:	4b19      	ldr	r3, [pc, #100]	@ (800083c <HAL_InitTick+0xf0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80007dc:	4817      	ldr	r0, [pc, #92]	@ (800083c <HAL_InitTick+0xf0>)
 80007de:	f002 ff2b 	bl	8003638 <HAL_TIM_Base_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80007e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d11b      	bne.n	8000828 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80007f0:	4812      	ldr	r0, [pc, #72]	@ (800083c <HAL_InitTick+0xf0>)
 80007f2:	f002 ff71 	bl	80036d8 <HAL_TIM_Base_Start_IT>
 80007f6:	4603      	mov	r3, r0
 80007f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80007fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000800:	2b00      	cmp	r3, #0
 8000802:	d111      	bne.n	8000828 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000804:	201c      	movs	r0, #28
 8000806:	f000 f9e6 	bl	8000bd6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b0f      	cmp	r3, #15
 800080e:	d808      	bhi.n	8000822 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000810:	2200      	movs	r2, #0
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	201c      	movs	r0, #28
 8000816:	f000 f9c2 	bl	8000b9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800081a:	4a09      	ldr	r2, [pc, #36]	@ (8000840 <HAL_InitTick+0xf4>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	e002      	b.n	8000828 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000828:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800082c:	4618      	mov	r0, r3
 800082e:	3738      	adds	r7, #56	@ 0x38
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000
 8000838:	431bde83 	.word	0x431bde83
 800083c:	200002f8 	.word	0x200002f8
 8000840:	20000004 	.word	0x20000004

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <NMI_Handler+0x4>

0800084c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <MemManage_Handler+0x4>

0800085c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <UsageFault_Handler+0x4>

0800086c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008a0:	4802      	ldr	r0, [pc, #8]	@ (80008ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008a2:	f000 fda3 	bl	80013ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20001010 	.word	0x20001010

080008b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008b4:	4802      	ldr	r0, [pc, #8]	@ (80008c0 <TIM2_IRQHandler+0x10>)
 80008b6:	f002 ffb9 	bl	800382c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200002f8 	.word	0x200002f8

080008c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008cc:	4a14      	ldr	r2, [pc, #80]	@ (8000920 <_sbrk+0x5c>)
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <_sbrk+0x60>)
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d8:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <_sbrk+0x64>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	@ (800092c <_sbrk+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d207      	bcs.n	8000904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f4:	f008 f966 	bl	8008bc4 <__errno>
 80008f8:	4603      	mov	r3, r0
 80008fa:	220c      	movs	r2, #12
 80008fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	e009      	b.n	8000918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000904:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090a:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	4a05      	ldr	r2, [pc, #20]	@ (8000928 <_sbrk+0x64>)
 8000914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20005000 	.word	0x20005000
 8000924:	00000400 	.word	0x00000400
 8000928:	20000340 	.word	0x20000340
 800092c:	20001650 	.word	0x20001650

08000930 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800093c:	f7ff fff8 	bl	8000930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000940:	480b      	ldr	r0, [pc, #44]	@ (8000970 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000942:	490c      	ldr	r1, [pc, #48]	@ (8000974 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000944:	4a0c      	ldr	r2, [pc, #48]	@ (8000978 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a09      	ldr	r2, [pc, #36]	@ (800097c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000958:	4c09      	ldr	r4, [pc, #36]	@ (8000980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000966:	f008 f933 	bl	8008bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096a:	f7ff fbf7 	bl	800015c <main>
  bx lr
 800096e:	4770      	bx	lr
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000978:	080095c0 	.word	0x080095c0
  ldr r2, =_sbss
 800097c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000980:	20001650 	.word	0x20001650

08000984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_2_IRQHandler>
	...

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <HAL_Init+0x28>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	@ (80009b0 <HAL_Init+0x28>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f8f5 	bl	8000b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	200f      	movs	r0, #15
 80009a0:	f7ff fed4 	bl	800074c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff fde2 	bl	800056c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40022000 	.word	0x40022000

080009b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b8:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <HAL_IncTick+0x1c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <HAL_IncTick+0x20>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a03      	ldr	r2, [pc, #12]	@ (80009d4 <HAL_IncTick+0x20>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000344 	.word	0x20000344

080009d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b02      	ldr	r3, [pc, #8]	@ (80009e8 <HAL_GetTick+0x10>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	20000344 	.word	0x20000344

080009ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f4:	f7ff fff0 	bl	80009d8 <HAL_GetTick>
 80009f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a04:	d005      	beq.n	8000a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a06:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <HAL_Delay+0x44>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a12:	bf00      	nop
 8000a14:	f7ff ffe0 	bl	80009d8 <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d8f7      	bhi.n	8000a14 <HAL_Delay+0x28>
  {
  }
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008

08000a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a50:	4013      	ands	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a66:	4a04      	ldr	r2, [pc, #16]	@ (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	60d3      	str	r3, [r2, #12]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a80:	4b04      	ldr	r3, [pc, #16]	@ (8000a94 <__NVIC_GetPriorityGrouping+0x18>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	0a1b      	lsrs	r3, r3, #8
 8000a86:	f003 0307 	and.w	r3, r3, #7
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	db0b      	blt.n	8000ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	f003 021f 	and.w	r2, r3, #31
 8000ab0:	4906      	ldr	r1, [pc, #24]	@ (8000acc <__NVIC_EnableIRQ+0x34>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	095b      	lsrs	r3, r3, #5
 8000ab8:	2001      	movs	r0, #1
 8000aba:	fa00 f202 	lsl.w	r2, r0, r2
 8000abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db0a      	blt.n	8000afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	490c      	ldr	r1, [pc, #48]	@ (8000b1c <__NVIC_SetPriority+0x4c>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	0112      	lsls	r2, r2, #4
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af8:	e00a      	b.n	8000b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4908      	ldr	r1, [pc, #32]	@ (8000b20 <__NVIC_SetPriority+0x50>)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	3b04      	subs	r3, #4
 8000b08:	0112      	lsls	r2, r2, #4
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	761a      	strb	r2, [r3, #24]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000e100 	.word	0xe000e100
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	@ 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	f1c3 0307 	rsb	r3, r3, #7
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	bf28      	it	cs
 8000b42:	2304      	movcs	r3, #4
 8000b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	2b06      	cmp	r3, #6
 8000b4c:	d902      	bls.n	8000b54 <NVIC_EncodePriority+0x30>
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3b03      	subs	r3, #3
 8000b52:	e000      	b.n	8000b56 <NVIC_EncodePriority+0x32>
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43da      	mvns	r2, r3
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	401a      	ands	r2, r3
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	43d9      	mvns	r1, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	4313      	orrs	r3, r2
         );
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3724      	adds	r7, #36	@ 0x24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff4f 	bl	8000a34 <__NVIC_SetPriorityGrouping>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb0:	f7ff ff64 	bl	8000a7c <__NVIC_GetPriorityGrouping>
 8000bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	6978      	ldr	r0, [r7, #20]
 8000bbc:	f7ff ffb2 	bl	8000b24 <NVIC_EncodePriority>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff81 	bl	8000ad0 <__NVIC_SetPriority>
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff57 	bl	8000a98 <__NVIC_EnableIRQ>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b08b      	sub	sp, #44	@ 0x2c
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c06:	e169      	b.n	8000edc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f040 8158 	bne.w	8000ed6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	4a9a      	ldr	r2, [pc, #616]	@ (8000e94 <HAL_GPIO_Init+0x2a0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d05e      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c30:	4a98      	ldr	r2, [pc, #608]	@ (8000e94 <HAL_GPIO_Init+0x2a0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d875      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c36:	4a98      	ldr	r2, [pc, #608]	@ (8000e98 <HAL_GPIO_Init+0x2a4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d058      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c3c:	4a96      	ldr	r2, [pc, #600]	@ (8000e98 <HAL_GPIO_Init+0x2a4>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d86f      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c42:	4a96      	ldr	r2, [pc, #600]	@ (8000e9c <HAL_GPIO_Init+0x2a8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d052      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c48:	4a94      	ldr	r2, [pc, #592]	@ (8000e9c <HAL_GPIO_Init+0x2a8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d869      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c4e:	4a94      	ldr	r2, [pc, #592]	@ (8000ea0 <HAL_GPIO_Init+0x2ac>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d04c      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c54:	4a92      	ldr	r2, [pc, #584]	@ (8000ea0 <HAL_GPIO_Init+0x2ac>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d863      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c5a:	4a92      	ldr	r2, [pc, #584]	@ (8000ea4 <HAL_GPIO_Init+0x2b0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d046      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c60:	4a90      	ldr	r2, [pc, #576]	@ (8000ea4 <HAL_GPIO_Init+0x2b0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d85d      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c66:	2b12      	cmp	r3, #18
 8000c68:	d82a      	bhi.n	8000cc0 <HAL_GPIO_Init+0xcc>
 8000c6a:	2b12      	cmp	r3, #18
 8000c6c:	d859      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c74 <HAL_GPIO_Init+0x80>)
 8000c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c74:	08000cef 	.word	0x08000cef
 8000c78:	08000cc9 	.word	0x08000cc9
 8000c7c:	08000cdb 	.word	0x08000cdb
 8000c80:	08000d1d 	.word	0x08000d1d
 8000c84:	08000d23 	.word	0x08000d23
 8000c88:	08000d23 	.word	0x08000d23
 8000c8c:	08000d23 	.word	0x08000d23
 8000c90:	08000d23 	.word	0x08000d23
 8000c94:	08000d23 	.word	0x08000d23
 8000c98:	08000d23 	.word	0x08000d23
 8000c9c:	08000d23 	.word	0x08000d23
 8000ca0:	08000d23 	.word	0x08000d23
 8000ca4:	08000d23 	.word	0x08000d23
 8000ca8:	08000d23 	.word	0x08000d23
 8000cac:	08000d23 	.word	0x08000d23
 8000cb0:	08000d23 	.word	0x08000d23
 8000cb4:	08000d23 	.word	0x08000d23
 8000cb8:	08000cd1 	.word	0x08000cd1
 8000cbc:	08000ce5 	.word	0x08000ce5
 8000cc0:	4a79      	ldr	r2, [pc, #484]	@ (8000ea8 <HAL_GPIO_Init+0x2b4>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d013      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cc6:	e02c      	b.n	8000d22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	623b      	str	r3, [r7, #32]
          break;
 8000cce:	e029      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	623b      	str	r3, [r7, #32]
          break;
 8000cd8:	e024      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	3308      	adds	r3, #8
 8000ce0:	623b      	str	r3, [r7, #32]
          break;
 8000ce2:	e01f      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	330c      	adds	r3, #12
 8000cea:	623b      	str	r3, [r7, #32]
          break;
 8000cec:	e01a      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d102      	bne.n	8000cfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	623b      	str	r3, [r7, #32]
          break;
 8000cfa:	e013      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d105      	bne.n	8000d10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d04:	2308      	movs	r3, #8
 8000d06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	611a      	str	r2, [r3, #16]
          break;
 8000d0e:	e009      	b.n	8000d24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d10:	2308      	movs	r3, #8
 8000d12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	615a      	str	r2, [r3, #20]
          break;
 8000d1a:	e003      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
          break;
 8000d20:	e000      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          break;
 8000d22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	2bff      	cmp	r3, #255	@ 0xff
 8000d28:	d801      	bhi.n	8000d2e <HAL_GPIO_Init+0x13a>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	e001      	b.n	8000d32 <HAL_GPIO_Init+0x13e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3304      	adds	r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2bff      	cmp	r3, #255	@ 0xff
 8000d38:	d802      	bhi.n	8000d40 <HAL_GPIO_Init+0x14c>
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	e002      	b.n	8000d46 <HAL_GPIO_Init+0x152>
 8000d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d42:	3b08      	subs	r3, #8
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	210f      	movs	r1, #15
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	401a      	ands	r2, r3
 8000d58:	6a39      	ldr	r1, [r7, #32]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	431a      	orrs	r2, r3
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80b1 	beq.w	8000ed6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d74:	4b4d      	ldr	r3, [pc, #308]	@ (8000eac <HAL_GPIO_Init+0x2b8>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a4c      	ldr	r2, [pc, #304]	@ (8000eac <HAL_GPIO_Init+0x2b8>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b4a      	ldr	r3, [pc, #296]	@ (8000eac <HAL_GPIO_Init+0x2b8>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d8c:	4a48      	ldr	r2, [pc, #288]	@ (8000eb0 <HAL_GPIO_Init+0x2bc>)
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4013      	ands	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a40      	ldr	r2, [pc, #256]	@ (8000eb4 <HAL_GPIO_Init+0x2c0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d013      	beq.n	8000de0 <HAL_GPIO_Init+0x1ec>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a3f      	ldr	r2, [pc, #252]	@ (8000eb8 <HAL_GPIO_Init+0x2c4>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d00d      	beq.n	8000ddc <HAL_GPIO_Init+0x1e8>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a3e      	ldr	r2, [pc, #248]	@ (8000ebc <HAL_GPIO_Init+0x2c8>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d007      	beq.n	8000dd8 <HAL_GPIO_Init+0x1e4>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a3d      	ldr	r2, [pc, #244]	@ (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d101      	bne.n	8000dd4 <HAL_GPIO_Init+0x1e0>
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e006      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	e004      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	e002      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e000      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000de0:	2300      	movs	r3, #0
 8000de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000de4:	f002 0203 	and.w	r2, r2, #3
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	4093      	lsls	r3, r2
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000df2:	492f      	ldr	r1, [pc, #188]	@ (8000eb0 <HAL_GPIO_Init+0x2bc>)
 8000df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3302      	adds	r3, #2
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	492c      	ldr	r1, [pc, #176]	@ (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	608b      	str	r3, [r1, #8]
 8000e18:	e006      	b.n	8000e28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	4928      	ldr	r1, [pc, #160]	@ (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e24:	4013      	ands	r3, r2
 8000e26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e34:	4b23      	ldr	r3, [pc, #140]	@ (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	4922      	ldr	r1, [pc, #136]	@ (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	60cb      	str	r3, [r1, #12]
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e42:	4b20      	ldr	r3, [pc, #128]	@ (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	491e      	ldr	r1, [pc, #120]	@ (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d006      	beq.n	8000e6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	4918      	ldr	r1, [pc, #96]	@ (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	604b      	str	r3, [r1, #4]
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	4914      	ldr	r1, [pc, #80]	@ (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d021      	beq.n	8000ec8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	490e      	ldr	r1, [pc, #56]	@ (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	600b      	str	r3, [r1, #0]
 8000e90:	e021      	b.n	8000ed6 <HAL_GPIO_Init+0x2e2>
 8000e92:	bf00      	nop
 8000e94:	10320000 	.word	0x10320000
 8000e98:	10310000 	.word	0x10310000
 8000e9c:	10220000 	.word	0x10220000
 8000ea0:	10210000 	.word	0x10210000
 8000ea4:	10120000 	.word	0x10120000
 8000ea8:	10110000 	.word	0x10110000
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010000 	.word	0x40010000
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	40010c00 	.word	0x40010c00
 8000ebc:	40011000 	.word	0x40011000
 8000ec0:	40011400 	.word	0x40011400
 8000ec4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <HAL_GPIO_Init+0x304>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	4909      	ldr	r1, [pc, #36]	@ (8000ef8 <HAL_GPIO_Init+0x304>)
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed8:	3301      	adds	r3, #1
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f47f ae8e 	bne.w	8000c08 <HAL_GPIO_Init+0x14>
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	372c      	adds	r7, #44	@ 0x2c
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40010400 	.word	0x40010400

08000efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f0c:	787b      	ldrb	r3, [r7, #1]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f12:	887a      	ldrh	r2, [r7, #2]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f18:	e003      	b.n	8000f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	041a      	lsls	r2, r3, #16
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	611a      	str	r2, [r3, #16]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e12b      	b.n	8001196 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d106      	bne.n	8000f58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff fb3c 	bl	80005d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2224      	movs	r2, #36	@ 0x24
 8000f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0201 	bic.w	r2, r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f90:	f002 fa3a 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 8000f94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	4a81      	ldr	r2, [pc, #516]	@ (80011a0 <HAL_I2C_Init+0x274>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d807      	bhi.n	8000fb0 <HAL_I2C_Init+0x84>
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4a80      	ldr	r2, [pc, #512]	@ (80011a4 <HAL_I2C_Init+0x278>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	bf94      	ite	ls
 8000fa8:	2301      	movls	r3, #1
 8000faa:	2300      	movhi	r3, #0
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	e006      	b.n	8000fbe <HAL_I2C_Init+0x92>
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4a7d      	ldr	r2, [pc, #500]	@ (80011a8 <HAL_I2C_Init+0x27c>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	bf94      	ite	ls
 8000fb8:	2301      	movls	r3, #1
 8000fba:	2300      	movhi	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e0e7      	b.n	8001196 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4a78      	ldr	r2, [pc, #480]	@ (80011ac <HAL_I2C_Init+0x280>)
 8000fca:	fba2 2303 	umull	r2, r3, r2, r3
 8000fce:	0c9b      	lsrs	r3, r3, #18
 8000fd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	4a6a      	ldr	r2, [pc, #424]	@ (80011a0 <HAL_I2C_Init+0x274>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d802      	bhi.n	8001000 <HAL_I2C_Init+0xd4>
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	e009      	b.n	8001014 <HAL_I2C_Init+0xe8>
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001006:	fb02 f303 	mul.w	r3, r2, r3
 800100a:	4a69      	ldr	r2, [pc, #420]	@ (80011b0 <HAL_I2C_Init+0x284>)
 800100c:	fba2 2303 	umull	r2, r3, r2, r3
 8001010:	099b      	lsrs	r3, r3, #6
 8001012:	3301      	adds	r3, #1
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	6812      	ldr	r2, [r2, #0]
 8001018:	430b      	orrs	r3, r1
 800101a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001026:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	495c      	ldr	r1, [pc, #368]	@ (80011a0 <HAL_I2C_Init+0x274>)
 8001030:	428b      	cmp	r3, r1
 8001032:	d819      	bhi.n	8001068 <HAL_I2C_Init+0x13c>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	1e59      	subs	r1, r3, #1
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001042:	1c59      	adds	r1, r3, #1
 8001044:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001048:	400b      	ands	r3, r1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00a      	beq.n	8001064 <HAL_I2C_Init+0x138>
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	1e59      	subs	r1, r3, #1
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fbb1 f3f3 	udiv	r3, r1, r3
 800105c:	3301      	adds	r3, #1
 800105e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001062:	e051      	b.n	8001108 <HAL_I2C_Init+0x1dc>
 8001064:	2304      	movs	r3, #4
 8001066:	e04f      	b.n	8001108 <HAL_I2C_Init+0x1dc>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d111      	bne.n	8001094 <HAL_I2C_Init+0x168>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	1e58      	subs	r0, r3, #1
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6859      	ldr	r1, [r3, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	440b      	add	r3, r1
 800107e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001082:	3301      	adds	r3, #1
 8001084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001088:	2b00      	cmp	r3, #0
 800108a:	bf0c      	ite	eq
 800108c:	2301      	moveq	r3, #1
 800108e:	2300      	movne	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	e012      	b.n	80010ba <HAL_I2C_Init+0x18e>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	1e58      	subs	r0, r3, #1
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6859      	ldr	r1, [r3, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	0099      	lsls	r1, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010aa:	3301      	adds	r3, #1
 80010ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	bf0c      	ite	eq
 80010b4:	2301      	moveq	r3, #1
 80010b6:	2300      	movne	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_I2C_Init+0x196>
 80010be:	2301      	movs	r3, #1
 80010c0:	e022      	b.n	8001108 <HAL_I2C_Init+0x1dc>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10e      	bne.n	80010e8 <HAL_I2C_Init+0x1bc>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1e58      	subs	r0, r3, #1
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6859      	ldr	r1, [r3, #4]
 80010d2:	460b      	mov	r3, r1
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	440b      	add	r3, r1
 80010d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80010dc:	3301      	adds	r3, #1
 80010de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010e6:	e00f      	b.n	8001108 <HAL_I2C_Init+0x1dc>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	1e58      	subs	r0, r3, #1
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6859      	ldr	r1, [r3, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	440b      	add	r3, r1
 80010f6:	0099      	lsls	r1, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80010fe:	3301      	adds	r3, #1
 8001100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001104:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	6809      	ldr	r1, [r1, #0]
 800110c:	4313      	orrs	r3, r2
 800110e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69da      	ldr	r2, [r3, #28]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	430a      	orrs	r2, r1
 800112a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001136:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6911      	ldr	r1, [r2, #16]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68d2      	ldr	r2, [r2, #12]
 8001142:	4311      	orrs	r1, r2
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	6812      	ldr	r2, [r2, #0]
 8001148:	430b      	orrs	r3, r1
 800114a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	695a      	ldr	r2, [r3, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	431a      	orrs	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0201 	orr.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2220      	movs	r2, #32
 8001182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	000186a0 	.word	0x000186a0
 80011a4:	001e847f 	.word	0x001e847f
 80011a8:	003d08ff 	.word	0x003d08ff
 80011ac:	431bde83 	.word	0x431bde83
 80011b0:	10624dd3 	.word	0x10624dd3

080011b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e0e8      	b.n	8001398 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d106      	bne.n	80011e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f007 fa20 	bl	8008620 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2203      	movs	r2, #3
 80011e4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 f928 	bl	8004448 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3304      	adds	r3, #4
 8001200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001202:	f003 f8fe 	bl	8004402 <USB_CoreInit>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2202      	movs	r2, #2
 8001210:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0bf      	b.n	8001398 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f003 f92c 	bl	800447c <USB_SetCurrentMode>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d005      	beq.n	8001236 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2202      	movs	r2, #2
 800122e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e0b0      	b.n	8001398 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001236:	2300      	movs	r3, #0
 8001238:	73fb      	strb	r3, [r7, #15]
 800123a:	e03e      	b.n	80012ba <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	440b      	add	r3, r1
 800124a:	3311      	adds	r3, #17
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	3310      	adds	r3, #16
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	3313      	adds	r3, #19
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	440b      	add	r3, r1
 8001286:	3320      	adds	r3, #32
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	440b      	add	r3, r1
 800129a:	3324      	adds	r3, #36	@ 0x24
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	440b      	add	r3, r1
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	3301      	adds	r3, #1
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	791b      	ldrb	r3, [r3, #4]
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d3bb      	bcc.n	800123c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e044      	b.n	8001354 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	440b      	add	r3, r1
 80012d8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	440b      	add	r3, r1
 80012ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80012f2:	7bfa      	ldrb	r2, [r7, #15]
 80012f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	440b      	add	r3, r1
 8001304:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	440b      	add	r3, r1
 8001330:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	440b      	add	r3, r1
 8001346:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	3301      	adds	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	791b      	ldrb	r3, [r3, #4]
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	429a      	cmp	r2, r3
 800135c:	d3b5      	bcc.n	80012ca <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3304      	adds	r3, #4
 8001366:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001368:	f003 f894 	bl	8004494 <USB_DevInit>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2202      	movs	r2, #2
 8001376:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e00c      	b.n	8001398 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f005 fb14 	bl	80069be <USB_DevDisconnect>

  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <HAL_PCD_Start+0x16>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e016      	b.n	80013e4 <HAL_PCD_Start+0x44>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 f82a 	bl	800441c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80013c8:	2101      	movs	r1, #1
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f007 fb9b 	bl	8008b06 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f005 fae8 	bl	80069aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f005 faea 	bl	80069d2 <USB_ReadInterrupts>
 80013fe:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fb1a 	bl	8001a44 <PCD_EP_ISR_Handler>

    return;
 8001410:	e119      	b.n	8001646 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001418:	2b00      	cmp	r3, #0
 800141a:	d013      	beq.n	8001444 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001424:	b29a      	uxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800142e:	b292      	uxth	r2, r2
 8001430:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f007 f96e 	bl	8008716 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800143a:	2100      	movs	r1, #0
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f905 	bl	800164c <HAL_PCD_SetAddress>

    return;
 8001442:	e100      	b.n	8001646 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00c      	beq.n	8001468 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001456:	b29a      	uxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001460:	b292      	uxth	r2, r2
 8001462:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001466:	e0ee      	b.n	8001646 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00c      	beq.n	800148c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800147a:	b29a      	uxth	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001484:	b292      	uxth	r2, r2
 8001486:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800148a:	e0dc      	b.n	8001646 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d027      	beq.n	80014e6 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800149e:	b29a      	uxth	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0204 	bic.w	r2, r2, #4
 80014a8:	b292      	uxth	r2, r2
 80014aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0208 	bic.w	r2, r2, #8
 80014c0:	b292      	uxth	r2, r2
 80014c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f007 f95e 	bl	8008788 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014de:	b292      	uxth	r2, r2
 80014e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80014e4:	e0af      	b.n	8001646 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 8083 	beq.w	80015f8 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	77fb      	strb	r3, [r7, #31]
 80014f6:	e010      	b.n	800151a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	7ffb      	ldrb	r3, [r7, #31]
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	441a      	add	r2, r3
 8001504:	7ffb      	ldrb	r3, [r7, #31]
 8001506:	8812      	ldrh	r2, [r2, #0]
 8001508:	b292      	uxth	r2, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	3320      	adds	r3, #32
 800150e:	443b      	add	r3, r7
 8001510:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001514:	7ffb      	ldrb	r3, [r7, #31]
 8001516:	3301      	adds	r3, #1
 8001518:	77fb      	strb	r3, [r7, #31]
 800151a:	7ffb      	ldrb	r3, [r7, #31]
 800151c:	2b07      	cmp	r3, #7
 800151e:	d9eb      	bls.n	80014f8 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001528:	b29a      	uxth	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	b292      	uxth	r2, r2
 8001534:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001540:	b29a      	uxth	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	b292      	uxth	r2, r2
 800154c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001550:	bf00      	nop
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800155a:	b29b      	uxth	r3, r3
 800155c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f6      	beq.n	8001552 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800156c:	b29a      	uxth	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001576:	b292      	uxth	r2, r2
 8001578:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800157c:	2300      	movs	r3, #0
 800157e:	77fb      	strb	r3, [r7, #31]
 8001580:	e00f      	b.n	80015a2 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001582:	7ffb      	ldrb	r3, [r7, #31]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	4611      	mov	r1, r2
 800158a:	7ffa      	ldrb	r2, [r7, #31]
 800158c:	0092      	lsls	r2, r2, #2
 800158e:	440a      	add	r2, r1
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	3320      	adds	r3, #32
 8001594:	443b      	add	r3, r7
 8001596:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800159a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800159c:	7ffb      	ldrb	r3, [r7, #31]
 800159e:	3301      	adds	r3, #1
 80015a0:	77fb      	strb	r3, [r7, #31]
 80015a2:	7ffb      	ldrb	r3, [r7, #31]
 80015a4:	2b07      	cmp	r3, #7
 80015a6:	d9ec      	bls.n	8001582 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0208 	orr.w	r2, r2, #8
 80015ba:	b292      	uxth	r2, r2
 80015bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015d2:	b292      	uxth	r2, r2
 80015d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0204 	orr.w	r2, r2, #4
 80015ea:	b292      	uxth	r2, r2
 80015ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f007 f8af 	bl	8008754 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80015f6:	e026      	b.n	8001646 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00f      	beq.n	8001622 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800160a:	b29a      	uxth	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001614:	b292      	uxth	r2, r2
 8001616:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f007 f86d 	bl	80086fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001620:	e011      	b.n	8001646 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00c      	beq.n	8001646 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001634:	b29a      	uxth	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800163e:	b292      	uxth	r2, r2
 8001640:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001644:	bf00      	nop
  }
}
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_PCD_SetAddress+0x1a>
 8001662:	2302      	movs	r3, #2
 8001664:	e012      	b.n	800168c <HAL_PCD_SetAddress+0x40>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	78fa      	ldrb	r2, [r7, #3]
 8001672:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	78fa      	ldrb	r2, [r7, #3]
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f005 f981 	bl	8006984 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	4608      	mov	r0, r1
 800169e:	4611      	mov	r1, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	70fb      	strb	r3, [r7, #3]
 80016a6:	460b      	mov	r3, r1
 80016a8:	803b      	strh	r3, [r7, #0]
 80016aa:	4613      	mov	r3, r2
 80016ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	da0e      	bge.n	80016d8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	f003 0207 	and.w	r2, r3, #7
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	3310      	adds	r3, #16
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2201      	movs	r2, #1
 80016d4:	705a      	strb	r2, [r3, #1]
 80016d6:	e00e      	b.n	80016f6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	f003 0207 	and.w	r2, r3, #7
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001702:	883a      	ldrh	r2, [r7, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	78ba      	ldrb	r2, [r7, #2]
 800170c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800170e:	78bb      	ldrb	r3, [r7, #2]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d102      	bne.n	800171a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_PCD_EP_Open+0x94>
 8001724:	2302      	movs	r3, #2
 8001726:	e00e      	b.n	8001746 <HAL_PCD_EP_Open+0xb2>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68f9      	ldr	r1, [r7, #12]
 8001736:	4618      	mov	r0, r3
 8001738:	f002 feca 	bl	80044d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001744:	7afb      	ldrb	r3, [r7, #11]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800175a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800175e:	2b00      	cmp	r3, #0
 8001760:	da0e      	bge.n	8001780 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	f003 0207 	and.w	r2, r3, #7
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	3310      	adds	r3, #16
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2201      	movs	r2, #1
 800177c:	705a      	strb	r2, [r3, #1]
 800177e:	e00e      	b.n	800179e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	f003 0207 	and.w	r2, r3, #7
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d101      	bne.n	80017b8 <HAL_PCD_EP_Close+0x6a>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e00e      	b.n	80017d6 <HAL_PCD_EP_Close+0x88>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68f9      	ldr	r1, [r7, #12]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fa42 	bl	8004c50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	460b      	mov	r3, r1
 80017ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ee:	7afb      	ldrb	r3, [r7, #11]
 80017f0:	f003 0207 	and.w	r2, r3, #7
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2200      	movs	r2, #0
 8001816:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	2200      	movs	r2, #0
 800181c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800181e:	7afb      	ldrb	r3, [r7, #11]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	b2da      	uxtb	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6979      	ldr	r1, [r7, #20]
 8001830:	4618      	mov	r0, r3
 8001832:	f003 fbf9 	bl	8005028 <USB_EPStartXfer>

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	f003 0207 	and.w	r2, r3, #7
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	460b      	mov	r3, r1
 800187c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800187e:	7afb      	ldrb	r3, [r7, #11]
 8001880:	f003 0207 	and.w	r2, r3, #7
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	3310      	adds	r3, #16
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4413      	add	r3, r2
 8001892:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2200      	movs	r2, #0
 80018b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2201      	movs	r2, #1
 80018b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018ba:	7afb      	ldrb	r3, [r7, #11]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6979      	ldr	r1, [r7, #20]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 fbab 	bl	8005028 <USB_EPStartXfer>

  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	7912      	ldrb	r2, [r2, #4]
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e04c      	b.n	8001994 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	da0e      	bge.n	8001920 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	f003 0207 	and.w	r2, r3, #7
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	3310      	adds	r3, #16
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2201      	movs	r2, #1
 800191c:	705a      	strb	r2, [r3, #1]
 800191e:	e00c      	b.n	800193a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2201      	movs	r2, #1
 800193e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	b2da      	uxtb	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001952:	2b01      	cmp	r3, #1
 8001954:	d101      	bne.n	800195a <HAL_PCD_EP_SetStall+0x7e>
 8001956:	2302      	movs	r3, #2
 8001958:	e01c      	b.n	8001994 <HAL_PCD_EP_SetStall+0xb8>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68f9      	ldr	r1, [r7, #12]
 8001968:	4618      	mov	r0, r3
 800196a:	f004 ff0e 	bl	800678a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	2b00      	cmp	r3, #0
 8001976:	d108      	bne.n	800198a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001982:	4619      	mov	r1, r3
 8001984:	4610      	mov	r0, r2
 8001986:	f005 f833 	bl	80069f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	7912      	ldrb	r2, [r2, #4]
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e040      	b.n	8001a3c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	da0e      	bge.n	80019e0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	f003 0207 	and.w	r2, r3, #7
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	3310      	adds	r3, #16
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2201      	movs	r2, #1
 80019dc:	705a      	strb	r2, [r3, #1]
 80019de:	e00e      	b.n	80019fe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	f003 0207 	and.w	r2, r3, #7
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_PCD_EP_ClrStall+0x82>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e00e      	b.n	8001a3c <HAL_PCD_EP_ClrStall+0xa0>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68f9      	ldr	r1, [r7, #12]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f004 fefc 	bl	800682a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b096      	sub	sp, #88	@ 0x58
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a4c:	e3bb      	b.n	80021c6 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a56:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001a68:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f040 8175 	bne.w	8001d5c <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d14e      	bne.n	8001b1c <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a8e:	81fb      	strh	r3, [r7, #14]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	89fb      	ldrh	r3, [r7, #14]
 8001a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3310      	adds	r3, #16
 8001aa6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4413      	add	r3, r2
 8001abc:	3302      	adds	r3, #2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	441a      	add	r2, r3
 8001ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f006 fdee 	bl	80086c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	7b5b      	ldrb	r3, [r3, #13]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 8368 	beq.w	80021c6 <PCD_EP_ISR_Handler+0x782>
 8001af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 8363 	bne.w	80021c6 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7b5b      	ldrb	r3, [r3, #13]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	735a      	strb	r2, [r3, #13]
 8001b1a:	e354      	b.n	80021c6 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b22:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d034      	beq.n	8001ba4 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3306      	adds	r3, #6
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b64:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b72:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b76:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	f004 ff89 	bl	8006a90 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	823b      	strh	r3, [r7, #16]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	8a3a      	ldrh	r2, [r7, #16]
 8001b94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b98:	b292      	uxth	r2, r2
 8001b9a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f006 fd65 	bl	800866c <HAL_PCD_SetupStageCallback>
 8001ba2:	e310      	b.n	80021c6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ba4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f280 830c 	bge.w	80021c6 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001bba:	4013      	ands	r3, r2
 8001bbc:	83fb      	strh	r3, [r7, #30]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	8bfa      	ldrh	r2, [r7, #30]
 8001bc4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001bc8:	b292      	uxth	r2, r2
 8001bca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	4413      	add	r3, r2
 8001be0:	3306      	adds	r3, #6
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d019      	beq.n	8001c34 <PCD_EP_ISR_Handler+0x1f0>
 8001c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d015      	beq.n	8001c34 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c0e:	6959      	ldr	r1, [r3, #20]
 8001c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c12:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c16:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f004 ff39 	bl	8006a90 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	441a      	add	r2, r3
 8001c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c2a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f006 fd2e 	bl	8008690 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001c3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 82bd 	bne.w	80021c6 <PCD_EP_ISR_Handler+0x782>
 8001c4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c50:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001c54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001c58:	f000 82b5 	beq.w	80021c6 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	61bb      	str	r3, [r7, #24]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	4413      	add	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	801a      	strh	r2, [r3, #0]
 8001c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c92:	d91d      	bls.n	8001cd0 <PCD_EP_ISR_Handler+0x28c>
 8001c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	095b      	lsrs	r3, r3, #5
 8001c9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <PCD_EP_ISR_Handler+0x26a>
 8001ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001caa:	3b01      	subs	r3, #1
 8001cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	029b      	lsls	r3, r3, #10
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	801a      	strh	r2, [r3, #0]
 8001cce:	e026      	b.n	8001d1e <PCD_EP_ISR_Handler+0x2da>
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10a      	bne.n	8001cee <PCD_EP_ISR_Handler+0x2aa>
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	801a      	strh	r2, [r3, #0]
 8001cec:	e017      	b.n	8001d1e <PCD_EP_ISR_Handler+0x2da>
 8001cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	085b      	lsrs	r3, r3, #1
 8001cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <PCD_EP_ISR_Handler+0x2c4>
 8001d02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d04:	3301      	adds	r3, #1
 8001d06:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	029b      	lsls	r3, r3, #10
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4313      	orrs	r3, r2
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d2e:	827b      	strh	r3, [r7, #18]
 8001d30:	8a7b      	ldrh	r3, [r7, #18]
 8001d32:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001d36:	827b      	strh	r3, [r7, #18]
 8001d38:	8a7b      	ldrh	r3, [r7, #18]
 8001d3a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001d3e:	827b      	strh	r3, [r7, #18]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	8a7b      	ldrh	r3, [r7, #18]
 8001d46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	8013      	strh	r3, [r2, #0]
 8001d5a:	e234      	b.n	80021c6 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d70:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f280 80fc 	bge.w	8001f72 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001d90:	4013      	ands	r3, r2
 8001d92:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001da8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dac:	b292      	uxth	r2, r2
 8001dae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001db0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc8:	7b1b      	ldrb	r3, [r3, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d125      	bne.n	8001e1a <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	3306      	adds	r3, #6
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001df6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001dfa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8092 	beq.w	8001f28 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0a:	6959      	ldr	r1, [r3, #20]
 8001e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0e:	88da      	ldrh	r2, [r3, #6]
 8001e10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e14:	f004 fe3c 	bl	8006a90 <USB_ReadPMA>
 8001e18:	e086      	b.n	8001f28 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e1c:	78db      	ldrb	r3, [r3, #3]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d10a      	bne.n	8001e38 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e26:	461a      	mov	r2, r3
 8001e28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f9d9 	bl	80021e2 <HAL_PCD_EP_DB_Receive>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001e36:	e077      	b.n	8001f28 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e52:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	441a      	add	r2, r3
 8001e64:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001e68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d024      	beq.n	8001ee0 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ebe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001ec2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d02e      	beq.n	8001f28 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed0:	6959      	ldr	r1, [r3, #20]
 8001ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed4:	891a      	ldrh	r2, [r3, #8]
 8001ed6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001eda:	f004 fdd9 	bl	8006a90 <USB_ReadPMA>
 8001ede:	e023      	b.n	8001f28 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3306      	adds	r3, #6
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f08:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001f0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d009      	beq.n	8001f28 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1a:	6959      	ldr	r1, [r3, #20]
 8001f1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1e:	895a      	ldrh	r2, [r3, #10]
 8001f20:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f24:	f004 fdb4 	bl	8006a90 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f2a:	69da      	ldr	r2, [r3, #28]
 8001f2c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f30:	441a      	add	r2, r3
 8001f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f34:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f3e:	441a      	add	r2, r3
 8001f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f42:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <PCD_EP_ISR_Handler+0x514>
 8001f4c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d206      	bcs.n	8001f66 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f006 fb96 	bl	8008690 <HAL_PCD_DataOutStageCallback>
 8001f64:	e005      	b.n	8001f72 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f003 f85b 	bl	8005028 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8123 	beq.w	80021c6 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f80:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	3310      	adds	r3, #16
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	441a      	add	r2, r3
 8001fc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd2:	78db      	ldrb	r3, [r3, #3]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	f040 80a2 	bne.w	800211e <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe2:	7b1b      	ldrb	r3, [r3, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8093 	beq.w	8002110 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d046      	beq.n	8002084 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff8:	785b      	ldrb	r3, [r3, #1]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d126      	bne.n	800204c <PCD_EP_ISR_Handler+0x608>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800200c:	b29b      	uxth	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	4413      	add	r3, r2
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
 8002016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	011a      	lsls	r2, r3, #4
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	4413      	add	r3, r2
 8002020:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002024:	623b      	str	r3, [r7, #32]
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	b29b      	uxth	r3, r3
 800202c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002030:	b29a      	uxth	r2, r3
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	801a      	strh	r2, [r3, #0]
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002044:	b29a      	uxth	r2, r3
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	801a      	strh	r2, [r3, #0]
 800204a:	e061      	b.n	8002110 <PCD_EP_ISR_Handler+0x6cc>
 800204c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800204e:	785b      	ldrb	r3, [r3, #1]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d15d      	bne.n	8002110 <PCD_EP_ISR_Handler+0x6cc>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002062:	b29b      	uxth	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002068:	4413      	add	r3, r2
 800206a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800206c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	011a      	lsls	r2, r3, #4
 8002072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002074:	4413      	add	r3, r2
 8002076:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800207a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800207c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800207e:	2200      	movs	r2, #0
 8002080:	801a      	strh	r2, [r3, #0]
 8002082:	e045      	b.n	8002110 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800208a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800208c:	785b      	ldrb	r3, [r3, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d126      	bne.n	80020e0 <PCD_EP_ISR_Handler+0x69c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	637b      	str	r3, [r7, #52]	@ 0x34
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020a6:	4413      	add	r3, r2
 80020a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80020aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	011a      	lsls	r2, r3, #4
 80020b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020b2:	4413      	add	r3, r2
 80020b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80020b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80020ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c8:	801a      	strh	r2, [r3, #0]
 80020ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020d8:	b29a      	uxth	r2, r3
 80020da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020dc:	801a      	strh	r2, [r3, #0]
 80020de:	e017      	b.n	8002110 <PCD_EP_ISR_Handler+0x6cc>
 80020e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e2:	785b      	ldrb	r3, [r3, #1]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d113      	bne.n	8002110 <PCD_EP_ISR_Handler+0x6cc>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020f6:	4413      	add	r3, r2
 80020f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	011a      	lsls	r2, r3, #4
 8002100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002102:	4413      	add	r3, r2
 8002104:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002108:	63bb      	str	r3, [r7, #56]	@ 0x38
 800210a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800210c:	2200      	movs	r2, #0
 800210e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f006 fad5 	bl	80086c6 <HAL_PCD_DataInStageCallback>
 800211c:	e053      	b.n	80021c6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800211e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d146      	bne.n	80021b8 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	3302      	adds	r3, #2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	4413      	add	r3, r2
 8002148:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002152:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800215e:	429a      	cmp	r2, r3
 8002160:	d907      	bls.n	8002172 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800216a:	1ad2      	subs	r2, r2, r3
 800216c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800216e:	619a      	str	r2, [r3, #24]
 8002170:	e002      	b.n	8002178 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d106      	bne.n	800218e <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4619      	mov	r1, r3
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f006 fa9d 	bl	80086c6 <HAL_PCD_DataInStageCallback>
 800218c:	e01b      	b.n	80021c6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800218e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002196:	441a      	add	r2, r3
 8002198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800219c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219e:	69da      	ldr	r2, [r3, #28]
 80021a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80021a4:	441a      	add	r2, r3
 80021a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80021b0:	4618      	mov	r0, r3
 80021b2:	f002 ff39 	bl	8005028 <USB_EPStartXfer>
 80021b6:	e006      	b.n	80021c6 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80021b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021bc:	461a      	mov	r2, r3
 80021be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f91b 	bl	80023fc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	b21b      	sxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f6ff ac3b 	blt.w	8001a4e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3758      	adds	r7, #88	@ 0x58
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b088      	sub	sp, #32
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	4613      	mov	r3, r2
 80021ee:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d07e      	beq.n	80022f8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	3302      	adds	r3, #2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	4413      	add	r3, r2
 8002218:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002222:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	8b7b      	ldrh	r3, [r7, #26]
 800222a:	429a      	cmp	r2, r3
 800222c:	d306      	bcc.n	800223c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	8b7b      	ldrh	r3, [r7, #26]
 8002234:	1ad2      	subs	r2, r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	619a      	str	r2, [r3, #24]
 800223a:	e002      	b.n	8002242 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d123      	bne.n	8002292 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002264:	833b      	strh	r3, [r7, #24]
 8002266:	8b3b      	ldrh	r3, [r7, #24]
 8002268:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800226c:	833b      	strh	r3, [r7, #24]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	441a      	add	r2, r3
 800227c:	8b3b      	ldrh	r3, [r7, #24]
 800227e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002282:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800228a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800228e:	b29b      	uxth	r3, r3
 8002290:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01f      	beq.n	80022dc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022b6:	82fb      	strh	r3, [r7, #22]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	441a      	add	r2, r3
 80022c6:	8afb      	ldrh	r3, [r7, #22]
 80022c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80022d8:	b29b      	uxth	r3, r3
 80022da:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022dc:	8b7b      	ldrh	r3, [r7, #26]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 8087 	beq.w	80023f2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	6959      	ldr	r1, [r3, #20]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	891a      	ldrh	r2, [r3, #8]
 80022f0:	8b7b      	ldrh	r3, [r7, #26]
 80022f2:	f004 fbcd 	bl	8006a90 <USB_ReadPMA>
 80022f6:	e07c      	b.n	80023f2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002300:	b29b      	uxth	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4413      	add	r3, r2
 800230c:	3306      	adds	r3, #6
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002320:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	8b7b      	ldrh	r3, [r7, #26]
 8002328:	429a      	cmp	r2, r3
 800232a:	d306      	bcc.n	800233a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	699a      	ldr	r2, [r3, #24]
 8002330:	8b7b      	ldrh	r3, [r7, #26]
 8002332:	1ad2      	subs	r2, r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	619a      	str	r2, [r3, #24]
 8002338:	e002      	b.n	8002340 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d123      	bne.n	8002390 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	b29b      	uxth	r3, r3
 800235a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800235e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002362:	83fb      	strh	r3, [r7, #30]
 8002364:	8bfb      	ldrh	r3, [r7, #30]
 8002366:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800236a:	83fb      	strh	r3, [r7, #30]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	441a      	add	r2, r3
 800237a:	8bfb      	ldrh	r3, [r7, #30]
 800237c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002380:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002384:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800238c:	b29b      	uxth	r3, r3
 800238e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d11f      	bne.n	80023da <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023b4:	83bb      	strh	r3, [r7, #28]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	441a      	add	r2, r3
 80023c4:	8bbb      	ldrh	r3, [r7, #28]
 80023c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023da:	8b7b      	ldrh	r3, [r7, #26]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	6959      	ldr	r1, [r3, #20]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	895a      	ldrh	r2, [r3, #10]
 80023ec:	8b7b      	ldrh	r3, [r7, #26]
 80023ee:	f004 fb4f 	bl	8006a90 <USB_ReadPMA>
    }
  }

  return count;
 80023f2:	8b7b      	ldrh	r3, [r7, #26]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3720      	adds	r7, #32
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b0a4      	sub	sp, #144	@ 0x90
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	4613      	mov	r3, r2
 8002408:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 81dd 	beq.w	80027d0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800241e:	b29b      	uxth	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	3302      	adds	r3, #2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	4413      	add	r3, r2
 8002434:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800243e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800244a:	429a      	cmp	r2, r3
 800244c:	d907      	bls.n	800245e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002456:	1ad2      	subs	r2, r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	619a      	str	r2, [r3, #24]
 800245c:	e002      	b.n	8002464 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 80b9 	bne.w	80025e0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	785b      	ldrb	r3, [r3, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d126      	bne.n	80024c4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002484:	b29b      	uxth	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800248a:	4413      	add	r3, r2
 800248c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	011a      	lsls	r2, r3, #4
 8002494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002496:	4413      	add	r3, r2
 8002498:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800249c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800249e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ac:	801a      	strh	r2, [r3, #0]
 80024ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024bc:	b29a      	uxth	r2, r3
 80024be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c0:	801a      	strh	r2, [r3, #0]
 80024c2:	e01a      	b.n	80024fa <HAL_PCD_EP_DB_Transmit+0xfe>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	785b      	ldrb	r3, [r3, #1]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d116      	bne.n	80024fa <HAL_PCD_EP_DB_Transmit+0xfe>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024da:	b29b      	uxth	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024e0:	4413      	add	r3, r2
 80024e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	011a      	lsls	r2, r3, #4
 80024ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ec:	4413      	add	r3, r2
 80024ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80024f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f6:	2200      	movs	r2, #0
 80024f8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	785b      	ldrb	r3, [r3, #1]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d126      	bne.n	8002556 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002516:	b29b      	uxth	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	4413      	add	r3, r2
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	011a      	lsls	r2, r3, #4
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	4413      	add	r3, r2
 800252a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800253a:	b29a      	uxth	r2, r3
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	801a      	strh	r2, [r3, #0]
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800254a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800254e:	b29a      	uxth	r2, r3
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	801a      	strh	r2, [r3, #0]
 8002554:	e017      	b.n	8002586 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	785b      	ldrb	r3, [r3, #1]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d113      	bne.n	8002586 <HAL_PCD_EP_DB_Transmit+0x18a>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002566:	b29b      	uxth	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	4413      	add	r3, r2
 800256e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	011a      	lsls	r2, r3, #4
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	4413      	add	r3, r2
 800257a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800257e:	623b      	str	r3, [r7, #32]
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	2200      	movs	r2, #0
 8002584:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	4619      	mov	r1, r3
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f006 f89a 	bl	80086c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 82fc 	beq.w	8002b96 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025b8:	82fb      	strh	r3, [r7, #22]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	441a      	add	r2, r3
 80025c8:	8afb      	ldrh	r3, [r7, #22]
 80025ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025da:	b29b      	uxth	r3, r3
 80025dc:	8013      	strh	r3, [r2, #0]
 80025de:	e2da      	b.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d021      	beq.n	800262e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002604:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	441a      	add	r2, r3
 8002616:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800261a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800261e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002622:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800262a:	b29b      	uxth	r3, r3
 800262c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002634:	2b01      	cmp	r3, #1
 8002636:	f040 82ae 	bne.w	8002b96 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002642:	441a      	add	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002650:	441a      	add	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	6a1a      	ldr	r2, [r3, #32]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	429a      	cmp	r2, r3
 8002660:	d30b      	bcc.n	800267a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	6a1a      	ldr	r2, [r3, #32]
 800266e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002672:	1ad2      	subs	r2, r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	621a      	str	r2, [r3, #32]
 8002678:	e017      	b.n	80026aa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d108      	bne.n	8002694 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002682:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002686:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002692:	e00a      	b.n	80026aa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2200      	movs	r2, #0
 80026a8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	785b      	ldrb	r3, [r3, #1]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d165      	bne.n	800277e <HAL_PCD_EP_DB_Transmit+0x382>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026c6:	4413      	add	r3, r2
 80026c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	011a      	lsls	r2, r3, #4
 80026d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026d2:	4413      	add	r3, r2
 80026d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80026d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e8:	801a      	strh	r2, [r3, #0]
 80026ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80026f0:	d91d      	bls.n	800272e <HAL_PCD_EP_DB_Transmit+0x332>
 80026f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	2b00      	cmp	r3, #0
 8002704:	d102      	bne.n	800270c <HAL_PCD_EP_DB_Transmit+0x310>
 8002706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002708:	3b01      	subs	r3, #1
 800270a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800270c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	b29a      	uxth	r2, r3
 8002712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002714:	b29b      	uxth	r3, r3
 8002716:	029b      	lsls	r3, r3, #10
 8002718:	b29b      	uxth	r3, r3
 800271a:	4313      	orrs	r3, r2
 800271c:	b29b      	uxth	r3, r3
 800271e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002726:	b29a      	uxth	r2, r3
 8002728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800272a:	801a      	strh	r2, [r3, #0]
 800272c:	e044      	b.n	80027b8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800272e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10a      	bne.n	800274c <HAL_PCD_EP_DB_Transmit+0x350>
 8002736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002744:	b29a      	uxth	r2, r3
 8002746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002748:	801a      	strh	r2, [r3, #0]
 800274a:	e035      	b.n	80027b8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800274c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002750:	085b      	lsrs	r3, r3, #1
 8002752:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002754:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002762:	3301      	adds	r3, #1
 8002764:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	b29a      	uxth	r2, r3
 800276c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800276e:	b29b      	uxth	r3, r3
 8002770:	029b      	lsls	r3, r3, #10
 8002772:	b29b      	uxth	r3, r3
 8002774:	4313      	orrs	r3, r2
 8002776:	b29a      	uxth	r2, r3
 8002778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277a:	801a      	strh	r2, [r3, #0]
 800277c:	e01c      	b.n	80027b8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	785b      	ldrb	r3, [r3, #1]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d118      	bne.n	80027b8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	647b      	str	r3, [r7, #68]	@ 0x44
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002794:	b29b      	uxth	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800279a:	4413      	add	r3, r2
 800279c:	647b      	str	r3, [r7, #68]	@ 0x44
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	011a      	lsls	r2, r3, #4
 80027a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027a6:	4413      	add	r3, r2
 80027a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80027ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80027ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027b6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	6959      	ldr	r1, [r3, #20]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	891a      	ldrh	r2, [r3, #8]
 80027c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f004 f91c 	bl	8006a06 <USB_WritePMA>
 80027ce:	e1e2      	b.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	3306      	adds	r3, #6
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	699a      	ldr	r2, [r3, #24]
 8002800:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002804:	429a      	cmp	r2, r3
 8002806:	d307      	bcc.n	8002818 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	699a      	ldr	r2, [r3, #24]
 800280c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002810:	1ad2      	subs	r2, r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	619a      	str	r2, [r3, #24]
 8002816:	e002      	b.n	800281e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2200      	movs	r2, #0
 800281c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f040 80c0 	bne.w	80029a8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	785b      	ldrb	r3, [r3, #1]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d126      	bne.n	800287e <HAL_PCD_EP_DB_Transmit+0x482>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800283e:	b29b      	uxth	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002844:	4413      	add	r3, r2
 8002846:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	011a      	lsls	r2, r3, #4
 800284e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002850:	4413      	add	r3, r2
 8002852:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002856:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002858:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002862:	b29a      	uxth	r2, r3
 8002864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002866:	801a      	strh	r2, [r3, #0]
 8002868:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002876:	b29a      	uxth	r2, r3
 8002878:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800287a:	801a      	strh	r2, [r3, #0]
 800287c:	e01a      	b.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	785b      	ldrb	r3, [r3, #1]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d116      	bne.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	667b      	str	r3, [r7, #100]	@ 0x64
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002894:	b29b      	uxth	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800289a:	4413      	add	r3, r2
 800289c:	667b      	str	r3, [r7, #100]	@ 0x64
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	011a      	lsls	r2, r3, #4
 80028a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028a6:	4413      	add	r3, r2
 80028a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80028ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80028ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028b0:	2200      	movs	r2, #0
 80028b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	785b      	ldrb	r3, [r3, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d12b      	bne.n	800291a <HAL_PCD_EP_DB_Transmit+0x51e>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028d6:	4413      	add	r3, r2
 80028d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	011a      	lsls	r2, r3, #4
 80028e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028e2:	4413      	add	r3, r2
 80028e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028fe:	801a      	strh	r2, [r3, #0]
 8002900:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800290c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002910:	b29a      	uxth	r2, r3
 8002912:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002916:	801a      	strh	r2, [r3, #0]
 8002918:	e017      	b.n	800294a <HAL_PCD_EP_DB_Transmit+0x54e>
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	785b      	ldrb	r3, [r3, #1]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d113      	bne.n	800294a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800292a:	b29b      	uxth	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002930:	4413      	add	r3, r2
 8002932:	677b      	str	r3, [r7, #116]	@ 0x74
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	011a      	lsls	r2, r3, #4
 800293a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800293c:	4413      	add	r3, r2
 800293e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002942:	673b      	str	r3, [r7, #112]	@ 0x70
 8002944:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002946:	2200      	movs	r2, #0
 8002948:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	4619      	mov	r1, r3
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f005 feb8 	bl	80086c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800295c:	2b00      	cmp	r3, #0
 800295e:	f040 811a 	bne.w	8002b96 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800297c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	441a      	add	r2, r3
 800298e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800299a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800299e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	8013      	strh	r3, [r2, #0]
 80029a6:	e0f6      	b.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d121      	bne.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029cc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	441a      	add	r2, r3
 80029de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80029e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	f040 80ca 	bne.w	8002b96 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a0a:	441a      	add	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	69da      	ldr	r2, [r3, #28]
 8002a14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a18:	441a      	add	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	6a1a      	ldr	r2, [r3, #32]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d30b      	bcc.n	8002a42 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	6a1a      	ldr	r2, [r3, #32]
 8002a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a3a:	1ad2      	subs	r2, r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	621a      	str	r2, [r3, #32]
 8002a40:	e017      	b.n	8002a72 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d108      	bne.n	8002a5c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002a4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002a5a:	e00a      	b.n	8002a72 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2200      	movs	r2, #0
 8002a68:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	785b      	ldrb	r3, [r3, #1]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d165      	bne.n	8002b4c <HAL_PCD_EP_DB_Transmit+0x750>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a94:	4413      	add	r3, r2
 8002a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	011a      	lsls	r2, r3, #4
 8002a9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002aa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ab6:	801a      	strh	r2, [r3, #0]
 8002ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002abc:	2b3e      	cmp	r3, #62	@ 0x3e
 8002abe:	d91d      	bls.n	8002afc <HAL_PCD_EP_DB_Transmit+0x700>
 8002ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ac4:	095b      	lsrs	r3, r3, #5
 8002ac6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <HAL_PCD_EP_DB_Transmit+0x6de>
 8002ad4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ada:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	029b      	lsls	r3, r3, #10
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002af8:	801a      	strh	r2, [r3, #0]
 8002afa:	e041      	b.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x784>
 8002afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x71e>
 8002b04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b16:	801a      	strh	r2, [r3, #0]
 8002b18:	e032      	b.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x784>
 8002b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_PCD_EP_DB_Transmit+0x738>
 8002b2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b30:	3301      	adds	r3, #1
 8002b32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	029b      	lsls	r3, r3, #10
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	4313      	orrs	r3, r2
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b48:	801a      	strh	r2, [r3, #0]
 8002b4a:	e019      	b.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x784>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	785b      	ldrb	r3, [r3, #1]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d115      	bne.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x784>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b62:	4413      	add	r3, r2
 8002b64:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	011a      	lsls	r2, r3, #4
 8002b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b6e:	4413      	add	r3, r2
 8002b70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b74:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b7e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	6959      	ldr	r1, [r3, #20]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	895a      	ldrh	r2, [r3, #10]
 8002b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	f003 ff38 	bl	8006a06 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bb0:	82bb      	strh	r3, [r7, #20]
 8002bb2:	8abb      	ldrh	r3, [r7, #20]
 8002bb4:	f083 0310 	eor.w	r3, r3, #16
 8002bb8:	82bb      	strh	r3, [r7, #20]
 8002bba:	8abb      	ldrh	r3, [r7, #20]
 8002bbc:	f083 0320 	eor.w	r3, r3, #32
 8002bc0:	82bb      	strh	r3, [r7, #20]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	441a      	add	r2, r3
 8002bd0:	8abb      	ldrh	r3, [r7, #20]
 8002bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3790      	adds	r7, #144	@ 0x90
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	817b      	strh	r3, [r7, #10]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c0e:	897b      	ldrh	r3, [r7, #10]
 8002c10:	f003 0207 	and.w	r2, r3, #7
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	3310      	adds	r3, #16
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4413      	add	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	e009      	b.n	8002c3a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c26:	897a      	ldrh	r2, [r7, #10]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4413      	add	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c3a:	893b      	ldrh	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2200      	movs	r2, #0
 8002c44:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	80da      	strh	r2, [r3, #6]
 8002c4e:	e00b      	b.n	8002c68 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2201      	movs	r2, #1
 8002c54:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0c1b      	lsrs	r3, r3, #16
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e272      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8087 	beq.w	8002da2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c94:	4b92      	ldr	r3, [pc, #584]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 030c 	and.w	r3, r3, #12
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d00c      	beq.n	8002cba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ca0:	4b8f      	ldr	r3, [pc, #572]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 030c 	and.w	r3, r3, #12
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d112      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x5e>
 8002cac:	4b8c      	ldr	r3, [pc, #560]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb8:	d10b      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cba:	4b89      	ldr	r3, [pc, #548]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d06c      	beq.n	8002da0 <HAL_RCC_OscConfig+0x12c>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d168      	bne.n	8002da0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e24c      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x76>
 8002cdc:	4b80      	ldr	r3, [pc, #512]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a7f      	ldr	r2, [pc, #508]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	e02e      	b.n	8002d48 <HAL_RCC_OscConfig+0xd4>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x98>
 8002cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a7a      	ldr	r2, [pc, #488]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	4b78      	ldr	r3, [pc, #480]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a77      	ldr	r2, [pc, #476]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e01d      	b.n	8002d48 <HAL_RCC_OscConfig+0xd4>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCC_OscConfig+0xbc>
 8002d16:	4b72      	ldr	r3, [pc, #456]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a71      	ldr	r2, [pc, #452]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a6e      	ldr	r2, [pc, #440]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e00b      	b.n	8002d48 <HAL_RCC_OscConfig+0xd4>
 8002d30:	4b6b      	ldr	r3, [pc, #428]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a6a      	ldr	r2, [pc, #424]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	4b68      	ldr	r3, [pc, #416]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a67      	ldr	r2, [pc, #412]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d013      	beq.n	8002d78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fd fe42 	bl	80009d8 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d58:	f7fd fe3e 	bl	80009d8 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	@ 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e200      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0xe4>
 8002d76:	e014      	b.n	8002da2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fd fe2e 	bl	80009d8 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d80:	f7fd fe2a 	bl	80009d8 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	@ 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e1ec      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d92:	4b53      	ldr	r3, [pc, #332]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x10c>
 8002d9e:	e000      	b.n	8002da2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d063      	beq.n	8002e76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dae:	4b4c      	ldr	r3, [pc, #304]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00b      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dba:	4b49      	ldr	r3, [pc, #292]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d11c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x18c>
 8002dc6:	4b46      	ldr	r3, [pc, #280]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d116      	bne.n	8002e00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	4b43      	ldr	r3, [pc, #268]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_RCC_OscConfig+0x176>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d001      	beq.n	8002dea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e1c0      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dea:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4939      	ldr	r1, [pc, #228]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfe:	e03a      	b.n	8002e76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d020      	beq.n	8002e4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e08:	4b36      	ldr	r3, [pc, #216]	@ (8002ee4 <HAL_RCC_OscConfig+0x270>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0e:	f7fd fde3 	bl	80009d8 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e16:	f7fd fddf 	bl	80009d8 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e1a1      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e34:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4927      	ldr	r1, [pc, #156]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]
 8002e48:	e015      	b.n	8002e76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4a:	4b26      	ldr	r3, [pc, #152]	@ (8002ee4 <HAL_RCC_OscConfig+0x270>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fd fdc2 	bl	80009d8 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e58:	f7fd fdbe 	bl	80009d8 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e180      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d03a      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d019      	beq.n	8002ebe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8a:	4b17      	ldr	r3, [pc, #92]	@ (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e90:	f7fd fda2 	bl	80009d8 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e98:	f7fd fd9e 	bl	80009d8 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e160      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	f000 faea 	bl	8003490 <RCC_Delay>
 8002ebc:	e01c      	b.n	8002ef8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec4:	f7fd fd88 	bl	80009d8 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eca:	e00f      	b.n	8002eec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ecc:	f7fd fd84 	bl	80009d8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d908      	bls.n	8002eec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e146      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	42420000 	.word	0x42420000
 8002ee8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eec:	4b92      	ldr	r3, [pc, #584]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e9      	bne.n	8002ecc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80a6 	beq.w	8003052 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0a:	4b8b      	ldr	r3, [pc, #556]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10d      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	4b88      	ldr	r3, [pc, #544]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	4a87      	ldr	r2, [pc, #540]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	61d3      	str	r3, [r2, #28]
 8002f22:	4b85      	ldr	r3, [pc, #532]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f32:	4b82      	ldr	r3, [pc, #520]	@ (800313c <HAL_RCC_OscConfig+0x4c8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d118      	bne.n	8002f70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800313c <HAL_RCC_OscConfig+0x4c8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a7e      	ldr	r2, [pc, #504]	@ (800313c <HAL_RCC_OscConfig+0x4c8>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4a:	f7fd fd45 	bl	80009d8 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f52:	f7fd fd41 	bl	80009d8 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b64      	cmp	r3, #100	@ 0x64
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e103      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	4b75      	ldr	r3, [pc, #468]	@ (800313c <HAL_RCC_OscConfig+0x4c8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x312>
 8002f78:	4b6f      	ldr	r3, [pc, #444]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	4a6e      	ldr	r2, [pc, #440]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6213      	str	r3, [r2, #32]
 8002f84:	e02d      	b.n	8002fe2 <HAL_RCC_OscConfig+0x36e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x334>
 8002f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	4a69      	ldr	r2, [pc, #420]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	6213      	str	r3, [r2, #32]
 8002f9a:	4b67      	ldr	r3, [pc, #412]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	4a66      	ldr	r2, [pc, #408]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002fa0:	f023 0304 	bic.w	r3, r3, #4
 8002fa4:	6213      	str	r3, [r2, #32]
 8002fa6:	e01c      	b.n	8002fe2 <HAL_RCC_OscConfig+0x36e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	2b05      	cmp	r3, #5
 8002fae:	d10c      	bne.n	8002fca <HAL_RCC_OscConfig+0x356>
 8002fb0:	4b61      	ldr	r3, [pc, #388]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	4a60      	ldr	r2, [pc, #384]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	f043 0304 	orr.w	r3, r3, #4
 8002fba:	6213      	str	r3, [r2, #32]
 8002fbc:	4b5e      	ldr	r3, [pc, #376]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	6213      	str	r3, [r2, #32]
 8002fc8:	e00b      	b.n	8002fe2 <HAL_RCC_OscConfig+0x36e>
 8002fca:	4b5b      	ldr	r3, [pc, #364]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	4a5a      	ldr	r2, [pc, #360]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	6213      	str	r3, [r2, #32]
 8002fd6:	4b58      	ldr	r3, [pc, #352]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4a57      	ldr	r2, [pc, #348]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d015      	beq.n	8003016 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fea:	f7fd fcf5 	bl	80009d8 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fd fcf1 	bl	80009d8 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e0b1      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003008:	4b4b      	ldr	r3, [pc, #300]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ee      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x37e>
 8003014:	e014      	b.n	8003040 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003016:	f7fd fcdf 	bl	80009d8 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301c:	e00a      	b.n	8003034 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301e:	f7fd fcdb 	bl	80009d8 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302c:	4293      	cmp	r3, r2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e09b      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003034:	4b40      	ldr	r3, [pc, #256]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1ee      	bne.n	800301e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d105      	bne.n	8003052 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003046:	4b3c      	ldr	r3, [pc, #240]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4a3b      	ldr	r2, [pc, #236]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 800304c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003050:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8087 	beq.w	800316a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800305c:	4b36      	ldr	r3, [pc, #216]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b08      	cmp	r3, #8
 8003066:	d061      	beq.n	800312c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d146      	bne.n	80030fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003070:	4b33      	ldr	r3, [pc, #204]	@ (8003140 <HAL_RCC_OscConfig+0x4cc>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003076:	f7fd fcaf 	bl	80009d8 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307e:	f7fd fcab 	bl	80009d8 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e06d      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003090:	4b29      	ldr	r3, [pc, #164]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f0      	bne.n	800307e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a4:	d108      	bne.n	80030b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030a6:	4b24      	ldr	r3, [pc, #144]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	4921      	ldr	r1, [pc, #132]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a19      	ldr	r1, [r3, #32]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	430b      	orrs	r3, r1
 80030ca:	491b      	ldr	r1, [pc, #108]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003140 <HAL_RCC_OscConfig+0x4cc>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d6:	f7fd fc7f 	bl	80009d8 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030de:	f7fd fc7b 	bl	80009d8 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e03d      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030f0:	4b11      	ldr	r3, [pc, #68]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x46a>
 80030fc:	e035      	b.n	800316a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fe:	4b10      	ldr	r3, [pc, #64]	@ (8003140 <HAL_RCC_OscConfig+0x4cc>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7fd fc68 	bl	80009d8 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310c:	f7fd fc64 	bl	80009d8 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e026      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311e:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x498>
 800312a:	e01e      	b.n	800316a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d107      	bne.n	8003144 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e019      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>
 8003138:	40021000 	.word	0x40021000
 800313c:	40007000 	.word	0x40007000
 8003140:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003144:	4b0b      	ldr	r3, [pc, #44]	@ (8003174 <HAL_RCC_OscConfig+0x500>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	429a      	cmp	r2, r3
 8003156:	d106      	bne.n	8003166 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000

08003178 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0d0      	b.n	800332e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800318c:	4b6a      	ldr	r3, [pc, #424]	@ (8003338 <HAL_RCC_ClockConfig+0x1c0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d910      	bls.n	80031bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b67      	ldr	r3, [pc, #412]	@ (8003338 <HAL_RCC_ClockConfig+0x1c0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 0207 	bic.w	r2, r3, #7
 80031a2:	4965      	ldr	r1, [pc, #404]	@ (8003338 <HAL_RCC_ClockConfig+0x1c0>)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b63      	ldr	r3, [pc, #396]	@ (8003338 <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0b8      	b.n	800332e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d020      	beq.n	800320a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d4:	4b59      	ldr	r3, [pc, #356]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4a58      	ldr	r2, [pc, #352]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031ec:	4b53      	ldr	r3, [pc, #332]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4a52      	ldr	r2, [pc, #328]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 80031f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80031f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f8:	4b50      	ldr	r3, [pc, #320]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	494d      	ldr	r1, [pc, #308]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d040      	beq.n	8003298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d107      	bne.n	800322e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321e:	4b47      	ldr	r3, [pc, #284]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d115      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e07f      	b.n	800332e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003236:	4b41      	ldr	r3, [pc, #260]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e073      	b.n	800332e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003246:	4b3d      	ldr	r3, [pc, #244]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e06b      	b.n	800332e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003256:	4b39      	ldr	r3, [pc, #228]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f023 0203 	bic.w	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4936      	ldr	r1, [pc, #216]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	4313      	orrs	r3, r2
 8003266:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003268:	f7fd fbb6 	bl	80009d8 <HAL_GetTick>
 800326c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	e00a      	b.n	8003286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003270:	f7fd fbb2 	bl	80009d8 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e053      	b.n	800332e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	4b2d      	ldr	r3, [pc, #180]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 020c 	and.w	r2, r3, #12
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	429a      	cmp	r2, r3
 8003296:	d1eb      	bne.n	8003270 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003298:	4b27      	ldr	r3, [pc, #156]	@ (8003338 <HAL_RCC_ClockConfig+0x1c0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d210      	bcs.n	80032c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b24      	ldr	r3, [pc, #144]	@ (8003338 <HAL_RCC_ClockConfig+0x1c0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 0207 	bic.w	r2, r3, #7
 80032ae:	4922      	ldr	r1, [pc, #136]	@ (8003338 <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b20      	ldr	r3, [pc, #128]	@ (8003338 <HAL_RCC_ClockConfig+0x1c0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e032      	b.n	800332e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d4:	4b19      	ldr	r3, [pc, #100]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4916      	ldr	r1, [pc, #88]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032f2:	4b12      	ldr	r3, [pc, #72]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	490e      	ldr	r1, [pc, #56]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 8003302:	4313      	orrs	r3, r2
 8003304:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003306:	f000 f821 	bl	800334c <HAL_RCC_GetSysClockFreq>
 800330a:	4602      	mov	r2, r0
 800330c:	4b0b      	ldr	r3, [pc, #44]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	490a      	ldr	r1, [pc, #40]	@ (8003340 <HAL_RCC_ClockConfig+0x1c8>)
 8003318:	5ccb      	ldrb	r3, [r1, r3]
 800331a:	fa22 f303 	lsr.w	r3, r2, r3
 800331e:	4a09      	ldr	r2, [pc, #36]	@ (8003344 <HAL_RCC_ClockConfig+0x1cc>)
 8003320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003322:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <HAL_RCC_ClockConfig+0x1d0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd fa10 	bl	800074c <HAL_InitTick>

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40022000 	.word	0x40022000
 800333c:	40021000 	.word	0x40021000
 8003340:	08009550 	.word	0x08009550
 8003344:	20000000 	.word	0x20000000
 8003348:	20000004 	.word	0x20000004

0800334c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003366:	4b1e      	ldr	r3, [pc, #120]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b04      	cmp	r3, #4
 8003374:	d002      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x30>
 8003376:	2b08      	cmp	r3, #8
 8003378:	d003      	beq.n	8003382 <HAL_RCC_GetSysClockFreq+0x36>
 800337a:	e027      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800337c:	4b19      	ldr	r3, [pc, #100]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800337e:	613b      	str	r3, [r7, #16]
      break;
 8003380:	e027      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	0c9b      	lsrs	r3, r3, #18
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	4a17      	ldr	r2, [pc, #92]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800338c:	5cd3      	ldrb	r3, [r2, r3]
 800338e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d010      	beq.n	80033bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800339a:	4b11      	ldr	r3, [pc, #68]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	0c5b      	lsrs	r3, r3, #17
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	4a11      	ldr	r2, [pc, #68]	@ (80033ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80033a6:	5cd3      	ldrb	r3, [r2, r3]
 80033a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a0d      	ldr	r2, [pc, #52]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ae:	fb03 f202 	mul.w	r2, r3, r2
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e004      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a0c      	ldr	r2, [pc, #48]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033c0:	fb02 f303 	mul.w	r3, r2, r3
 80033c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	613b      	str	r3, [r7, #16]
      break;
 80033ca:	e002      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033cc:	4b05      	ldr	r3, [pc, #20]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ce:	613b      	str	r3, [r7, #16]
      break;
 80033d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d2:	693b      	ldr	r3, [r7, #16]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	371c      	adds	r7, #28
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000
 80033e4:	007a1200 	.word	0x007a1200
 80033e8:	08009568 	.word	0x08009568
 80033ec:	08009578 	.word	0x08009578
 80033f0:	003d0900 	.word	0x003d0900

080033f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f8:	4b02      	ldr	r3, [pc, #8]	@ (8003404 <HAL_RCC_GetHCLKFreq+0x10>)
 80033fa:	681b      	ldr	r3, [r3, #0]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	20000000 	.word	0x20000000

08003408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800340c:	f7ff fff2 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b05      	ldr	r3, [pc, #20]	@ (8003428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	0a1b      	lsrs	r3, r3, #8
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	4903      	ldr	r1, [pc, #12]	@ (800342c <HAL_RCC_GetPCLK1Freq+0x24>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40021000 	.word	0x40021000
 800342c:	08009560 	.word	0x08009560

08003430 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	220f      	movs	r2, #15
 800343e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003440:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <HAL_RCC_GetClockConfig+0x58>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0203 	and.w	r2, r3, #3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800344c:	4b0e      	ldr	r3, [pc, #56]	@ (8003488 <HAL_RCC_GetClockConfig+0x58>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003458:	4b0b      	ldr	r3, [pc, #44]	@ (8003488 <HAL_RCC_GetClockConfig+0x58>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003464:	4b08      	ldr	r3, [pc, #32]	@ (8003488 <HAL_RCC_GetClockConfig+0x58>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	08db      	lsrs	r3, r3, #3
 800346a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003472:	4b06      	ldr	r3, [pc, #24]	@ (800348c <HAL_RCC_GetClockConfig+0x5c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0207 	and.w	r2, r3, #7
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	40021000 	.word	0x40021000
 800348c:	40022000 	.word	0x40022000

08003490 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003498:	4b0a      	ldr	r3, [pc, #40]	@ (80034c4 <RCC_Delay+0x34>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a0a      	ldr	r2, [pc, #40]	@ (80034c8 <RCC_Delay+0x38>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	0a5b      	lsrs	r3, r3, #9
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	fb02 f303 	mul.w	r3, r2, r3
 80034aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034ac:	bf00      	nop
  }
  while (Delay --);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1e5a      	subs	r2, r3, #1
 80034b2:	60fa      	str	r2, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f9      	bne.n	80034ac <RCC_Delay+0x1c>
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	20000000 	.word	0x20000000
 80034c8:	10624dd3 	.word	0x10624dd3

080034cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d07d      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034e8:	2300      	movs	r3, #0
 80034ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ec:	4b4f      	ldr	r3, [pc, #316]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10d      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f8:	4b4c      	ldr	r3, [pc, #304]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	4a4b      	ldr	r2, [pc, #300]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003502:	61d3      	str	r3, [r2, #28]
 8003504:	4b49      	ldr	r3, [pc, #292]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003510:	2301      	movs	r3, #1
 8003512:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	4b46      	ldr	r3, [pc, #280]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d118      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003520:	4b43      	ldr	r3, [pc, #268]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a42      	ldr	r2, [pc, #264]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800352a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800352c:	f7fd fa54 	bl	80009d8 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	e008      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003534:	f7fd fa50 	bl	80009d8 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	@ 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e06d      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003546:	4b3a      	ldr	r3, [pc, #232]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003552:	4b36      	ldr	r3, [pc, #216]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800355a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d02e      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	429a      	cmp	r2, r3
 800356e:	d027      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003570:	4b2e      	ldr	r3, [pc, #184]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003578:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800357a:	4b2e      	ldr	r3, [pc, #184]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003580:	4b2c      	ldr	r3, [pc, #176]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003586:	4a29      	ldr	r2, [pc, #164]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d014      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fd fa1f 	bl	80009d8 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fd fa1b 	bl	80009d8 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e036      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b4:	4b1d      	ldr	r3, [pc, #116]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ee      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035c0:	4b1a      	ldr	r3, [pc, #104]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4917      	ldr	r1, [pc, #92]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035d2:	7dfb      	ldrb	r3, [r7, #23]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d105      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d8:	4b14      	ldr	r3, [pc, #80]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	4a13      	ldr	r2, [pc, #76]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035f0:	4b0e      	ldr	r3, [pc, #56]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	490b      	ldr	r1, [pc, #44]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800360e:	4b07      	ldr	r3, [pc, #28]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	4904      	ldr	r1, [pc, #16]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	40007000 	.word	0x40007000
 8003634:	42420440 	.word	0x42420440

08003638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e041      	b.n	80036ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fd f822 	bl	80006a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	4619      	mov	r1, r3
 8003676:	4610      	mov	r0, r2
 8003678:	f000 fb76 	bl	8003d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d001      	beq.n	80036f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e03a      	b.n	8003766 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a18      	ldr	r2, [pc, #96]	@ (8003770 <HAL_TIM_Base_Start_IT+0x98>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00e      	beq.n	8003730 <HAL_TIM_Base_Start_IT+0x58>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800371a:	d009      	beq.n	8003730 <HAL_TIM_Base_Start_IT+0x58>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a14      	ldr	r2, [pc, #80]	@ (8003774 <HAL_TIM_Base_Start_IT+0x9c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_TIM_Base_Start_IT+0x58>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a13      	ldr	r2, [pc, #76]	@ (8003778 <HAL_TIM_Base_Start_IT+0xa0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d111      	bne.n	8003754 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b06      	cmp	r3, #6
 8003740:	d010      	beq.n	8003764 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003752:	e007      	b.n	8003764 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800

0800377c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e041      	b.n	8003812 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f839 	bl	800381a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f000 fad4 	bl	8003d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d020      	beq.n	8003890 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01b      	beq.n	8003890 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0202 	mvn.w	r2, #2
 8003860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fa5a 	bl	8003d30 <HAL_TIM_IC_CaptureCallback>
 800387c:	e005      	b.n	800388a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fa4d 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fa5c 	bl	8003d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d020      	beq.n	80038dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01b      	beq.n	80038dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0204 	mvn.w	r2, #4
 80038ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2202      	movs	r2, #2
 80038b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fa34 	bl	8003d30 <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa27 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fa36 	bl	8003d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d020      	beq.n	8003928 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01b      	beq.n	8003928 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0208 	mvn.w	r2, #8
 80038f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2204      	movs	r2, #4
 80038fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fa0e 	bl	8003d30 <HAL_TIM_IC_CaptureCallback>
 8003914:	e005      	b.n	8003922 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fa01 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fa10 	bl	8003d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	d020      	beq.n	8003974 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01b      	beq.n	8003974 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0210 	mvn.w	r2, #16
 8003944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2208      	movs	r2, #8
 800394a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f9e8 	bl	8003d30 <HAL_TIM_IC_CaptureCallback>
 8003960:	e005      	b.n	800396e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f9db 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f9ea 	bl	8003d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00c      	beq.n	8003998 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0201 	mvn.w	r2, #1
 8003990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fc fdd4 	bl	8000540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00c      	beq.n	80039bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fd1a 	bl	80043f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00c      	beq.n	80039e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f9ba 	bl	8003d54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00c      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0220 	mvn.w	r2, #32
 80039fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fced 	bl	80043de <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a04:	bf00      	nop
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e0ae      	b.n	8003b88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b0c      	cmp	r3, #12
 8003a36:	f200 809f 	bhi.w	8003b78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a75 	.word	0x08003a75
 8003a44:	08003b79 	.word	0x08003b79
 8003a48:	08003b79 	.word	0x08003b79
 8003a4c:	08003b79 	.word	0x08003b79
 8003a50:	08003ab5 	.word	0x08003ab5
 8003a54:	08003b79 	.word	0x08003b79
 8003a58:	08003b79 	.word	0x08003b79
 8003a5c:	08003b79 	.word	0x08003b79
 8003a60:	08003af7 	.word	0x08003af7
 8003a64:	08003b79 	.word	0x08003b79
 8003a68:	08003b79 	.word	0x08003b79
 8003a6c:	08003b79 	.word	0x08003b79
 8003a70:	08003b37 	.word	0x08003b37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f9e2 	bl	8003e44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0208 	orr.w	r2, r2, #8
 8003a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0204 	bic.w	r2, r2, #4
 8003a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6999      	ldr	r1, [r3, #24]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	619a      	str	r2, [r3, #24]
      break;
 8003ab2:	e064      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fa28 	bl	8003f10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6999      	ldr	r1, [r3, #24]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	021a      	lsls	r2, r3, #8
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	619a      	str	r2, [r3, #24]
      break;
 8003af4:	e043      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fa71 	bl	8003fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0208 	orr.w	r2, r2, #8
 8003b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0204 	bic.w	r2, r2, #4
 8003b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69d9      	ldr	r1, [r3, #28]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	61da      	str	r2, [r3, #28]
      break;
 8003b34:	e023      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fabb 	bl	80040b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69d9      	ldr	r1, [r3, #28]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	021a      	lsls	r2, r3, #8
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	61da      	str	r2, [r3, #28]
      break;
 8003b76:	e002      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_TIM_ConfigClockSource+0x1c>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e0b4      	b.n	8003d16 <HAL_TIM_ConfigClockSource+0x186>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003be4:	d03e      	beq.n	8003c64 <HAL_TIM_ConfigClockSource+0xd4>
 8003be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bea:	f200 8087 	bhi.w	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bf2:	f000 8086 	beq.w	8003d02 <HAL_TIM_ConfigClockSource+0x172>
 8003bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bfa:	d87f      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b70      	cmp	r3, #112	@ 0x70
 8003bfe:	d01a      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0xa6>
 8003c00:	2b70      	cmp	r3, #112	@ 0x70
 8003c02:	d87b      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c04:	2b60      	cmp	r3, #96	@ 0x60
 8003c06:	d050      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x11a>
 8003c08:	2b60      	cmp	r3, #96	@ 0x60
 8003c0a:	d877      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c0c:	2b50      	cmp	r3, #80	@ 0x50
 8003c0e:	d03c      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0xfa>
 8003c10:	2b50      	cmp	r3, #80	@ 0x50
 8003c12:	d873      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c14:	2b40      	cmp	r3, #64	@ 0x40
 8003c16:	d058      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x13a>
 8003c18:	2b40      	cmp	r3, #64	@ 0x40
 8003c1a:	d86f      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c1c:	2b30      	cmp	r3, #48	@ 0x30
 8003c1e:	d064      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x15a>
 8003c20:	2b30      	cmp	r3, #48	@ 0x30
 8003c22:	d86b      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d060      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x15a>
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d867      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d05c      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x15a>
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d05a      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x15a>
 8003c34:	e062      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c46:	f000 fafc 	bl	8004242 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	609a      	str	r2, [r3, #8]
      break;
 8003c62:	e04f      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c74:	f000 fae5 	bl	8004242 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c86:	609a      	str	r2, [r3, #8]
      break;
 8003c88:	e03c      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c96:	461a      	mov	r2, r3
 8003c98:	f000 fa5c 	bl	8004154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2150      	movs	r1, #80	@ 0x50
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fab3 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003ca8:	e02c      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f000 fa7a 	bl	80041b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2160      	movs	r1, #96	@ 0x60
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 faa3 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003cc8:	e01c      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f000 fa3c 	bl	8004154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2140      	movs	r1, #64	@ 0x40
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fa93 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003ce8:	e00c      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	f000 fa8a 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003cfa:	e003      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003d00:	e000      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr

08003d42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr
	...

08003d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a2f      	ldr	r2, [pc, #188]	@ (8003e38 <TIM_Base_SetConfig+0xd0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00b      	beq.n	8003d98 <TIM_Base_SetConfig+0x30>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d86:	d007      	beq.n	8003d98 <TIM_Base_SetConfig+0x30>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a2c      	ldr	r2, [pc, #176]	@ (8003e3c <TIM_Base_SetConfig+0xd4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d003      	beq.n	8003d98 <TIM_Base_SetConfig+0x30>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a2b      	ldr	r2, [pc, #172]	@ (8003e40 <TIM_Base_SetConfig+0xd8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d108      	bne.n	8003daa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a22      	ldr	r2, [pc, #136]	@ (8003e38 <TIM_Base_SetConfig+0xd0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00b      	beq.n	8003dca <TIM_Base_SetConfig+0x62>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db8:	d007      	beq.n	8003dca <TIM_Base_SetConfig+0x62>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e3c <TIM_Base_SetConfig+0xd4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d003      	beq.n	8003dca <TIM_Base_SetConfig+0x62>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e40 <TIM_Base_SetConfig+0xd8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d108      	bne.n	8003ddc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a0d      	ldr	r2, [pc, #52]	@ (8003e38 <TIM_Base_SetConfig+0xd0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d103      	bne.n	8003e10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f023 0201 	bic.w	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	611a      	str	r2, [r3, #16]
  }
}
 8003e2e:	bf00      	nop
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr
 8003e38:	40012c00 	.word	0x40012c00
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40000800 	.word	0x40000800

08003e44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f023 0201 	bic.w	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0303 	bic.w	r3, r3, #3
 8003e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f023 0302 	bic.w	r3, r3, #2
 8003e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f0c <TIM_OC1_SetConfig+0xc8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d10c      	bne.n	8003eba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0308 	bic.w	r3, r3, #8
 8003ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f023 0304 	bic.w	r3, r3, #4
 8003eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a13      	ldr	r2, [pc, #76]	@ (8003f0c <TIM_OC1_SetConfig+0xc8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d111      	bne.n	8003ee6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	621a      	str	r2, [r3, #32]
}
 8003f00:	bf00      	nop
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40012c00 	.word	0x40012c00

08003f10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f023 0210 	bic.w	r2, r3, #16
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f023 0320 	bic.w	r3, r3, #32
 8003f5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe0 <TIM_OC2_SetConfig+0xd0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d10d      	bne.n	8003f8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a14      	ldr	r2, [pc, #80]	@ (8003fe0 <TIM_OC2_SetConfig+0xd0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d113      	bne.n	8003fbc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	621a      	str	r2, [r3, #32]
}
 8003fd6:	bf00      	nop
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr
 8003fe0:	40012c00 	.word	0x40012c00

08003fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0303 	bic.w	r3, r3, #3
 800401a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800402c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a1d      	ldr	r2, [pc, #116]	@ (80040b4 <TIM_OC3_SetConfig+0xd0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d10d      	bne.n	800405e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800405c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a14      	ldr	r2, [pc, #80]	@ (80040b4 <TIM_OC3_SetConfig+0xd0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d113      	bne.n	800408e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800406c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	621a      	str	r2, [r3, #32]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40012c00 	.word	0x40012c00

080040b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	031b      	lsls	r3, r3, #12
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a0f      	ldr	r2, [pc, #60]	@ (8004150 <TIM_OC4_SetConfig+0x98>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d109      	bne.n	800412c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800411e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	019b      	lsls	r3, r3, #6
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	621a      	str	r2, [r3, #32]
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr
 8004150:	40012c00 	.word	0x40012c00

08004154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	f023 0201 	bic.w	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800417e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f023 030a 	bic.w	r3, r3, #10
 8004190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f023 0210 	bic.w	r2, r3, #16
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	031b      	lsls	r3, r3, #12
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	621a      	str	r2, [r3, #32]
}
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr

0800420e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	f043 0307 	orr.w	r3, r3, #7
 8004230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004242:	b480      	push	{r7}
 8004244:	b087      	sub	sp, #28
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
 800424e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800425c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	021a      	lsls	r2, r3, #8
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	431a      	orrs	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4313      	orrs	r3, r2
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	609a      	str	r2, [r3, #8]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004294:	2302      	movs	r3, #2
 8004296:	e046      	b.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a16      	ldr	r2, [pc, #88]	@ (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00e      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042e4:	d009      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a12      	ldr	r2, [pc, #72]	@ (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d004      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a10      	ldr	r2, [pc, #64]	@ (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d10c      	bne.n	8004314 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	4313      	orrs	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800

0800433c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004354:	2302      	movs	r3, #2
 8004356:	e03d      	b.n	80043d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4313      	orrs	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr

080043de <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr

08004402 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	4638      	mov	r0, r7
 800440c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800442c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004430:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	b29a      	uxth	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004450:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004454:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	b29b      	uxth	r3, r3
 8004462:	43db      	mvns	r3, r3
 8004464:	b29b      	uxth	r3, r3
 8004466:	4013      	ands	r3, r2
 8004468:	b29a      	uxth	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	4638      	mov	r0, r7
 800449e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr
	...

080044d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b09d      	sub	sp, #116	@ 0x74
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80044f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	78db      	ldrb	r3, [r3, #3]
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d81f      	bhi.n	8004542 <USB_ActivateEndpoint+0x72>
 8004502:	a201      	add	r2, pc, #4	@ (adr r2, 8004508 <USB_ActivateEndpoint+0x38>)
 8004504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004508:	08004519 	.word	0x08004519
 800450c:	08004535 	.word	0x08004535
 8004510:	0800454b 	.word	0x0800454b
 8004514:	08004527 	.word	0x08004527
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004518:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800451c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004520:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004524:	e012      	b.n	800454c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004526:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800452a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800452e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004532:	e00b      	b.n	800454c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004534:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004538:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800453c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004540:	e004      	b.n	800454c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004548:	e000      	b.n	800454c <USB_ActivateEndpoint+0x7c>
      break;
 800454a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	441a      	add	r2, r3
 8004556:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800455a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800455e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800456a:	b29b      	uxth	r3, r3
 800456c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004584:	b29b      	uxth	r3, r3
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	7812      	ldrb	r2, [r2, #0]
 800458a:	4313      	orrs	r3, r2
 800458c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	441a      	add	r2, r3
 800459a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800459e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	7b1b      	ldrb	r3, [r3, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f040 8178 	bne.w	80048ac <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	785b      	ldrb	r3, [r3, #1]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 8084 	beq.w	80046ce <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	4413      	add	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	011a      	lsls	r2, r3, #4
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	88db      	ldrh	r3, [r3, #6]
 80045ee:	085b      	lsrs	r3, r3, #1
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	827b      	strh	r3, [r7, #18]
 8004608:	8a7b      	ldrh	r3, [r7, #18]
 800460a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d01b      	beq.n	800464a <USB_ActivateEndpoint+0x17a>
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004628:	823b      	strh	r3, [r7, #16]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	441a      	add	r2, r3
 8004634:	8a3b      	ldrh	r3, [r7, #16]
 8004636:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800463a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800463e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004642:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004646:	b29b      	uxth	r3, r3
 8004648:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	78db      	ldrb	r3, [r3, #3]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d020      	beq.n	8004694 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b29b      	uxth	r3, r3
 8004660:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004668:	81bb      	strh	r3, [r7, #12]
 800466a:	89bb      	ldrh	r3, [r7, #12]
 800466c:	f083 0320 	eor.w	r3, r3, #32
 8004670:	81bb      	strh	r3, [r7, #12]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	441a      	add	r2, r3
 800467c:	89bb      	ldrh	r3, [r7, #12]
 800467e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800468a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800468e:	b29b      	uxth	r3, r3
 8004690:	8013      	strh	r3, [r2, #0]
 8004692:	e2d5      	b.n	8004c40 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046aa:	81fb      	strh	r3, [r7, #14]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	441a      	add	r2, r3
 80046b6:	89fb      	ldrh	r3, [r7, #14]
 80046b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	8013      	strh	r3, [r2, #0]
 80046cc:	e2b8      	b.n	8004c40 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046d8:	b29b      	uxth	r3, r3
 80046da:	461a      	mov	r2, r3
 80046dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046de:	4413      	add	r3, r2
 80046e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	011a      	lsls	r2, r3, #4
 80046e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80046f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	88db      	ldrh	r3, [r3, #6]
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004700:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800470c:	b29b      	uxth	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004712:	4413      	add	r3, r2
 8004714:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	011a      	lsls	r2, r3, #4
 800471c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471e:	4413      	add	r3, r2
 8004720:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004724:	627b      	str	r3, [r7, #36]	@ 0x24
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004730:	b29a      	uxth	r2, r3
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	801a      	strh	r2, [r3, #0]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b3e      	cmp	r3, #62	@ 0x3e
 800473c:	d91d      	bls.n	800477a <USB_ActivateEndpoint+0x2aa>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 031f 	and.w	r3, r3, #31
 800474e:	2b00      	cmp	r3, #0
 8004750:	d102      	bne.n	8004758 <USB_ActivateEndpoint+0x288>
 8004752:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004754:	3b01      	subs	r3, #1
 8004756:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29a      	uxth	r2, r3
 800475e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004760:	b29b      	uxth	r3, r3
 8004762:	029b      	lsls	r3, r3, #10
 8004764:	b29b      	uxth	r3, r3
 8004766:	4313      	orrs	r3, r2
 8004768:	b29b      	uxth	r3, r3
 800476a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800476e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004772:	b29a      	uxth	r2, r3
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	801a      	strh	r2, [r3, #0]
 8004778:	e026      	b.n	80047c8 <USB_ActivateEndpoint+0x2f8>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10a      	bne.n	8004798 <USB_ActivateEndpoint+0x2c8>
 8004782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	b29b      	uxth	r3, r3
 8004788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800478c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004790:	b29a      	uxth	r2, r3
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	801a      	strh	r2, [r3, #0]
 8004796:	e017      	b.n	80047c8 <USB_ActivateEndpoint+0x2f8>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <USB_ActivateEndpoint+0x2e2>
 80047ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047ae:	3301      	adds	r3, #1
 80047b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	029b      	lsls	r3, r3, #10
 80047be:	b29b      	uxth	r3, r3
 80047c0:	4313      	orrs	r3, r2
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80047d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80047d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01b      	beq.n	8004818 <USB_ActivateEndpoint+0x348>
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047f6:	843b      	strh	r3, [r7, #32]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	441a      	add	r2, r3
 8004802:	8c3b      	ldrh	r3, [r7, #32]
 8004804:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004808:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800480c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004814:	b29b      	uxth	r3, r3
 8004816:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d124      	bne.n	800486a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004836:	83bb      	strh	r3, [r7, #28]
 8004838:	8bbb      	ldrh	r3, [r7, #28]
 800483a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800483e:	83bb      	strh	r3, [r7, #28]
 8004840:	8bbb      	ldrh	r3, [r7, #28]
 8004842:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004846:	83bb      	strh	r3, [r7, #28]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	441a      	add	r2, r3
 8004852:	8bbb      	ldrh	r3, [r7, #28]
 8004854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800485c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004864:	b29b      	uxth	r3, r3
 8004866:	8013      	strh	r3, [r2, #0]
 8004868:	e1ea      	b.n	8004c40 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800487c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004880:	83fb      	strh	r3, [r7, #30]
 8004882:	8bfb      	ldrh	r3, [r7, #30]
 8004884:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004888:	83fb      	strh	r3, [r7, #30]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	441a      	add	r2, r3
 8004894:	8bfb      	ldrh	r3, [r7, #30]
 8004896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800489a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800489e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	8013      	strh	r3, [r2, #0]
 80048aa:	e1c9      	b.n	8004c40 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	78db      	ldrb	r3, [r3, #3]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d11e      	bne.n	80048f2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ca:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	441a      	add	r2, r3
 80048d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80048dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048e4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80048e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	8013      	strh	r3, [r2, #0]
 80048f0:	e01d      	b.n	800492e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004908:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	441a      	add	r2, r3
 8004916:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800491a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800491e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004922:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800492a:	b29b      	uxth	r3, r3
 800492c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004938:	b29b      	uxth	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800493e:	4413      	add	r3, r2
 8004940:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	011a      	lsls	r2, r3, #4
 8004948:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800494a:	4413      	add	r3, r2
 800494c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004950:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	891b      	ldrh	r3, [r3, #8]
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	b29b      	uxth	r3, r3
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004960:	801a      	strh	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	657b      	str	r3, [r7, #84]	@ 0x54
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800496c:	b29b      	uxth	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004972:	4413      	add	r3, r2
 8004974:	657b      	str	r3, [r7, #84]	@ 0x54
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	011a      	lsls	r2, r3, #4
 800497c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800497e:	4413      	add	r3, r2
 8004980:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004984:	653b      	str	r3, [r7, #80]	@ 0x50
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	895b      	ldrh	r3, [r3, #10]
 800498a:	085b      	lsrs	r3, r3, #1
 800498c:	b29b      	uxth	r3, r3
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004994:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	785b      	ldrb	r3, [r3, #1]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f040 8093 	bne.w	8004ac6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80049b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80049b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01b      	beq.n	80049f4 <USB_ActivateEndpoint+0x524>
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	441a      	add	r2, r3
 80049de:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80049e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004a02:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01b      	beq.n	8004a44 <USB_ActivateEndpoint+0x574>
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a22:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	441a      	add	r2, r3
 8004a2e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004a30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a5a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004a5c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004a5e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004a62:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004a64:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004a66:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a6a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	441a      	add	r2, r3
 8004a76:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004a78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aa2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	441a      	add	r2, r3
 8004aae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ab0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ab4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ab8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	8013      	strh	r3, [r2, #0]
 8004ac4:	e0bc      	b.n	8004c40 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004ad6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01d      	beq.n	8004b1e <USB_ActivateEndpoint+0x64e>
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004af4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004af8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	441a      	add	r2, r3
 8004b06:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004b0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004b2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d01d      	beq.n	8004b76 <USB_ActivateEndpoint+0x6a6>
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b50:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	441a      	add	r2, r3
 8004b5e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004b62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	78db      	ldrb	r3, [r3, #3]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d024      	beq.n	8004bc8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b94:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004b98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004b9c:	f083 0320 	eor.w	r3, r3, #32
 8004ba0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	441a      	add	r2, r3
 8004bae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004bb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	8013      	strh	r3, [r2, #0]
 8004bc6:	e01d      	b.n	8004c04 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bde:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	441a      	add	r2, r3
 8004bec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004bf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c1a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	441a      	add	r2, r3
 8004c28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004c2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004c40:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3774      	adds	r7, #116	@ 0x74
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop

08004c50 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b08d      	sub	sp, #52	@ 0x34
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	7b1b      	ldrb	r3, [r3, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f040 808e 	bne.w	8004d80 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	785b      	ldrb	r3, [r3, #1]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d044      	beq.n	8004cf6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	81bb      	strh	r3, [r7, #12]
 8004c7a:	89bb      	ldrh	r3, [r7, #12]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01b      	beq.n	8004cbc <USB_DeactivateEndpoint+0x6c>
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c9a:	817b      	strh	r3, [r7, #10]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	441a      	add	r2, r3
 8004ca6:	897b      	ldrh	r3, [r7, #10]
 8004ca8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cb4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cd2:	813b      	strh	r3, [r7, #8]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	441a      	add	r2, r3
 8004cde:	893b      	ldrh	r3, [r7, #8]
 8004ce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	8013      	strh	r3, [r2, #0]
 8004cf4:	e192      	b.n	800501c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	827b      	strh	r3, [r7, #18]
 8004d04:	8a7b      	ldrh	r3, [r7, #18]
 8004d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d01b      	beq.n	8004d46 <USB_DeactivateEndpoint+0xf6>
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d24:	823b      	strh	r3, [r7, #16]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	441a      	add	r2, r3
 8004d30:	8a3b      	ldrh	r3, [r7, #16]
 8004d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d5c:	81fb      	strh	r3, [r7, #14]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	441a      	add	r2, r3
 8004d68:	89fb      	ldrh	r3, [r7, #14]
 8004d6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	8013      	strh	r3, [r2, #0]
 8004d7e:	e14d      	b.n	800501c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f040 80a5 	bne.w	8004ed4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	843b      	strh	r3, [r7, #32]
 8004d98:	8c3b      	ldrh	r3, [r7, #32]
 8004d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d01b      	beq.n	8004dda <USB_DeactivateEndpoint+0x18a>
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004db4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db8:	83fb      	strh	r3, [r7, #30]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	441a      	add	r2, r3
 8004dc4:	8bfb      	ldrh	r3, [r7, #30]
 8004dc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	83bb      	strh	r3, [r7, #28]
 8004de8:	8bbb      	ldrh	r3, [r7, #28]
 8004dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d01b      	beq.n	8004e2a <USB_DeactivateEndpoint+0x1da>
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e08:	837b      	strh	r3, [r7, #26]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	441a      	add	r2, r3
 8004e14:	8b7b      	ldrh	r3, [r7, #26]
 8004e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e40:	833b      	strh	r3, [r7, #24]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	441a      	add	r2, r3
 8004e4c:	8b3b      	ldrh	r3, [r7, #24]
 8004e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e78:	82fb      	strh	r3, [r7, #22]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	441a      	add	r2, r3
 8004e84:	8afb      	ldrh	r3, [r7, #22]
 8004e86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eb0:	82bb      	strh	r3, [r7, #20]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	441a      	add	r2, r3
 8004ebc:	8abb      	ldrh	r3, [r7, #20]
 8004ebe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ec2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	8013      	strh	r3, [r2, #0]
 8004ed2:	e0a3      	b.n	800501c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004ee2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004ee4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01b      	beq.n	8004f24 <USB_DeactivateEndpoint+0x2d4>
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f02:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	441a      	add	r2, r3
 8004f0e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004f10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004f32:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01b      	beq.n	8004f74 <USB_DeactivateEndpoint+0x324>
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f52:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	441a      	add	r2, r3
 8004f5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004f60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	441a      	add	r2, r3
 8004f96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004f98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fa0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	441a      	add	r2, r3
 8004fce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ffa:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	441a      	add	r2, r3
 8005006:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005008:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800500c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005018:	b29b      	uxth	r3, r3
 800501a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3734      	adds	r7, #52	@ 0x34
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr

08005028 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b0c2      	sub	sp, #264	@ 0x108
 800502c:	af00      	add	r7, sp, #0
 800502e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005036:	6018      	str	r0, [r3, #0]
 8005038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800503c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005040:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	785b      	ldrb	r3, [r3, #1]
 800504e:	2b01      	cmp	r3, #1
 8005050:	f040 86b7 	bne.w	8005dc2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699a      	ldr	r2, [r3, #24]
 8005060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	429a      	cmp	r2, r3
 800506e:	d908      	bls.n	8005082 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005080:	e007      	b.n	8005092 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	7b1b      	ldrb	r3, [r3, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d13a      	bne.n	8005118 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80050a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6959      	ldr	r1, [r3, #20]
 80050ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	88da      	ldrh	r2, [r3, #6]
 80050ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80050c4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80050c8:	6800      	ldr	r0, [r0, #0]
 80050ca:	f001 fc9c 	bl	8006a06 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	461a      	mov	r2, r3
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4413      	add	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
 80050f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	011a      	lsls	r2, r3, #4
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4413      	add	r3, r2
 8005104:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	801a      	strh	r2, [r3, #0]
 8005114:	f000 be1f 	b.w	8005d56 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800511c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	78db      	ldrb	r3, [r3, #3]
 8005124:	2b02      	cmp	r3, #2
 8005126:	f040 8462 	bne.w	80059ee <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800512a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800512e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6a1a      	ldr	r2, [r3, #32]
 8005136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800513a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	429a      	cmp	r2, r3
 8005144:	f240 83df 	bls.w	8005906 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800514c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800516a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800516e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	441a      	add	r2, r3
 800518c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005190:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005194:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005198:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800519c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80051a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6a1a      	ldr	r2, [r3, #32]
 80051b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b4:	1ad2      	subs	r2, r2, r3
 80051b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 81c7 	beq.w	8005578 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80051f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	785b      	ldrb	r3, [r3, #1]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d177      	bne.n	80052f6 <USB_EPStartXfer+0x2ce>
 8005206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800520a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005216:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005220:	b29b      	uxth	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005226:	4413      	add	r3, r2
 8005228:	62bb      	str	r3, [r7, #40]	@ 0x28
 800522a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800522e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	011a      	lsls	r2, r3, #4
 8005238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523a:	4413      	add	r3, r2
 800523c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	b29b      	uxth	r3, r3
 8005248:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800524c:	b29a      	uxth	r2, r3
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	801a      	strh	r2, [r3, #0]
 8005252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005256:	2b3e      	cmp	r3, #62	@ 0x3e
 8005258:	d921      	bls.n	800529e <USB_EPStartXfer+0x276>
 800525a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005268:	f003 031f 	and.w	r3, r3, #31
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <USB_EPStartXfer+0x252>
 8005270:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005274:	3b01      	subs	r3, #1
 8005276:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	b29a      	uxth	r2, r3
 8005280:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005284:	b29b      	uxth	r3, r3
 8005286:	029b      	lsls	r3, r3, #10
 8005288:	b29b      	uxth	r3, r3
 800528a:	4313      	orrs	r3, r2
 800528c:	b29b      	uxth	r3, r3
 800528e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005296:	b29a      	uxth	r2, r3
 8005298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	e050      	b.n	8005340 <USB_EPStartXfer+0x318>
 800529e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10a      	bne.n	80052bc <USB_EPStartXfer+0x294>
 80052a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	801a      	strh	r2, [r3, #0]
 80052ba:	e041      	b.n	8005340 <USB_EPStartXfer+0x318>
 80052bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c0:	085b      	lsrs	r3, r3, #1
 80052c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d004      	beq.n	80052dc <USB_EPStartXfer+0x2b4>
 80052d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80052d6:	3301      	adds	r3, #1
 80052d8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	029b      	lsls	r3, r3, #10
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	4313      	orrs	r3, r2
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f2:	801a      	strh	r2, [r3, #0]
 80052f4:	e024      	b.n	8005340 <USB_EPStartXfer+0x318>
 80052f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	785b      	ldrb	r3, [r3, #1]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d11c      	bne.n	8005340 <USB_EPStartXfer+0x318>
 8005306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800530a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005314:	b29b      	uxth	r3, r3
 8005316:	461a      	mov	r2, r3
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	4413      	add	r3, r2
 800531c:	633b      	str	r3, [r7, #48]	@ 0x30
 800531e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	011a      	lsls	r2, r3, #4
 800532c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532e:	4413      	add	r3, r2
 8005330:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800533a:	b29a      	uxth	r2, r3
 800533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	895b      	ldrh	r3, [r3, #10]
 800534c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6959      	ldr	r1, [r3, #20]
 800535c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005360:	b29b      	uxth	r3, r3
 8005362:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005366:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800536a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800536e:	6800      	ldr	r0, [r0, #0]
 8005370:	f001 fb49 	bl	8006a06 <USB_WritePMA>
            ep->xfer_buff += len;
 8005374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695a      	ldr	r2, [r3, #20]
 8005380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005384:	441a      	add	r2, r3
 8005386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6a1a      	ldr	r2, [r3, #32]
 800539e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d90f      	bls.n	80053ce <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80053ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6a1a      	ldr	r2, [r3, #32]
 80053ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053be:	1ad2      	subs	r2, r2, r3
 80053c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	621a      	str	r2, [r3, #32]
 80053cc:	e00e      	b.n	80053ec <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80053ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80053de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2200      	movs	r2, #0
 80053ea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	785b      	ldrb	r3, [r3, #1]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d177      	bne.n	80054ec <USB_EPStartXfer+0x4c4>
 80053fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005400:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005416:	b29b      	uxth	r3, r3
 8005418:	461a      	mov	r2, r3
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	4413      	add	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	011a      	lsls	r2, r3, #4
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	4413      	add	r3, r2
 8005432:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005442:	b29a      	uxth	r2, r3
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	801a      	strh	r2, [r3, #0]
 8005448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800544c:	2b3e      	cmp	r3, #62	@ 0x3e
 800544e:	d921      	bls.n	8005494 <USB_EPStartXfer+0x46c>
 8005450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005454:	095b      	lsrs	r3, r3, #5
 8005456:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800545a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800545e:	f003 031f 	and.w	r3, r3, #31
 8005462:	2b00      	cmp	r3, #0
 8005464:	d104      	bne.n	8005470 <USB_EPStartXfer+0x448>
 8005466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800546a:	3b01      	subs	r3, #1
 800546c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29a      	uxth	r2, r3
 8005476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800547a:	b29b      	uxth	r3, r3
 800547c:	029b      	lsls	r3, r3, #10
 800547e:	b29b      	uxth	r3, r3
 8005480:	4313      	orrs	r3, r2
 8005482:	b29b      	uxth	r3, r3
 8005484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800548c:	b29a      	uxth	r2, r3
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	801a      	strh	r2, [r3, #0]
 8005492:	e056      	b.n	8005542 <USB_EPStartXfer+0x51a>
 8005494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10a      	bne.n	80054b2 <USB_EPStartXfer+0x48a>
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	801a      	strh	r2, [r3, #0]
 80054b0:	e047      	b.n	8005542 <USB_EPStartXfer+0x51a>
 80054b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b6:	085b      	lsrs	r3, r3, #1
 80054b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80054bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d004      	beq.n	80054d2 <USB_EPStartXfer+0x4aa>
 80054c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054cc:	3301      	adds	r3, #1
 80054ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054dc:	b29b      	uxth	r3, r3
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	4313      	orrs	r3, r2
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	801a      	strh	r2, [r3, #0]
 80054ea:	e02a      	b.n	8005542 <USB_EPStartXfer+0x51a>
 80054ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d122      	bne.n	8005542 <USB_EPStartXfer+0x51a>
 80054fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005500:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	623b      	str	r3, [r7, #32]
 8005508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800550c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005516:	b29b      	uxth	r3, r3
 8005518:	461a      	mov	r2, r3
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	4413      	add	r3, r2
 800551e:	623b      	str	r3, [r7, #32]
 8005520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	011a      	lsls	r2, r3, #4
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	4413      	add	r3, r2
 8005532:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800553c:	b29a      	uxth	r2, r3
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	891b      	ldrh	r3, [r3, #8]
 800554e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6959      	ldr	r1, [r3, #20]
 800555e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005562:	b29b      	uxth	r3, r3
 8005564:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005568:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800556c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005570:	6800      	ldr	r0, [r0, #0]
 8005572:	f001 fa48 	bl	8006a06 <USB_WritePMA>
 8005576:	e3ee      	b.n	8005d56 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d177      	bne.n	8005678 <USB_EPStartXfer+0x650>
 8005588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005598:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055a8:	4413      	add	r3, r2
 80055aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	011a      	lsls	r2, r3, #4
 80055ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055bc:	4413      	add	r3, r2
 80055be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80055c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80055c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055d2:	801a      	strh	r2, [r3, #0]
 80055d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80055da:	d921      	bls.n	8005620 <USB_EPStartXfer+0x5f8>
 80055dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80055e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d104      	bne.n	80055fc <USB_EPStartXfer+0x5d4>
 80055f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055f6:	3b01      	subs	r3, #1
 80055f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80055fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29a      	uxth	r2, r3
 8005602:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005606:	b29b      	uxth	r3, r3
 8005608:	029b      	lsls	r3, r3, #10
 800560a:	b29b      	uxth	r3, r3
 800560c:	4313      	orrs	r3, r2
 800560e:	b29b      	uxth	r3, r3
 8005610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005618:	b29a      	uxth	r2, r3
 800561a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	e056      	b.n	80056ce <USB_EPStartXfer+0x6a6>
 8005620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <USB_EPStartXfer+0x616>
 8005628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	b29b      	uxth	r3, r3
 800562e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005636:	b29a      	uxth	r2, r3
 8005638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800563a:	801a      	strh	r2, [r3, #0]
 800563c:	e047      	b.n	80056ce <USB_EPStartXfer+0x6a6>
 800563e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d004      	beq.n	800565e <USB_EPStartXfer+0x636>
 8005654:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005658:	3301      	adds	r3, #1
 800565a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800565e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b29a      	uxth	r2, r3
 8005664:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005668:	b29b      	uxth	r3, r3
 800566a:	029b      	lsls	r3, r3, #10
 800566c:	b29b      	uxth	r3, r3
 800566e:	4313      	orrs	r3, r2
 8005670:	b29a      	uxth	r2, r3
 8005672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005674:	801a      	strh	r2, [r3, #0]
 8005676:	e02a      	b.n	80056ce <USB_EPStartXfer+0x6a6>
 8005678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800567c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d122      	bne.n	80056ce <USB_EPStartXfer+0x6a6>
 8005688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800568c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	653b      	str	r3, [r7, #80]	@ 0x50
 8005694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005698:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056a8:	4413      	add	r3, r2
 80056aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80056ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	011a      	lsls	r2, r3, #4
 80056ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056bc:	4413      	add	r3, r2
 80056be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80056c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	891b      	ldrh	r3, [r3, #8]
 80056da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6959      	ldr	r1, [r3, #20]
 80056ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80056f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80056f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80056fc:	6800      	ldr	r0, [r0, #0]
 80056fe:	f001 f982 	bl	8006a06 <USB_WritePMA>
            ep->xfer_buff += len;
 8005702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005712:	441a      	add	r2, r3
 8005714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6a1a      	ldr	r2, [r3, #32]
 800572c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	429a      	cmp	r2, r3
 800573a:	d90f      	bls.n	800575c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800573c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6a1a      	ldr	r2, [r3, #32]
 8005748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800574c:	1ad2      	subs	r2, r2, r3
 800574e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	621a      	str	r2, [r3, #32]
 800575a:	e00e      	b.n	800577a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800575c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800576c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2200      	movs	r2, #0
 8005778:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800577a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800577e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	643b      	str	r3, [r7, #64]	@ 0x40
 8005786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800578a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	785b      	ldrb	r3, [r3, #1]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d177      	bne.n	8005886 <USB_EPStartXfer+0x85e>
 8005796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	461a      	mov	r2, r3
 80057b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b6:	4413      	add	r3, r2
 80057b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	011a      	lsls	r2, r3, #4
 80057c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ca:	4413      	add	r3, r2
 80057cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80057d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057dc:	b29a      	uxth	r2, r3
 80057de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e0:	801a      	strh	r2, [r3, #0]
 80057e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80057e8:	d921      	bls.n	800582e <USB_EPStartXfer+0x806>
 80057ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80057f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f8:	f003 031f 	and.w	r3, r3, #31
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d104      	bne.n	800580a <USB_EPStartXfer+0x7e2>
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005804:	3b01      	subs	r3, #1
 8005806:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800580a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	b29a      	uxth	r2, r3
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005814:	b29b      	uxth	r3, r3
 8005816:	029b      	lsls	r3, r3, #10
 8005818:	b29b      	uxth	r3, r3
 800581a:	4313      	orrs	r3, r2
 800581c:	b29b      	uxth	r3, r3
 800581e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005826:	b29a      	uxth	r2, r3
 8005828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800582a:	801a      	strh	r2, [r3, #0]
 800582c:	e050      	b.n	80058d0 <USB_EPStartXfer+0x8a8>
 800582e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10a      	bne.n	800584c <USB_EPStartXfer+0x824>
 8005836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005844:	b29a      	uxth	r2, r3
 8005846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	e041      	b.n	80058d0 <USB_EPStartXfer+0x8a8>
 800584c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d004      	beq.n	800586c <USB_EPStartXfer+0x844>
 8005862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005866:	3301      	adds	r3, #1
 8005868:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800586c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29a      	uxth	r2, r3
 8005872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005876:	b29b      	uxth	r3, r3
 8005878:	029b      	lsls	r3, r3, #10
 800587a:	b29b      	uxth	r3, r3
 800587c:	4313      	orrs	r3, r2
 800587e:	b29a      	uxth	r2, r3
 8005880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005882:	801a      	strh	r2, [r3, #0]
 8005884:	e024      	b.n	80058d0 <USB_EPStartXfer+0x8a8>
 8005886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d11c      	bne.n	80058d0 <USB_EPStartXfer+0x8a8>
 8005896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058aa:	4413      	add	r3, r2
 80058ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80058ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	011a      	lsls	r2, r3, #4
 80058bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058be:	4413      	add	r3, r2
 80058c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	895b      	ldrh	r3, [r3, #10]
 80058dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6959      	ldr	r1, [r3, #20]
 80058ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80058f6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80058fa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80058fe:	6800      	ldr	r0, [r0, #0]
 8005900:	f001 f881 	bl	8006a06 <USB_WritePMA>
 8005904:	e227      	b.n	8005d56 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800591a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	b29b      	uxth	r3, r3
 8005934:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800593c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005944:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	441a      	add	r2, r3
 800595a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800595e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005962:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800596a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800596e:	b29b      	uxth	r3, r3
 8005970:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800597e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005982:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800598c:	b29b      	uxth	r3, r3
 800598e:	461a      	mov	r2, r3
 8005990:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005992:	4413      	add	r3, r2
 8005994:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	011a      	lsls	r2, r3, #4
 80059a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059a6:	4413      	add	r3, r2
 80059a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	891b      	ldrh	r3, [r3, #8]
 80059c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6959      	ldr	r1, [r3, #20]
 80059d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d8:	b29b      	uxth	r3, r3
 80059da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80059de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80059e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80059e6:	6800      	ldr	r0, [r0, #0]
 80059e8:	f001 f80d 	bl	8006a06 <USB_WritePMA>
 80059ec:	e1b3      	b.n	8005d56 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80059ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6a1a      	ldr	r2, [r3, #32]
 80059fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059fe:	1ad2      	subs	r2, r2, r3
 8005a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 80c6 	beq.w	8005bc0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	785b      	ldrb	r3, [r3, #1]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d177      	bne.n	8005b40 <USB_EPStartXfer+0xb18>
 8005a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a70:	4413      	add	r3, r2
 8005a72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	011a      	lsls	r2, r3, #4
 8005a82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a84:	4413      	add	r3, r2
 8005a86:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a9a:	801a      	strh	r2, [r3, #0]
 8005a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005aa2:	d921      	bls.n	8005ae8 <USB_EPStartXfer+0xac0>
 8005aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d104      	bne.n	8005ac4 <USB_EPStartXfer+0xa9c>
 8005aba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005ac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	029b      	lsls	r3, r3, #10
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ae4:	801a      	strh	r2, [r3, #0]
 8005ae6:	e050      	b.n	8005b8a <USB_EPStartXfer+0xb62>
 8005ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10a      	bne.n	8005b06 <USB_EPStartXfer+0xade>
 8005af0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	e041      	b.n	8005b8a <USB_EPStartXfer+0xb62>
 8005b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0a:	085b      	lsrs	r3, r3, #1
 8005b0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d004      	beq.n	8005b26 <USB_EPStartXfer+0xafe>
 8005b1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b20:	3301      	adds	r3, #1
 8005b22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	029b      	lsls	r3, r3, #10
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	4313      	orrs	r3, r2
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b3c:	801a      	strh	r2, [r3, #0]
 8005b3e:	e024      	b.n	8005b8a <USB_EPStartXfer+0xb62>
 8005b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d11c      	bne.n	8005b8a <USB_EPStartXfer+0xb62>
 8005b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	461a      	mov	r2, r3
 8005b62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b64:	4413      	add	r3, r2
 8005b66:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	011a      	lsls	r2, r3, #4
 8005b76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b78:	4413      	add	r3, r2
 8005b7a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	895b      	ldrh	r3, [r3, #10]
 8005b96:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6959      	ldr	r1, [r3, #20]
 8005ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005bb0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005bb4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005bb8:	6800      	ldr	r0, [r0, #0]
 8005bba:	f000 ff24 	bl	8006a06 <USB_WritePMA>
 8005bbe:	e0ca      	b.n	8005d56 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	785b      	ldrb	r3, [r3, #1]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d177      	bne.n	8005cc0 <USB_EPStartXfer+0xc98>
 8005bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bf0:	4413      	add	r3, r2
 8005bf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	011a      	lsls	r2, r3, #4
 8005c02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c04:	4413      	add	r3, r2
 8005c06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c0a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c20:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c22:	d921      	bls.n	8005c68 <USB_EPStartXfer+0xc40>
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d104      	bne.n	8005c44 <USB_EPStartXfer+0xc1c>
 8005c3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	029b      	lsls	r3, r3, #10
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	4313      	orrs	r3, r2
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	e05c      	b.n	8005d22 <USB_EPStartXfer+0xcfa>
 8005c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <USB_EPStartXfer+0xc5e>
 8005c70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c82:	801a      	strh	r2, [r3, #0]
 8005c84:	e04d      	b.n	8005d22 <USB_EPStartXfer+0xcfa>
 8005c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8a:	085b      	lsrs	r3, r3, #1
 8005c8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d004      	beq.n	8005ca6 <USB_EPStartXfer+0xc7e>
 8005c9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ca6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	029b      	lsls	r3, r3, #10
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	e030      	b.n	8005d22 <USB_EPStartXfer+0xcfa>
 8005cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d128      	bne.n	8005d22 <USB_EPStartXfer+0xcfa>
 8005cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	011a      	lsls	r2, r3, #4
 8005d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d20:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	891b      	ldrh	r3, [r3, #8]
 8005d2e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6959      	ldr	r1, [r3, #20]
 8005d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d48:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d4c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d50:	6800      	ldr	r0, [r0, #0]
 8005d52:	f000 fe58 	bl	8006a06 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d7c:	817b      	strh	r3, [r7, #10]
 8005d7e:	897b      	ldrh	r3, [r7, #10]
 8005d80:	f083 0310 	eor.w	r3, r3, #16
 8005d84:	817b      	strh	r3, [r7, #10]
 8005d86:	897b      	ldrh	r3, [r7, #10]
 8005d88:	f083 0320 	eor.w	r3, r3, #32
 8005d8c:	817b      	strh	r3, [r7, #10]
 8005d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	441a      	add	r2, r3
 8005da8:	897b      	ldrh	r3, [r7, #10]
 8005daa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	8013      	strh	r3, [r2, #0]
 8005dbe:	f000 bcde 	b.w	800677e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	7b1b      	ldrb	r3, [r3, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f040 80bb 	bne.w	8005f4a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699a      	ldr	r2, [r3, #24]
 8005de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d917      	bls.n	8005e20 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	699a      	ldr	r2, [r3, #24]
 8005e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e10:	1ad2      	subs	r2, r2, r3
 8005e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	619a      	str	r2, [r3, #24]
 8005e1e:	e00e      	b.n	8005e3e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e62:	4413      	add	r3, r2
 8005e64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	011a      	lsls	r2, r3, #4
 8005e76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e96:	801a      	strh	r2, [r3, #0]
 8005e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e9e:	d924      	bls.n	8005eea <USB_EPStartXfer+0xec2>
 8005ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d104      	bne.n	8005ec0 <USB_EPStartXfer+0xe98>
 8005eb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	029b      	lsls	r3, r3, #10
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	f000 bc10 	b.w	800670a <USB_EPStartXfer+0x16e2>
 8005eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10c      	bne.n	8005f0c <USB_EPStartXfer+0xee4>
 8005ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f08:	801a      	strh	r2, [r3, #0]
 8005f0a:	e3fe      	b.n	800670a <USB_EPStartXfer+0x16e2>
 8005f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f10:	085b      	lsrs	r3, r3, #1
 8005f12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d004      	beq.n	8005f2c <USB_EPStartXfer+0xf04>
 8005f22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f26:	3301      	adds	r3, #1
 8005f28:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	029b      	lsls	r3, r3, #10
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	e3df      	b.n	800670a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	78db      	ldrb	r3, [r3, #3]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	f040 8218 	bne.w	800638c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	785b      	ldrb	r3, [r3, #1]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f040 809d 	bne.w	80060a8 <USB_EPStartXfer+0x1080>
 8005f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f92:	4413      	add	r3, r2
 8005f94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	011a      	lsls	r2, r3, #4
 8005fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005faa:	4413      	add	r3, r2
 8005fac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005fc6:	801a      	strh	r2, [r3, #0]
 8005fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005fd6:	d92b      	bls.n	8006030 <USB_EPStartXfer+0x1008>
 8005fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 031f 	and.w	r3, r3, #31
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d104      	bne.n	8006008 <USB_EPStartXfer+0xfe0>
 8005ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006002:	3b01      	subs	r3, #1
 8006004:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	b29a      	uxth	r2, r3
 8006010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006014:	b29b      	uxth	r3, r3
 8006016:	029b      	lsls	r3, r3, #10
 8006018:	b29b      	uxth	r3, r3
 800601a:	4313      	orrs	r3, r2
 800601c:	b29b      	uxth	r3, r3
 800601e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006026:	b29a      	uxth	r2, r3
 8006028:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800602c:	801a      	strh	r2, [r3, #0]
 800602e:	e070      	b.n	8006112 <USB_EPStartXfer+0x10ea>
 8006030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10c      	bne.n	800605a <USB_EPStartXfer+0x1032>
 8006040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	b29b      	uxth	r3, r3
 8006048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800604c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006050:	b29a      	uxth	r2, r3
 8006052:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006056:	801a      	strh	r2, [r3, #0]
 8006058:	e05b      	b.n	8006112 <USB_EPStartXfer+0x10ea>
 800605a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	085b      	lsrs	r3, r3, #1
 8006068:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800606c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d004      	beq.n	800608a <USB_EPStartXfer+0x1062>
 8006080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006084:	3301      	adds	r3, #1
 8006086:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800608a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	b29a      	uxth	r2, r3
 8006092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006096:	b29b      	uxth	r3, r3
 8006098:	029b      	lsls	r3, r3, #10
 800609a:	b29b      	uxth	r3, r3
 800609c:	4313      	orrs	r3, r2
 800609e:	b29a      	uxth	r2, r3
 80060a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	e034      	b.n	8006112 <USB_EPStartXfer+0x10ea>
 80060a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	785b      	ldrb	r3, [r3, #1]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d12c      	bne.n	8006112 <USB_EPStartXfer+0x10ea>
 80060b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	461a      	mov	r2, r3
 80060d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80060dc:	4413      	add	r3, r2
 80060de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	011a      	lsls	r2, r3, #4
 80060f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80060f4:	4413      	add	r3, r2
 80060f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	b29a      	uxth	r2, r3
 800610c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006110:	801a      	strh	r2, [r3, #0]
 8006112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006116:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	785b      	ldrb	r3, [r3, #1]
 800612c:	2b00      	cmp	r3, #0
 800612e:	f040 809d 	bne.w	800626c <USB_EPStartXfer+0x1244>
 8006132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006136:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006144:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800614e:	b29b      	uxth	r3, r3
 8006150:	461a      	mov	r2, r3
 8006152:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006156:	4413      	add	r3, r2
 8006158:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800615c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	011a      	lsls	r2, r3, #4
 800616a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800616e:	4413      	add	r3, r2
 8006170:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006174:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006178:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006184:	b29a      	uxth	r2, r3
 8006186:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800618a:	801a      	strh	r2, [r3, #0]
 800618c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	2b3e      	cmp	r3, #62	@ 0x3e
 800619a:	d92b      	bls.n	80061f4 <USB_EPStartXfer+0x11cc>
 800619c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	f003 031f 	and.w	r3, r3, #31
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d104      	bne.n	80061cc <USB_EPStartXfer+0x11a4>
 80061c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061c6:	3b01      	subs	r3, #1
 80061c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061d8:	b29b      	uxth	r3, r3
 80061da:	029b      	lsls	r3, r3, #10
 80061dc:	b29b      	uxth	r3, r3
 80061de:	4313      	orrs	r3, r2
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061f0:	801a      	strh	r2, [r3, #0]
 80061f2:	e069      	b.n	80062c8 <USB_EPStartXfer+0x12a0>
 80061f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10c      	bne.n	800621e <USB_EPStartXfer+0x11f6>
 8006204:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006214:	b29a      	uxth	r2, r3
 8006216:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	e054      	b.n	80062c8 <USB_EPStartXfer+0x12a0>
 800621e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	085b      	lsrs	r3, r3, #1
 800622c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d004      	beq.n	800624e <USB_EPStartXfer+0x1226>
 8006244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006248:	3301      	adds	r3, #1
 800624a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800624e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	b29a      	uxth	r2, r3
 8006256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800625a:	b29b      	uxth	r3, r3
 800625c:	029b      	lsls	r3, r3, #10
 800625e:	b29b      	uxth	r3, r3
 8006260:	4313      	orrs	r3, r2
 8006262:	b29a      	uxth	r2, r3
 8006264:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006268:	801a      	strh	r2, [r3, #0]
 800626a:	e02d      	b.n	80062c8 <USB_EPStartXfer+0x12a0>
 800626c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	785b      	ldrb	r3, [r3, #1]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d125      	bne.n	80062c8 <USB_EPStartXfer+0x12a0>
 800627c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006280:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800628a:	b29b      	uxth	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006292:	4413      	add	r3, r2
 8006294:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	011a      	lsls	r2, r3, #4
 80062a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80062aa:	4413      	add	r3, r2
 80062ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062c6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80062c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 8218 	beq.w	800670a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80062da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80062fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80062fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d005      	beq.n	8006312 <USB_EPStartXfer+0x12ea>
 8006306:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800630a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10d      	bne.n	800632e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006312:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800631a:	2b00      	cmp	r3, #0
 800631c:	f040 81f5 	bne.w	800670a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006320:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	f040 81ee 	bne.w	800670a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800632e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006332:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	b29b      	uxth	r3, r3
 800634c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006350:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006354:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	441a      	add	r2, r3
 8006372:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006376:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800637a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800637e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006382:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006386:	b29b      	uxth	r3, r3
 8006388:	8013      	strh	r3, [r2, #0]
 800638a:	e1be      	b.n	800670a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800638c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	78db      	ldrb	r3, [r3, #3]
 8006398:	2b01      	cmp	r3, #1
 800639a:	f040 81b4 	bne.w	8006706 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800639e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699a      	ldr	r2, [r3, #24]
 80063aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d917      	bls.n	80063ea <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80063ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80063ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699a      	ldr	r2, [r3, #24]
 80063d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063da:	1ad2      	subs	r2, r2, r3
 80063dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	619a      	str	r2, [r3, #24]
 80063e8:	e00e      	b.n	8006408 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80063ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80063fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2200      	movs	r2, #0
 8006406:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	785b      	ldrb	r3, [r3, #1]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f040 8085 	bne.w	8006524 <USB_EPStartXfer+0x14fc>
 800641a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800641e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800642c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006436:	b29b      	uxth	r3, r3
 8006438:	461a      	mov	r2, r3
 800643a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800643e:	4413      	add	r3, r2
 8006440:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	011a      	lsls	r2, r3, #4
 8006452:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006456:	4413      	add	r3, r2
 8006458:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800645c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006460:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800646c:	b29a      	uxth	r2, r3
 800646e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006472:	801a      	strh	r2, [r3, #0]
 8006474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006478:	2b3e      	cmp	r3, #62	@ 0x3e
 800647a:	d923      	bls.n	80064c4 <USB_EPStartXfer+0x149c>
 800647c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006480:	095b      	lsrs	r3, r3, #5
 8006482:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648a:	f003 031f 	and.w	r3, r3, #31
 800648e:	2b00      	cmp	r3, #0
 8006490:	d104      	bne.n	800649c <USB_EPStartXfer+0x1474>
 8006492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006496:	3b01      	subs	r3, #1
 8006498:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800649c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	029b      	lsls	r3, r3, #10
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	4313      	orrs	r3, r2
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064c0:	801a      	strh	r2, [r3, #0]
 80064c2:	e060      	b.n	8006586 <USB_EPStartXfer+0x155e>
 80064c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10c      	bne.n	80064e6 <USB_EPStartXfer+0x14be>
 80064cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064dc:	b29a      	uxth	r2, r3
 80064de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064e2:	801a      	strh	r2, [r3, #0]
 80064e4:	e04f      	b.n	8006586 <USB_EPStartXfer+0x155e>
 80064e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ea:	085b      	lsrs	r3, r3, #1
 80064ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d004      	beq.n	8006506 <USB_EPStartXfer+0x14de>
 80064fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006500:	3301      	adds	r3, #1
 8006502:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29a      	uxth	r2, r3
 800650e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006512:	b29b      	uxth	r3, r3
 8006514:	029b      	lsls	r3, r3, #10
 8006516:	b29b      	uxth	r3, r3
 8006518:	4313      	orrs	r3, r2
 800651a:	b29a      	uxth	r2, r3
 800651c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006520:	801a      	strh	r2, [r3, #0]
 8006522:	e030      	b.n	8006586 <USB_EPStartXfer+0x155e>
 8006524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	785b      	ldrb	r3, [r3, #1]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d128      	bne.n	8006586 <USB_EPStartXfer+0x155e>
 8006534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006538:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006546:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006550:	b29b      	uxth	r3, r3
 8006552:	461a      	mov	r2, r3
 8006554:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006558:	4413      	add	r3, r2
 800655a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800655e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	011a      	lsls	r2, r3, #4
 800656c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006570:	4413      	add	r3, r2
 8006572:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006576:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800657a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800657e:	b29a      	uxth	r2, r3
 8006580:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006584:	801a      	strh	r2, [r3, #0]
 8006586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	785b      	ldrb	r3, [r3, #1]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f040 8085 	bne.w	80066b0 <USB_EPStartXfer+0x1688>
 80065a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80065b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80065ca:	4413      	add	r3, r2
 80065cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80065d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	011a      	lsls	r2, r3, #4
 80065de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80065e2:	4413      	add	r3, r2
 80065e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80065fe:	801a      	strh	r2, [r3, #0]
 8006600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006604:	2b3e      	cmp	r3, #62	@ 0x3e
 8006606:	d923      	bls.n	8006650 <USB_EPStartXfer+0x1628>
 8006608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006616:	f003 031f 	and.w	r3, r3, #31
 800661a:	2b00      	cmp	r3, #0
 800661c:	d104      	bne.n	8006628 <USB_EPStartXfer+0x1600>
 800661e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006622:	3b01      	subs	r3, #1
 8006624:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006628:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29a      	uxth	r2, r3
 8006630:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006634:	b29b      	uxth	r3, r3
 8006636:	029b      	lsls	r3, r3, #10
 8006638:	b29b      	uxth	r3, r3
 800663a:	4313      	orrs	r3, r2
 800663c:	b29b      	uxth	r3, r3
 800663e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006646:	b29a      	uxth	r2, r3
 8006648:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800664c:	801a      	strh	r2, [r3, #0]
 800664e:	e05c      	b.n	800670a <USB_EPStartXfer+0x16e2>
 8006650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10c      	bne.n	8006672 <USB_EPStartXfer+0x164a>
 8006658:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006668:	b29a      	uxth	r2, r3
 800666a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800666e:	801a      	strh	r2, [r3, #0]
 8006670:	e04b      	b.n	800670a <USB_EPStartXfer+0x16e2>
 8006672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006676:	085b      	lsrs	r3, r3, #1
 8006678:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800667c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <USB_EPStartXfer+0x166a>
 8006688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800668c:	3301      	adds	r3, #1
 800668e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006692:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	b29a      	uxth	r2, r3
 800669a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800669e:	b29b      	uxth	r3, r3
 80066a0:	029b      	lsls	r3, r3, #10
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	4313      	orrs	r3, r2
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066ac:	801a      	strh	r2, [r3, #0]
 80066ae:	e02c      	b.n	800670a <USB_EPStartXfer+0x16e2>
 80066b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d124      	bne.n	800670a <USB_EPStartXfer+0x16e2>
 80066c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80066d6:	4413      	add	r3, r2
 80066d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	011a      	lsls	r2, r3, #4
 80066ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80066ee:	4413      	add	r3, r2
 80066f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006702:	801a      	strh	r2, [r3, #0]
 8006704:	e001      	b.n	800670a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e03a      	b.n	8006780 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800670a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800670e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	b29b      	uxth	r3, r3
 8006728:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800672c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006730:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006734:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006738:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800673c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006740:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006744:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006748:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800674c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006750:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	441a      	add	r2, r3
 8006766:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800676a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800676e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800677a:	b29b      	uxth	r3, r3
 800677c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800678a:	b480      	push	{r7}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	785b      	ldrb	r3, [r3, #1]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d020      	beq.n	80067de <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067b2:	81bb      	strh	r3, [r7, #12]
 80067b4:	89bb      	ldrh	r3, [r7, #12]
 80067b6:	f083 0310 	eor.w	r3, r3, #16
 80067ba:	81bb      	strh	r3, [r7, #12]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	441a      	add	r2, r3
 80067c6:	89bb      	ldrh	r3, [r7, #12]
 80067c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067d8:	b29b      	uxth	r3, r3
 80067da:	8013      	strh	r3, [r2, #0]
 80067dc:	e01f      	b.n	800681e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f4:	81fb      	strh	r3, [r7, #14]
 80067f6:	89fb      	ldrh	r3, [r7, #14]
 80067f8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80067fc:	81fb      	strh	r3, [r7, #14]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	441a      	add	r2, r3
 8006808:	89fb      	ldrh	r3, [r7, #14]
 800680a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800680e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800681a:	b29b      	uxth	r3, r3
 800681c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	bc80      	pop	{r7}
 8006828:	4770      	bx	lr

0800682a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800682a:	b480      	push	{r7}
 800682c:	b087      	sub	sp, #28
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	7b1b      	ldrb	r3, [r3, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	f040 809d 	bne.w	8006978 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	785b      	ldrb	r3, [r3, #1]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d04c      	beq.n	80068e0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	823b      	strh	r3, [r7, #16]
 8006854:	8a3b      	ldrh	r3, [r7, #16]
 8006856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800685a:	2b00      	cmp	r3, #0
 800685c:	d01b      	beq.n	8006896 <USB_EPClearStall+0x6c>
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	b29b      	uxth	r3, r3
 800686c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006874:	81fb      	strh	r3, [r7, #14]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	441a      	add	r2, r3
 8006880:	89fb      	ldrh	r3, [r7, #14]
 8006882:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006886:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800688a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800688e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006892:	b29b      	uxth	r3, r3
 8006894:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	78db      	ldrb	r3, [r3, #3]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d06c      	beq.n	8006978 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068b4:	81bb      	strh	r3, [r7, #12]
 80068b6:	89bb      	ldrh	r3, [r7, #12]
 80068b8:	f083 0320 	eor.w	r3, r3, #32
 80068bc:	81bb      	strh	r3, [r7, #12]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	441a      	add	r2, r3
 80068c8:	89bb      	ldrh	r3, [r7, #12]
 80068ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068da:	b29b      	uxth	r3, r3
 80068dc:	8013      	strh	r3, [r2, #0]
 80068de:	e04b      	b.n	8006978 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	82fb      	strh	r3, [r7, #22]
 80068ee:	8afb      	ldrh	r3, [r7, #22]
 80068f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d01b      	beq.n	8006930 <USB_EPClearStall+0x106>
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	b29b      	uxth	r3, r3
 8006906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800690a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690e:	82bb      	strh	r3, [r7, #20]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	441a      	add	r2, r3
 800691a:	8abb      	ldrh	r3, [r7, #20]
 800691c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006920:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006924:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800692c:	b29b      	uxth	r3, r3
 800692e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006946:	827b      	strh	r3, [r7, #18]
 8006948:	8a7b      	ldrh	r3, [r7, #18]
 800694a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800694e:	827b      	strh	r3, [r7, #18]
 8006950:	8a7b      	ldrh	r3, [r7, #18]
 8006952:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006956:	827b      	strh	r3, [r7, #18]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	441a      	add	r2, r3
 8006962:	8a7b      	ldrh	r3, [r7, #18]
 8006964:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006968:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800696c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006974:	b29b      	uxth	r3, r3
 8006976:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	bc80      	pop	{r7}
 8006982:	4770      	bx	lr

08006984 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	460b      	mov	r3, r1
 800698e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006990:	78fb      	ldrb	r3, [r7, #3]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d103      	bne.n	800699e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2280      	movs	r2, #128	@ 0x80
 800699a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bc80      	pop	{r7}
 80069a8:	4770      	bx	lr

080069aa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bc80      	pop	{r7}
 80069bc:	4770      	bx	lr

080069be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr

080069d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b085      	sub	sp, #20
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80069e4:	68fb      	ldr	r3, [r7, #12]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr

080069f0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr

08006a06 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b08b      	sub	sp, #44	@ 0x2c
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	4611      	mov	r1, r2
 8006a12:	461a      	mov	r2, r3
 8006a14:	460b      	mov	r3, r1
 8006a16:	80fb      	strh	r3, [r7, #6]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a1c:	88bb      	ldrh	r3, [r7, #4]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	085b      	lsrs	r3, r3, #1
 8006a22:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a2c:	88fb      	ldrh	r3, [r7, #6]
 8006a2e:	005a      	lsls	r2, r3, #1
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a38:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a3e:	e01e      	b.n	8006a7e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	b21a      	sxth	r2, r3
 8006a50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	b21b      	sxth	r3, r3
 8006a58:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	8a7a      	ldrh	r2, [r7, #18]
 8006a5e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	3302      	adds	r3, #2
 8006a64:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	3302      	adds	r3, #2
 8006a6a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	3301      	adds	r3, #1
 8006a76:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1dd      	bne.n	8006a40 <USB_WritePMA+0x3a>
  }
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop
 8006a88:	372c      	adds	r7, #44	@ 0x2c
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b08b      	sub	sp, #44	@ 0x2c
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	80fb      	strh	r3, [r7, #6]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006aa6:	88bb      	ldrh	r3, [r7, #4]
 8006aa8:	085b      	lsrs	r3, r3, #1
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ab6:	88fb      	ldrh	r3, [r7, #6]
 8006ab8:	005a      	lsls	r2, r3, #1
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ac2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ac8:	e01b      	b.n	8006b02 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	3302      	adds	r3, #2
 8006ad6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	0a1b      	lsrs	r3, r3, #8
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	3301      	adds	r3, #1
 8006af4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	3302      	adds	r3, #2
 8006afa:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afe:	3b01      	subs	r3, #1
 8006b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e0      	bne.n	8006aca <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006b08:	88bb      	ldrh	r3, [r7, #4]
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d007      	beq.n	8006b24 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	701a      	strb	r2, [r3, #0]
  }
}
 8006b24:	bf00      	nop
 8006b26:	372c      	adds	r7, #44	@ 0x2c
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bc80      	pop	{r7}
 8006b2c:	4770      	bx	lr

08006b2e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
 8006b36:	460b      	mov	r3, r1
 8006b38:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	7c1b      	ldrb	r3, [r3, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d115      	bne.n	8006b72 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	2181      	movs	r1, #129	@ 0x81
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 fe9d 	bl	800888e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b5e:	2202      	movs	r2, #2
 8006b60:	2101      	movs	r1, #1
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 fe93 	bl	800888e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006b70:	e012      	b.n	8006b98 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b72:	2340      	movs	r3, #64	@ 0x40
 8006b74:	2202      	movs	r2, #2
 8006b76:	2181      	movs	r1, #129	@ 0x81
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 fe88 	bl	800888e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b84:	2340      	movs	r3, #64	@ 0x40
 8006b86:	2202      	movs	r2, #2
 8006b88:	2101      	movs	r1, #1
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 fe7f 	bl	800888e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b98:	2308      	movs	r3, #8
 8006b9a:	2203      	movs	r2, #3
 8006b9c:	2182      	movs	r1, #130	@ 0x82
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f001 fe75 	bl	800888e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006baa:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006bae:	f001 ff95 	bl	8008adc <USBD_static_malloc>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d102      	bne.n	8006bca <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	73fb      	strb	r3, [r7, #15]
 8006bc8:	e026      	b.n	8006c18 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bd0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	7c1b      	ldrb	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d109      	bne.n	8006c08 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006bfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bfe:	2101      	movs	r1, #1
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 ff34 	bl	8008a6e <USBD_LL_PrepareReceive>
 8006c06:	e007      	b.n	8006c18 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c0e:	2340      	movs	r3, #64	@ 0x40
 8006c10:	2101      	movs	r1, #1
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 ff2b 	bl	8008a6e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c32:	2181      	movs	r1, #129	@ 0x81
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 fe50 	bl	80088da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c40:	2101      	movs	r1, #1
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 fe49 	bl	80088da <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006c50:	2182      	movs	r1, #130	@ 0x82
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 fe41 	bl	80088da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00e      	beq.n	8006c86 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 ff3b 	bl	8008af4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ca0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d039      	beq.n	8006d2e <USBD_CDC_Setup+0x9e>
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d17f      	bne.n	8006dbe <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	88db      	ldrh	r3, [r3, #6]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d029      	beq.n	8006d1a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	b25b      	sxtb	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	da11      	bge.n	8006cf4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006cdc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	88d2      	ldrh	r2, [r2, #6]
 8006ce2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ce4:	6939      	ldr	r1, [r7, #16]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	88db      	ldrh	r3, [r3, #6]
 8006cea:	461a      	mov	r2, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 fa05 	bl	80080fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006cf2:	e06b      	b.n	8006dcc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	785a      	ldrb	r2, [r3, #1]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	88db      	ldrh	r3, [r3, #6]
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d0a:	6939      	ldr	r1, [r7, #16]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	88db      	ldrh	r3, [r3, #6]
 8006d10:	461a      	mov	r2, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 fa20 	bl	8008158 <USBD_CtlPrepareRx>
      break;
 8006d18:	e058      	b.n	8006dcc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	7850      	ldrb	r0, [r2, #1]
 8006d26:	2200      	movs	r2, #0
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	4798      	blx	r3
      break;
 8006d2c:	e04e      	b.n	8006dcc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	785b      	ldrb	r3, [r3, #1]
 8006d32:	2b0b      	cmp	r3, #11
 8006d34:	d02e      	beq.n	8006d94 <USBD_CDC_Setup+0x104>
 8006d36:	2b0b      	cmp	r3, #11
 8006d38:	dc38      	bgt.n	8006dac <USBD_CDC_Setup+0x11c>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <USBD_CDC_Setup+0xb4>
 8006d3e:	2b0a      	cmp	r3, #10
 8006d40:	d014      	beq.n	8006d6c <USBD_CDC_Setup+0xdc>
 8006d42:	e033      	b.n	8006dac <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d107      	bne.n	8006d5e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d4e:	f107 030c 	add.w	r3, r7, #12
 8006d52:	2202      	movs	r2, #2
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 f9d0 	bl	80080fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d5c:	e02e      	b.n	8006dbc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 f961 	bl	8008028 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d66:	2302      	movs	r3, #2
 8006d68:	75fb      	strb	r3, [r7, #23]
          break;
 8006d6a:	e027      	b.n	8006dbc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d107      	bne.n	8006d86 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d76:	f107 030f 	add.w	r3, r7, #15
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 f9bc 	bl	80080fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d84:	e01a      	b.n	8006dbc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 f94d 	bl	8008028 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	75fb      	strb	r3, [r7, #23]
          break;
 8006d92:	e013      	b.n	8006dbc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d00d      	beq.n	8006dba <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 f941 	bl	8008028 <USBD_CtlError>
            ret = USBD_FAIL;
 8006da6:	2302      	movs	r3, #2
 8006da8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006daa:	e006      	b.n	8006dba <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f001 f93a 	bl	8008028 <USBD_CtlError>
          ret = USBD_FAIL;
 8006db4:	2302      	movs	r3, #2
 8006db6:	75fb      	strb	r3, [r7, #23]
          break;
 8006db8:	e000      	b.n	8006dbc <USBD_CDC_Setup+0x12c>
          break;
 8006dba:	bf00      	nop
      }
      break;
 8006dbc:	e006      	b.n	8006dcc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 f931 	bl	8008028 <USBD_CtlError>
      ret = USBD_FAIL;
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8006dca:	bf00      	nop
  }

  return ret;
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	460b      	mov	r3, r1
 8006de0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006de8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006df0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d03a      	beq.n	8006e72 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006dfc:	78fa      	ldrb	r2, [r7, #3]
 8006dfe:	6879      	ldr	r1, [r7, #4]
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	440b      	add	r3, r1
 8006e0a:	331c      	adds	r3, #28
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d029      	beq.n	8006e66 <USBD_CDC_DataIn+0x90>
 8006e12:	78fa      	ldrb	r2, [r7, #3]
 8006e14:	6879      	ldr	r1, [r7, #4]
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	440b      	add	r3, r1
 8006e20:	331c      	adds	r3, #28
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	78f9      	ldrb	r1, [r7, #3]
 8006e26:	68b8      	ldr	r0, [r7, #8]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	4403      	add	r3, r0
 8006e32:	3320      	adds	r3, #32
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e3a:	fb01 f303 	mul.w	r3, r1, r3
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d110      	bne.n	8006e66 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006e44:	78fa      	ldrb	r2, [r7, #3]
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	440b      	add	r3, r1
 8006e52:	331c      	adds	r3, #28
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e58:	78f9      	ldrb	r1, [r7, #3]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 fde2 	bl	8008a28 <USBD_LL_Transmit>
 8006e64:	e003      	b.n	8006e6e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	e000      	b.n	8006e74 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006e72:	2302      	movs	r3, #2
  }
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 fe0d 	bl	8008ab4 <USBD_LL_GetRxDataSize>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00d      	beq.n	8006ec8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	4798      	blx	r3

    return USBD_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	e000      	b.n	8006eca <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006ec8:	2302      	movs	r3, #2
  }
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ee0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d014      	beq.n	8006f16 <USBD_CDC_EP0_RxReady+0x44>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006ef2:	2bff      	cmp	r3, #255	@ 0xff
 8006ef4:	d00f      	beq.n	8006f16 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006f04:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f0c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	22ff      	movs	r2, #255	@ 0xff
 8006f12:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2243      	movs	r2, #67	@ 0x43
 8006f2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006f2e:	4b03      	ldr	r3, [pc, #12]	@ (8006f3c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bc80      	pop	{r7}
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	20000094 	.word	0x20000094

08006f40 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2243      	movs	r2, #67	@ 0x43
 8006f4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006f4e:	4b03      	ldr	r3, [pc, #12]	@ (8006f5c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bc80      	pop	{r7}
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	20000050 	.word	0x20000050

08006f60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2243      	movs	r2, #67	@ 0x43
 8006f6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006f6e:	4b03      	ldr	r3, [pc, #12]	@ (8006f7c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bc80      	pop	{r7}
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	200000d8 	.word	0x200000d8

08006f80 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	220a      	movs	r2, #10
 8006f8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006f8e:	4b03      	ldr	r3, [pc, #12]	@ (8006f9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bc80      	pop	{r7}
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	2000000c 	.word	0x2000000c

08006fa0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006faa:	2302      	movs	r3, #2
 8006fac:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr

08006fcc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fe0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006fea:	88fa      	ldrh	r2, [r7, #6]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	371c      	adds	r7, #28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr

08006ffe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b085      	sub	sp, #20
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800700e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007032:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800703a:	2b00      	cmp	r3, #0
 800703c:	d01c      	beq.n	8007078 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007044:	2b00      	cmp	r3, #0
 8007046:	d115      	bne.n	8007074 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2201      	movs	r2, #1
 800704c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007066:	b29b      	uxth	r3, r3
 8007068:	2181      	movs	r1, #129	@ 0x81
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f001 fcdc 	bl	8008a28 <USBD_LL_Transmit>

      return USBD_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	e002      	b.n	800707a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007074:	2301      	movs	r3, #1
 8007076:	e000      	b.n	800707a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007078:	2302      	movs	r3, #2
  }
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007090:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007098:	2b00      	cmp	r3, #0
 800709a:	d017      	beq.n	80070cc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	7c1b      	ldrb	r3, [r3, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d109      	bne.n	80070b8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070ae:	2101      	movs	r1, #1
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f001 fcdc 	bl	8008a6e <USBD_LL_PrepareReceive>
 80070b6:	e007      	b.n	80070c8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070be:	2340      	movs	r3, #64	@ 0x40
 80070c0:	2101      	movs	r1, #1
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f001 fcd3 	bl	8008a6e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	e000      	b.n	80070ce <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80070cc:	2302      	movs	r3, #2
  }
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	4613      	mov	r3, r2
 80070e2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80070ea:	2302      	movs	r3, #2
 80070ec:	e01a      	b.n	8007124 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	79fa      	ldrb	r2, [r7, #7]
 800711a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f001 fb41 	bl	80087a4 <USBD_LL_Init>

  return USBD_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d006      	beq.n	800714e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	73fb      	strb	r3, [r7, #15]
 800714c:	e001      	b.n	8007152 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800714e:	2302      	movs	r3, #2
 8007150:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007152:	7bfb      	ldrb	r3, [r7, #15]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	bc80      	pop	{r7}
 800715c:	4770      	bx	lr

0800715e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f001 fb76 	bl	8008858 <USBD_LL_Start>

  return USBD_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	bc80      	pop	{r7}
 8007188:	4770      	bx	lr

0800718a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007196:	2302      	movs	r3, #2
 8007198:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00c      	beq.n	80071be <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	78fa      	ldrb	r2, [r7, #3]
 80071ae:	4611      	mov	r1, r2
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	4798      	blx	r3
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80071be:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	78fa      	ldrb	r2, [r7, #3]
 80071de:	4611      	mov	r1, r2
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	4798      	blx	r3

  return USBD_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b082      	sub	sp, #8
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fed8 	bl	8007fb6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007214:	461a      	mov	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007222:	f003 031f 	and.w	r3, r3, #31
 8007226:	2b02      	cmp	r3, #2
 8007228:	d016      	beq.n	8007258 <USBD_LL_SetupStage+0x6a>
 800722a:	2b02      	cmp	r3, #2
 800722c:	d81c      	bhi.n	8007268 <USBD_LL_SetupStage+0x7a>
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <USBD_LL_SetupStage+0x4a>
 8007232:	2b01      	cmp	r3, #1
 8007234:	d008      	beq.n	8007248 <USBD_LL_SetupStage+0x5a>
 8007236:	e017      	b.n	8007268 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f9cb 	bl	80075dc <USBD_StdDevReq>
      break;
 8007246:	e01a      	b.n	800727e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800724e:	4619      	mov	r1, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fa2d 	bl	80076b0 <USBD_StdItfReq>
      break;
 8007256:	e012      	b.n	800727e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fa6d 	bl	8007740 <USBD_StdEPReq>
      break;
 8007266:	e00a      	b.n	800727e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800726e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007272:	b2db      	uxtb	r3, r3
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f001 fb4e 	bl	8008918 <USBD_LL_StallEP>
      break;
 800727c:	bf00      	nop
  }

  return USBD_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	460b      	mov	r3, r1
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007296:	7afb      	ldrb	r3, [r7, #11]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d14b      	bne.n	8007334 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80072a2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d134      	bne.n	8007318 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d919      	bls.n	80072ee <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	1ad2      	subs	r2, r2, r3
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d203      	bcs.n	80072dc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80072d8:	b29b      	uxth	r3, r3
 80072da:	e002      	b.n	80072e2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	461a      	mov	r2, r3
 80072e4:	6879      	ldr	r1, [r7, #4]
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 ff54 	bl	8008194 <USBD_CtlContinueRx>
 80072ec:	e038      	b.n	8007360 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007300:	2b03      	cmp	r3, #3
 8007302:	d105      	bne.n	8007310 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 ff51 	bl	80081b8 <USBD_CtlSendStatus>
 8007316:	e023      	b.n	8007360 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800731e:	2b05      	cmp	r3, #5
 8007320:	d11e      	bne.n	8007360 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800732a:	2100      	movs	r1, #0
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f001 faf3 	bl	8008918 <USBD_LL_StallEP>
 8007332:	e015      	b.n	8007360 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00d      	beq.n	800735c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007346:	2b03      	cmp	r3, #3
 8007348:	d108      	bne.n	800735c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	7afa      	ldrb	r2, [r7, #11]
 8007354:	4611      	mov	r1, r2
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	4798      	blx	r3
 800735a:	e001      	b.n	8007360 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800735c:	2302      	movs	r3, #2
 800735e:	e000      	b.n	8007362 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b086      	sub	sp, #24
 800736e:	af00      	add	r7, sp, #0
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	460b      	mov	r3, r1
 8007374:	607a      	str	r2, [r7, #4]
 8007376:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007378:	7afb      	ldrb	r3, [r7, #11]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d17f      	bne.n	800747e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3314      	adds	r3, #20
 8007382:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800738a:	2b02      	cmp	r3, #2
 800738c:	d15c      	bne.n	8007448 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	429a      	cmp	r2, r3
 8007398:	d915      	bls.n	80073c6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	68da      	ldr	r2, [r3, #12]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	1ad2      	subs	r2, r2, r3
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	461a      	mov	r2, r3
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 febe 	bl	8008134 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073b8:	2300      	movs	r3, #0
 80073ba:	2200      	movs	r2, #0
 80073bc:	2100      	movs	r1, #0
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f001 fb55 	bl	8008a6e <USBD_LL_PrepareReceive>
 80073c4:	e04e      	b.n	8007464 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	6912      	ldr	r2, [r2, #16]
 80073ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80073d2:	fb01 f202 	mul.w	r2, r1, r2
 80073d6:	1a9b      	subs	r3, r3, r2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d11c      	bne.n	8007416 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	689a      	ldr	r2, [r3, #8]
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d316      	bcc.n	8007416 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d20f      	bcs.n	8007416 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073f6:	2200      	movs	r2, #0
 80073f8:	2100      	movs	r1, #0
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 fe9a 	bl	8008134 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007408:	2300      	movs	r3, #0
 800740a:	2200      	movs	r2, #0
 800740c:	2100      	movs	r1, #0
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f001 fb2d 	bl	8008a6e <USBD_LL_PrepareReceive>
 8007414:	e026      	b.n	8007464 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007428:	2b03      	cmp	r3, #3
 800742a:	d105      	bne.n	8007438 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007438:	2180      	movs	r1, #128	@ 0x80
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f001 fa6c 	bl	8008918 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 fecc 	bl	80081de <USBD_CtlReceiveStatus>
 8007446:	e00d      	b.n	8007464 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800744e:	2b04      	cmp	r3, #4
 8007450:	d004      	beq.n	800745c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007458:	2b00      	cmp	r3, #0
 800745a:	d103      	bne.n	8007464 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800745c:	2180      	movs	r1, #128	@ 0x80
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f001 fa5a 	bl	8008918 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800746a:	2b01      	cmp	r3, #1
 800746c:	d11d      	bne.n	80074aa <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f7ff fe81 	bl	8007176 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800747c:	e015      	b.n	80074aa <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00d      	beq.n	80074a6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007490:	2b03      	cmp	r3, #3
 8007492:	d108      	bne.n	80074a6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	7afa      	ldrb	r2, [r7, #11]
 800749e:	4611      	mov	r1, r2
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	4798      	blx	r3
 80074a4:	e001      	b.n	80074aa <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074a6:	2302      	movs	r3, #2
 80074a8:	e000      	b.n	80074ac <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074bc:	2340      	movs	r3, #64	@ 0x40
 80074be:	2200      	movs	r2, #0
 80074c0:	2100      	movs	r1, #0
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 f9e3 	bl	800888e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2240      	movs	r2, #64	@ 0x40
 80074d4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074d8:	2340      	movs	r3, #64	@ 0x40
 80074da:	2200      	movs	r2, #0
 80074dc:	2180      	movs	r1, #128	@ 0x80
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f001 f9d5 	bl	800888e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2240      	movs	r2, #64	@ 0x40
 80074ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007514:	2b00      	cmp	r3, #0
 8007516:	d009      	beq.n	800752c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6852      	ldr	r2, [r2, #4]
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	4611      	mov	r1, r2
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	4798      	blx	r3
  }

  return USBD_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	460b      	mov	r3, r1
 8007540:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	78fa      	ldrb	r2, [r7, #3]
 8007546:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	bc80      	pop	{r7}
 8007552:	4770      	bx	lr

08007554 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2204      	movs	r2, #4
 800756c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	bc80      	pop	{r7}
 800757a:	4770      	bx	lr

0800757c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800758a:	2b04      	cmp	r3, #4
 800758c:	d105      	bne.n	800759a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr

080075a6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d10b      	bne.n	80075d0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
	...

080075dc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075f2:	2b40      	cmp	r3, #64	@ 0x40
 80075f4:	d005      	beq.n	8007602 <USBD_StdDevReq+0x26>
 80075f6:	2b40      	cmp	r3, #64	@ 0x40
 80075f8:	d84f      	bhi.n	800769a <USBD_StdDevReq+0xbe>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d009      	beq.n	8007612 <USBD_StdDevReq+0x36>
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d14b      	bne.n	800769a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	4798      	blx	r3
      break;
 8007610:	e048      	b.n	80076a4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	785b      	ldrb	r3, [r3, #1]
 8007616:	2b09      	cmp	r3, #9
 8007618:	d839      	bhi.n	800768e <USBD_StdDevReq+0xb2>
 800761a:	a201      	add	r2, pc, #4	@ (adr r2, 8007620 <USBD_StdDevReq+0x44>)
 800761c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007620:	08007671 	.word	0x08007671
 8007624:	08007685 	.word	0x08007685
 8007628:	0800768f 	.word	0x0800768f
 800762c:	0800767b 	.word	0x0800767b
 8007630:	0800768f 	.word	0x0800768f
 8007634:	08007653 	.word	0x08007653
 8007638:	08007649 	.word	0x08007649
 800763c:	0800768f 	.word	0x0800768f
 8007640:	08007667 	.word	0x08007667
 8007644:	0800765d 	.word	0x0800765d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f9dc 	bl	8007a08 <USBD_GetDescriptor>
          break;
 8007650:	e022      	b.n	8007698 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fb3f 	bl	8007cd8 <USBD_SetAddress>
          break;
 800765a:	e01d      	b.n	8007698 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fb7e 	bl	8007d60 <USBD_SetConfig>
          break;
 8007664:	e018      	b.n	8007698 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fc07 	bl	8007e7c <USBD_GetConfig>
          break;
 800766e:	e013      	b.n	8007698 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fc37 	bl	8007ee6 <USBD_GetStatus>
          break;
 8007678:	e00e      	b.n	8007698 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fc65 	bl	8007f4c <USBD_SetFeature>
          break;
 8007682:	e009      	b.n	8007698 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fc74 	bl	8007f74 <USBD_ClrFeature>
          break;
 800768c:	e004      	b.n	8007698 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fcc9 	bl	8008028 <USBD_CtlError>
          break;
 8007696:	bf00      	nop
      }
      break;
 8007698:	e004      	b.n	80076a4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fcc3 	bl	8008028 <USBD_CtlError>
      break;
 80076a2:	bf00      	nop
  }

  return ret;
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop

080076b0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076c6:	2b40      	cmp	r3, #64	@ 0x40
 80076c8:	d005      	beq.n	80076d6 <USBD_StdItfReq+0x26>
 80076ca:	2b40      	cmp	r3, #64	@ 0x40
 80076cc:	d82e      	bhi.n	800772c <USBD_StdItfReq+0x7c>
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <USBD_StdItfReq+0x26>
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	d12a      	bne.n	800772c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076dc:	3b01      	subs	r3, #1
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d81d      	bhi.n	800771e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	889b      	ldrh	r3, [r3, #4]
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d813      	bhi.n	8007714 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	4798      	blx	r3
 80076fa:	4603      	mov	r3, r0
 80076fc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	88db      	ldrh	r3, [r3, #6]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d110      	bne.n	8007728 <USBD_StdItfReq+0x78>
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10d      	bne.n	8007728 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fd53 	bl	80081b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007712:	e009      	b.n	8007728 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fc86 	bl	8008028 <USBD_CtlError>
          break;
 800771c:	e004      	b.n	8007728 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fc81 	bl	8008028 <USBD_CtlError>
          break;
 8007726:	e000      	b.n	800772a <USBD_StdItfReq+0x7a>
          break;
 8007728:	bf00      	nop
      }
      break;
 800772a:	e004      	b.n	8007736 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fc7a 	bl	8008028 <USBD_CtlError>
      break;
 8007734:	bf00      	nop
  }

  return USBD_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	889b      	ldrh	r3, [r3, #4]
 8007752:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800775c:	2b40      	cmp	r3, #64	@ 0x40
 800775e:	d007      	beq.n	8007770 <USBD_StdEPReq+0x30>
 8007760:	2b40      	cmp	r3, #64	@ 0x40
 8007762:	f200 8146 	bhi.w	80079f2 <USBD_StdEPReq+0x2b2>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <USBD_StdEPReq+0x40>
 800776a:	2b20      	cmp	r3, #32
 800776c:	f040 8141 	bne.w	80079f2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
      break;
 800777e:	e13d      	b.n	80079fc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007788:	2b20      	cmp	r3, #32
 800778a:	d10a      	bne.n	80077a2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	4798      	blx	r3
 800779a:	4603      	mov	r3, r0
 800779c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	e12d      	b.n	80079fe <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d007      	beq.n	80077ba <USBD_StdEPReq+0x7a>
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	f300 811b 	bgt.w	80079e6 <USBD_StdEPReq+0x2a6>
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d072      	beq.n	800789a <USBD_StdEPReq+0x15a>
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d03a      	beq.n	800782e <USBD_StdEPReq+0xee>
 80077b8:	e115      	b.n	80079e6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d002      	beq.n	80077ca <USBD_StdEPReq+0x8a>
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d015      	beq.n	80077f4 <USBD_StdEPReq+0xb4>
 80077c8:	e02b      	b.n	8007822 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00c      	beq.n	80077ea <USBD_StdEPReq+0xaa>
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	2b80      	cmp	r3, #128	@ 0x80
 80077d4:	d009      	beq.n	80077ea <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 f89c 	bl	8008918 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80077e0:	2180      	movs	r1, #128	@ 0x80
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f001 f898 	bl	8008918 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077e8:	e020      	b.n	800782c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fc1b 	bl	8008028 <USBD_CtlError>
              break;
 80077f2:	e01b      	b.n	800782c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	885b      	ldrh	r3, [r3, #2]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10e      	bne.n	800781a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00b      	beq.n	800781a <USBD_StdEPReq+0xda>
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	2b80      	cmp	r3, #128	@ 0x80
 8007806:	d008      	beq.n	800781a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	88db      	ldrh	r3, [r3, #6]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 f87f 	bl	8008918 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fccc 	bl	80081b8 <USBD_CtlSendStatus>

              break;
 8007820:	e004      	b.n	800782c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fbff 	bl	8008028 <USBD_CtlError>
              break;
 800782a:	bf00      	nop
          }
          break;
 800782c:	e0e0      	b.n	80079f0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007834:	2b02      	cmp	r3, #2
 8007836:	d002      	beq.n	800783e <USBD_StdEPReq+0xfe>
 8007838:	2b03      	cmp	r3, #3
 800783a:	d015      	beq.n	8007868 <USBD_StdEPReq+0x128>
 800783c:	e026      	b.n	800788c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00c      	beq.n	800785e <USBD_StdEPReq+0x11e>
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	2b80      	cmp	r3, #128	@ 0x80
 8007848:	d009      	beq.n	800785e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 f862 	bl	8008918 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007854:	2180      	movs	r1, #128	@ 0x80
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f001 f85e 	bl	8008918 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800785c:	e01c      	b.n	8007898 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fbe1 	bl	8008028 <USBD_CtlError>
              break;
 8007866:	e017      	b.n	8007898 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	885b      	ldrh	r3, [r3, #2]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d112      	bne.n	8007896 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007876:	2b00      	cmp	r3, #0
 8007878:	d004      	beq.n	8007884 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 f869 	bl	8008956 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fc97 	bl	80081b8 <USBD_CtlSendStatus>
              }
              break;
 800788a:	e004      	b.n	8007896 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fbca 	bl	8008028 <USBD_CtlError>
              break;
 8007894:	e000      	b.n	8007898 <USBD_StdEPReq+0x158>
              break;
 8007896:	bf00      	nop
          }
          break;
 8007898:	e0aa      	b.n	80079f0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d002      	beq.n	80078aa <USBD_StdEPReq+0x16a>
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d032      	beq.n	800790e <USBD_StdEPReq+0x1ce>
 80078a8:	e097      	b.n	80079da <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d007      	beq.n	80078c0 <USBD_StdEPReq+0x180>
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	2b80      	cmp	r3, #128	@ 0x80
 80078b4:	d004      	beq.n	80078c0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fbb5 	bl	8008028 <USBD_CtlError>
                break;
 80078be:	e091      	b.n	80079e4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	da0b      	bge.n	80078e0 <USBD_StdEPReq+0x1a0>
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80078ce:	4613      	mov	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	3310      	adds	r3, #16
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	4413      	add	r3, r2
 80078dc:	3304      	adds	r3, #4
 80078de:	e00b      	b.n	80078f8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078e6:	4613      	mov	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	4413      	add	r3, r2
 80078f6:	3304      	adds	r3, #4
 80078f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2202      	movs	r2, #2
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fbf8 	bl	80080fc <USBD_CtlSendData>
              break;
 800790c:	e06a      	b.n	80079e4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800790e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007912:	2b00      	cmp	r3, #0
 8007914:	da11      	bge.n	800793a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	f003 020f 	and.w	r2, r3, #15
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	4613      	mov	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	440b      	add	r3, r1
 8007928:	3318      	adds	r3, #24
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d117      	bne.n	8007960 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fb78 	bl	8008028 <USBD_CtlError>
                  break;
 8007938:	e054      	b.n	80079e4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	f003 020f 	and.w	r2, r3, #15
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d104      	bne.n	8007960 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fb65 	bl	8008028 <USBD_CtlError>
                  break;
 800795e:	e041      	b.n	80079e4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007960:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007964:	2b00      	cmp	r3, #0
 8007966:	da0b      	bge.n	8007980 <USBD_StdEPReq+0x240>
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800796e:	4613      	mov	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	3310      	adds	r3, #16
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	4413      	add	r3, r2
 800797c:	3304      	adds	r3, #4
 800797e:	e00b      	b.n	8007998 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	4413      	add	r3, r2
 8007996:	3304      	adds	r3, #4
 8007998:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800799a:	7bbb      	ldrb	r3, [r7, #14]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <USBD_StdEPReq+0x266>
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	2b80      	cmp	r3, #128	@ 0x80
 80079a4:	d103      	bne.n	80079ae <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2200      	movs	r2, #0
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	e00e      	b.n	80079cc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 ffee 	bl	8008994 <USBD_LL_IsStallEP>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2201      	movs	r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	e002      	b.n	80079cc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	2202      	movs	r2, #2
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fb92 	bl	80080fc <USBD_CtlSendData>
              break;
 80079d8:	e004      	b.n	80079e4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fb23 	bl	8008028 <USBD_CtlError>
              break;
 80079e2:	bf00      	nop
          }
          break;
 80079e4:	e004      	b.n	80079f0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fb1d 	bl	8008028 <USBD_CtlError>
          break;
 80079ee:	bf00      	nop
      }
      break;
 80079f0:	e004      	b.n	80079fc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fb17 	bl	8008028 <USBD_CtlError>
      break;
 80079fa:	bf00      	nop
  }

  return ret;
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a16:	2300      	movs	r3, #0
 8007a18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	885b      	ldrh	r3, [r3, #2]
 8007a22:	0a1b      	lsrs	r3, r3, #8
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	3b01      	subs	r3, #1
 8007a28:	2b06      	cmp	r3, #6
 8007a2a:	f200 8128 	bhi.w	8007c7e <USBD_GetDescriptor+0x276>
 8007a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a34 <USBD_GetDescriptor+0x2c>)
 8007a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a34:	08007a51 	.word	0x08007a51
 8007a38:	08007a69 	.word	0x08007a69
 8007a3c:	08007aa9 	.word	0x08007aa9
 8007a40:	08007c7f 	.word	0x08007c7f
 8007a44:	08007c7f 	.word	0x08007c7f
 8007a48:	08007c1f 	.word	0x08007c1f
 8007a4c:	08007c4b 	.word	0x08007c4b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	7c12      	ldrb	r2, [r2, #16]
 8007a5c:	f107 0108 	add.w	r1, r7, #8
 8007a60:	4610      	mov	r0, r2
 8007a62:	4798      	blx	r3
 8007a64:	60f8      	str	r0, [r7, #12]
      break;
 8007a66:	e112      	b.n	8007c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	7c1b      	ldrb	r3, [r3, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10d      	bne.n	8007a8c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a78:	f107 0208 	add.w	r2, r7, #8
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	4798      	blx	r3
 8007a80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3301      	adds	r3, #1
 8007a86:	2202      	movs	r2, #2
 8007a88:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a8a:	e100      	b.n	8007c8e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a94:	f107 0208 	add.w	r2, r7, #8
 8007a98:	4610      	mov	r0, r2
 8007a9a:	4798      	blx	r3
 8007a9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	701a      	strb	r2, [r3, #0]
      break;
 8007aa6:	e0f2      	b.n	8007c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	885b      	ldrh	r3, [r3, #2]
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b05      	cmp	r3, #5
 8007ab0:	f200 80ac 	bhi.w	8007c0c <USBD_GetDescriptor+0x204>
 8007ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8007abc <USBD_GetDescriptor+0xb4>)
 8007ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aba:	bf00      	nop
 8007abc:	08007ad5 	.word	0x08007ad5
 8007ac0:	08007b09 	.word	0x08007b09
 8007ac4:	08007b3d 	.word	0x08007b3d
 8007ac8:	08007b71 	.word	0x08007b71
 8007acc:	08007ba5 	.word	0x08007ba5
 8007ad0:	08007bd9 	.word	0x08007bd9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	7c12      	ldrb	r2, [r2, #16]
 8007aec:	f107 0108 	add.w	r1, r7, #8
 8007af0:	4610      	mov	r0, r2
 8007af2:	4798      	blx	r3
 8007af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007af6:	e091      	b.n	8007c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fa94 	bl	8008028 <USBD_CtlError>
            err++;
 8007b00:	7afb      	ldrb	r3, [r7, #11]
 8007b02:	3301      	adds	r3, #1
 8007b04:	72fb      	strb	r3, [r7, #11]
          break;
 8007b06:	e089      	b.n	8007c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00b      	beq.n	8007b2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	7c12      	ldrb	r2, [r2, #16]
 8007b20:	f107 0108 	add.w	r1, r7, #8
 8007b24:	4610      	mov	r0, r2
 8007b26:	4798      	blx	r3
 8007b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b2a:	e077      	b.n	8007c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa7a 	bl	8008028 <USBD_CtlError>
            err++;
 8007b34:	7afb      	ldrb	r3, [r7, #11]
 8007b36:	3301      	adds	r3, #1
 8007b38:	72fb      	strb	r3, [r7, #11]
          break;
 8007b3a:	e06f      	b.n	8007c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00b      	beq.n	8007b60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	7c12      	ldrb	r2, [r2, #16]
 8007b54:	f107 0108 	add.w	r1, r7, #8
 8007b58:	4610      	mov	r0, r2
 8007b5a:	4798      	blx	r3
 8007b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b5e:	e05d      	b.n	8007c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fa60 	bl	8008028 <USBD_CtlError>
            err++;
 8007b68:	7afb      	ldrb	r3, [r7, #11]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b6e:	e055      	b.n	8007c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00b      	beq.n	8007b94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	7c12      	ldrb	r2, [r2, #16]
 8007b88:	f107 0108 	add.w	r1, r7, #8
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	4798      	blx	r3
 8007b90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b92:	e043      	b.n	8007c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa46 	bl	8008028 <USBD_CtlError>
            err++;
 8007b9c:	7afb      	ldrb	r3, [r7, #11]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ba2:	e03b      	b.n	8007c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00b      	beq.n	8007bc8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	7c12      	ldrb	r2, [r2, #16]
 8007bbc:	f107 0108 	add.w	r1, r7, #8
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	4798      	blx	r3
 8007bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bc6:	e029      	b.n	8007c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fa2c 	bl	8008028 <USBD_CtlError>
            err++;
 8007bd0:	7afb      	ldrb	r3, [r7, #11]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8007bd6:	e021      	b.n	8007c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	7c12      	ldrb	r2, [r2, #16]
 8007bf0:	f107 0108 	add.w	r1, r7, #8
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4798      	blx	r3
 8007bf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bfa:	e00f      	b.n	8007c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fa12 	bl	8008028 <USBD_CtlError>
            err++;
 8007c04:	7afb      	ldrb	r3, [r7, #11]
 8007c06:	3301      	adds	r3, #1
 8007c08:	72fb      	strb	r3, [r7, #11]
          break;
 8007c0a:	e007      	b.n	8007c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa0a 	bl	8008028 <USBD_CtlError>
          err++;
 8007c14:	7afb      	ldrb	r3, [r7, #11]
 8007c16:	3301      	adds	r3, #1
 8007c18:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007c1a:	e038      	b.n	8007c8e <USBD_GetDescriptor+0x286>
 8007c1c:	e037      	b.n	8007c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	7c1b      	ldrb	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d109      	bne.n	8007c3a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c2e:	f107 0208 	add.w	r2, r7, #8
 8007c32:	4610      	mov	r0, r2
 8007c34:	4798      	blx	r3
 8007c36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c38:	e029      	b.n	8007c8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f9f3 	bl	8008028 <USBD_CtlError>
        err++;
 8007c42:	7afb      	ldrb	r3, [r7, #11]
 8007c44:	3301      	adds	r3, #1
 8007c46:	72fb      	strb	r3, [r7, #11]
      break;
 8007c48:	e021      	b.n	8007c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	7c1b      	ldrb	r3, [r3, #16]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10d      	bne.n	8007c6e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c5a:	f107 0208 	add.w	r2, r7, #8
 8007c5e:	4610      	mov	r0, r2
 8007c60:	4798      	blx	r3
 8007c62:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	3301      	adds	r3, #1
 8007c68:	2207      	movs	r2, #7
 8007c6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c6c:	e00f      	b.n	8007c8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f9d9 	bl	8008028 <USBD_CtlError>
        err++;
 8007c76:	7afb      	ldrb	r3, [r7, #11]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c7c:	e007      	b.n	8007c8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f9d1 	bl	8008028 <USBD_CtlError>
      err++;
 8007c86:	7afb      	ldrb	r3, [r7, #11]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c8c:	bf00      	nop
  }

  if (err != 0U)
 8007c8e:	7afb      	ldrb	r3, [r7, #11]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d11c      	bne.n	8007cce <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007c94:	893b      	ldrh	r3, [r7, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d011      	beq.n	8007cbe <USBD_GetDescriptor+0x2b6>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	88db      	ldrh	r3, [r3, #6]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00d      	beq.n	8007cbe <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	88da      	ldrh	r2, [r3, #6]
 8007ca6:	893b      	ldrh	r3, [r7, #8]
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	bf28      	it	cs
 8007cac:	4613      	movcs	r3, r2
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cb2:	893b      	ldrh	r3, [r7, #8]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	68f9      	ldr	r1, [r7, #12]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fa1f 	bl	80080fc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	88db      	ldrh	r3, [r3, #6]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d104      	bne.n	8007cd0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fa76 	bl	80081b8 <USBD_CtlSendStatus>
 8007ccc:	e000      	b.n	8007cd0 <USBD_GetDescriptor+0x2c8>
    return;
 8007cce:	bf00      	nop
    }
  }
}
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop

08007cd8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	889b      	ldrh	r3, [r3, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d130      	bne.n	8007d4c <USBD_SetAddress+0x74>
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	88db      	ldrh	r3, [r3, #6]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d12c      	bne.n	8007d4c <USBD_SetAddress+0x74>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	885b      	ldrh	r3, [r3, #2]
 8007cf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007cf8:	d828      	bhi.n	8007d4c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	885b      	ldrh	r3, [r3, #2]
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d104      	bne.n	8007d1a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f988 	bl	8008028 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d18:	e01d      	b.n	8007d56 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	7bfa      	ldrb	r2, [r7, #15]
 8007d1e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fe5f 	bl	80089ea <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fa43 	bl	80081b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d004      	beq.n	8007d42 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d40:	e009      	b.n	8007d56 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4a:	e004      	b.n	8007d56 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f96a 	bl	8008028 <USBD_CtlError>
  }
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	885b      	ldrh	r3, [r3, #2]
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	4b41      	ldr	r3, [pc, #260]	@ (8007e78 <USBD_SetConfig+0x118>)
 8007d72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d74:	4b40      	ldr	r3, [pc, #256]	@ (8007e78 <USBD_SetConfig+0x118>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d904      	bls.n	8007d86 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f952 	bl	8008028 <USBD_CtlError>
 8007d84:	e075      	b.n	8007e72 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d002      	beq.n	8007d96 <USBD_SetConfig+0x36>
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d023      	beq.n	8007ddc <USBD_SetConfig+0x7c>
 8007d94:	e062      	b.n	8007e5c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007d96:	4b38      	ldr	r3, [pc, #224]	@ (8007e78 <USBD_SetConfig+0x118>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d01a      	beq.n	8007dd4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007d9e:	4b36      	ldr	r3, [pc, #216]	@ (8007e78 <USBD_SetConfig+0x118>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2203      	movs	r2, #3
 8007dac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007db0:	4b31      	ldr	r3, [pc, #196]	@ (8007e78 <USBD_SetConfig+0x118>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7ff f9e7 	bl	800718a <USBD_SetClassConfig>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d104      	bne.n	8007dcc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f92f 	bl	8008028 <USBD_CtlError>
            return;
 8007dca:	e052      	b.n	8007e72 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f9f3 	bl	80081b8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007dd2:	e04e      	b.n	8007e72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f9ef 	bl	80081b8 <USBD_CtlSendStatus>
        break;
 8007dda:	e04a      	b.n	8007e72 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ddc:	4b26      	ldr	r3, [pc, #152]	@ (8007e78 <USBD_SetConfig+0x118>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d112      	bne.n	8007e0a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007dec:	4b22      	ldr	r3, [pc, #136]	@ (8007e78 <USBD_SetConfig+0x118>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	461a      	mov	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007df6:	4b20      	ldr	r3, [pc, #128]	@ (8007e78 <USBD_SetConfig+0x118>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7ff f9e3 	bl	80071c8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f9d8 	bl	80081b8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e08:	e033      	b.n	8007e72 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8007e78 <USBD_SetConfig+0x118>)
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d01d      	beq.n	8007e54 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7ff f9d1 	bl	80071c8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007e26:	4b14      	ldr	r3, [pc, #80]	@ (8007e78 <USBD_SetConfig+0x118>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e30:	4b11      	ldr	r3, [pc, #68]	@ (8007e78 <USBD_SetConfig+0x118>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7ff f9a7 	bl	800718a <USBD_SetClassConfig>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d104      	bne.n	8007e4c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f8ef 	bl	8008028 <USBD_CtlError>
            return;
 8007e4a:	e012      	b.n	8007e72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f9b3 	bl	80081b8 <USBD_CtlSendStatus>
        break;
 8007e52:	e00e      	b.n	8007e72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f9af 	bl	80081b8 <USBD_CtlSendStatus>
        break;
 8007e5a:	e00a      	b.n	8007e72 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f8e2 	bl	8008028 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007e64:	4b04      	ldr	r3, [pc, #16]	@ (8007e78 <USBD_SetConfig+0x118>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7ff f9ac 	bl	80071c8 <USBD_ClrClassConfig>
        break;
 8007e70:	bf00      	nop
    }
  }
}
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	20000348 	.word	0x20000348

08007e7c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	88db      	ldrh	r3, [r3, #6]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d004      	beq.n	8007e98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f8c9 	bl	8008028 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e96:	e022      	b.n	8007ede <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	dc02      	bgt.n	8007ea8 <USBD_GetConfig+0x2c>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	dc03      	bgt.n	8007eae <USBD_GetConfig+0x32>
 8007ea6:	e015      	b.n	8007ed4 <USBD_GetConfig+0x58>
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d00b      	beq.n	8007ec4 <USBD_GetConfig+0x48>
 8007eac:	e012      	b.n	8007ed4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3308      	adds	r3, #8
 8007eb8:	2201      	movs	r2, #1
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f91d 	bl	80080fc <USBD_CtlSendData>
        break;
 8007ec2:	e00c      	b.n	8007ede <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	2201      	movs	r2, #1
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f915 	bl	80080fc <USBD_CtlSendData>
        break;
 8007ed2:	e004      	b.n	8007ede <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f8a6 	bl	8008028 <USBD_CtlError>
        break;
 8007edc:	bf00      	nop
}
 8007ede:	bf00      	nop
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b082      	sub	sp, #8
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d81e      	bhi.n	8007f3a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	88db      	ldrh	r3, [r3, #6]
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d004      	beq.n	8007f0e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f88e 	bl	8008028 <USBD_CtlError>
        break;
 8007f0c:	e01a      	b.n	8007f44 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d005      	beq.n	8007f2a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f043 0202 	orr.w	r2, r3, #2
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	330c      	adds	r3, #12
 8007f2e:	2202      	movs	r2, #2
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f8e2 	bl	80080fc <USBD_CtlSendData>
      break;
 8007f38:	e004      	b.n	8007f44 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f873 	bl	8008028 <USBD_CtlError>
      break;
 8007f42:	bf00      	nop
  }
}
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	885b      	ldrh	r3, [r3, #2]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d106      	bne.n	8007f6c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f926 	bl	80081b8 <USBD_CtlSendStatus>
  }
}
 8007f6c:	bf00      	nop
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f84:	3b01      	subs	r3, #1
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d80b      	bhi.n	8007fa2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	885b      	ldrh	r3, [r3, #2]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d10c      	bne.n	8007fac <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f90c 	bl	80081b8 <USBD_CtlSendStatus>
      }
      break;
 8007fa0:	e004      	b.n	8007fac <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f83f 	bl	8008028 <USBD_CtlError>
      break;
 8007faa:	e000      	b.n	8007fae <USBD_ClrFeature+0x3a>
      break;
 8007fac:	bf00      	nop
  }
}
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781a      	ldrb	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	785a      	ldrb	r2, [r3, #1]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	3302      	adds	r3, #2
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	3303      	adds	r3, #3
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	021b      	lsls	r3, r3, #8
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	4413      	add	r3, r2
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	3304      	adds	r3, #4
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	3305      	adds	r3, #5
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	021b      	lsls	r3, r3, #8
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	4413      	add	r3, r2
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	3306      	adds	r3, #6
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	3307      	adds	r3, #7
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	021b      	lsls	r3, r3, #8
 8008014:	b29b      	uxth	r3, r3
 8008016:	4413      	add	r3, r2
 8008018:	b29a      	uxth	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	80da      	strh	r2, [r3, #6]

}
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	bc80      	pop	{r7}
 8008026:	4770      	bx	lr

08008028 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008032:	2180      	movs	r1, #128	@ 0x80
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fc6f 	bl	8008918 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800803a:	2100      	movs	r1, #0
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fc6b 	bl	8008918 <USBD_LL_StallEP>
}
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b086      	sub	sp, #24
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008056:	2300      	movs	r3, #0
 8008058:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d032      	beq.n	80080c6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f000 f834 	bl	80080ce <USBD_GetLen>
 8008066:	4603      	mov	r3, r0
 8008068:	3301      	adds	r3, #1
 800806a:	b29b      	uxth	r3, r3
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	b29a      	uxth	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	75fa      	strb	r2, [r7, #23]
 800807a:	461a      	mov	r2, r3
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	4413      	add	r3, r2
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	7812      	ldrb	r2, [r2, #0]
 8008084:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	75fa      	strb	r2, [r7, #23]
 800808c:	461a      	mov	r2, r3
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	4413      	add	r3, r2
 8008092:	2203      	movs	r2, #3
 8008094:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008096:	e012      	b.n	80080be <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	1c5a      	adds	r2, r3, #1
 800809c:	60fa      	str	r2, [r7, #12]
 800809e:	7dfa      	ldrb	r2, [r7, #23]
 80080a0:	1c51      	adds	r1, r2, #1
 80080a2:	75f9      	strb	r1, [r7, #23]
 80080a4:	4611      	mov	r1, r2
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	440a      	add	r2, r1
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
 80080b0:	1c5a      	adds	r2, r3, #1
 80080b2:	75fa      	strb	r2, [r7, #23]
 80080b4:	461a      	mov	r2, r3
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	4413      	add	r3, r2
 80080ba:	2200      	movs	r2, #0
 80080bc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1e8      	bne.n	8008098 <USBD_GetString+0x4e>
    }
  }
}
 80080c6:	bf00      	nop
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b085      	sub	sp, #20
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80080da:	e005      	b.n	80080e8 <USBD_GetLen+0x1a>
  {
    len++;
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	3301      	adds	r3, #1
 80080e0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3301      	adds	r3, #1
 80080e6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1f5      	bne.n	80080dc <USBD_GetLen+0xe>
  }

  return len;
 80080f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bc80      	pop	{r7}
 80080fa:	4770      	bx	lr

080080fc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	4613      	mov	r3, r2
 8008108:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2202      	movs	r2, #2
 800810e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008112:	88fa      	ldrh	r2, [r7, #6]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008118:	88fa      	ldrh	r2, [r7, #6]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800811e:	88fb      	ldrh	r3, [r7, #6]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	2100      	movs	r1, #0
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 fc7f 	bl	8008a28 <USBD_LL_Transmit>

  return USBD_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4613      	mov	r3, r2
 8008140:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008142:	88fb      	ldrh	r3, [r7, #6]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	2100      	movs	r1, #0
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f000 fc6d 	bl	8008a28 <USBD_LL_Transmit>

  return USBD_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	4613      	mov	r3, r2
 8008164:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2203      	movs	r2, #3
 800816a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800816e:	88fa      	ldrh	r2, [r7, #6]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008176:	88fa      	ldrh	r2, [r7, #6]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800817e:	88fb      	ldrh	r3, [r7, #6]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	2100      	movs	r1, #0
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 fc72 	bl	8008a6e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	4613      	mov	r3, r2
 80081a0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081a2:	88fb      	ldrh	r3, [r7, #6]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	2100      	movs	r1, #0
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 fc60 	bl	8008a6e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2204      	movs	r2, #4
 80081c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081c8:	2300      	movs	r3, #0
 80081ca:	2200      	movs	r2, #0
 80081cc:	2100      	movs	r1, #0
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fc2a 	bl	8008a28 <USBD_LL_Transmit>

  return USBD_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2205      	movs	r2, #5
 80081ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081ee:	2300      	movs	r3, #0
 80081f0:	2200      	movs	r2, #0
 80081f2:	2100      	movs	r1, #0
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fc3a 	bl	8008a6e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008208:	2200      	movs	r2, #0
 800820a:	4912      	ldr	r1, [pc, #72]	@ (8008254 <MX_USB_DEVICE_Init+0x50>)
 800820c:	4812      	ldr	r0, [pc, #72]	@ (8008258 <MX_USB_DEVICE_Init+0x54>)
 800820e:	f7fe ff62 	bl	80070d6 <USBD_Init>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008218:	f7f8 f9a1 	bl	800055e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800821c:	490f      	ldr	r1, [pc, #60]	@ (800825c <MX_USB_DEVICE_Init+0x58>)
 800821e:	480e      	ldr	r0, [pc, #56]	@ (8008258 <MX_USB_DEVICE_Init+0x54>)
 8008220:	f7fe ff84 	bl	800712c <USBD_RegisterClass>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800822a:	f7f8 f998 	bl	800055e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800822e:	490c      	ldr	r1, [pc, #48]	@ (8008260 <MX_USB_DEVICE_Init+0x5c>)
 8008230:	4809      	ldr	r0, [pc, #36]	@ (8008258 <MX_USB_DEVICE_Init+0x54>)
 8008232:	f7fe feb5 	bl	8006fa0 <USBD_CDC_RegisterInterface>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800823c:	f7f8 f98f 	bl	800055e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008240:	4805      	ldr	r0, [pc, #20]	@ (8008258 <MX_USB_DEVICE_Init+0x54>)
 8008242:	f7fe ff8c 	bl	800715e <USBD_Start>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800824c:	f7f8 f987 	bl	800055e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008250:	bf00      	nop
 8008252:	bd80      	pop	{r7, pc}
 8008254:	2000012c 	.word	0x2000012c
 8008258:	2000034c 	.word	0x2000034c
 800825c:	20000018 	.word	0x20000018
 8008260:	2000011c 	.word	0x2000011c

08008264 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008268:	2200      	movs	r2, #0
 800826a:	4905      	ldr	r1, [pc, #20]	@ (8008280 <CDC_Init_FS+0x1c>)
 800826c:	4805      	ldr	r0, [pc, #20]	@ (8008284 <CDC_Init_FS+0x20>)
 800826e:	f7fe fead 	bl	8006fcc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008272:	4905      	ldr	r1, [pc, #20]	@ (8008288 <CDC_Init_FS+0x24>)
 8008274:	4803      	ldr	r0, [pc, #12]	@ (8008284 <CDC_Init_FS+0x20>)
 8008276:	f7fe fec2 	bl	8006ffe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800827a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800827c:	4618      	mov	r0, r3
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20000a10 	.word	0x20000a10
 8008284:	2000034c 	.word	0x2000034c
 8008288:	20000610 	.word	0x20000610

0800828c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008290:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008292:	4618      	mov	r0, r3
 8008294:	46bd      	mov	sp, r7
 8008296:	bc80      	pop	{r7}
 8008298:	4770      	bx	lr
	...

0800829c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	6039      	str	r1, [r7, #0]
 80082a6:	71fb      	strb	r3, [r7, #7]
 80082a8:	4613      	mov	r3, r2
 80082aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	2b23      	cmp	r3, #35	@ 0x23
 80082b0:	d84a      	bhi.n	8008348 <CDC_Control_FS+0xac>
 80082b2:	a201      	add	r2, pc, #4	@ (adr r2, 80082b8 <CDC_Control_FS+0x1c>)
 80082b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b8:	08008349 	.word	0x08008349
 80082bc:	08008349 	.word	0x08008349
 80082c0:	08008349 	.word	0x08008349
 80082c4:	08008349 	.word	0x08008349
 80082c8:	08008349 	.word	0x08008349
 80082cc:	08008349 	.word	0x08008349
 80082d0:	08008349 	.word	0x08008349
 80082d4:	08008349 	.word	0x08008349
 80082d8:	08008349 	.word	0x08008349
 80082dc:	08008349 	.word	0x08008349
 80082e0:	08008349 	.word	0x08008349
 80082e4:	08008349 	.word	0x08008349
 80082e8:	08008349 	.word	0x08008349
 80082ec:	08008349 	.word	0x08008349
 80082f0:	08008349 	.word	0x08008349
 80082f4:	08008349 	.word	0x08008349
 80082f8:	08008349 	.word	0x08008349
 80082fc:	08008349 	.word	0x08008349
 8008300:	08008349 	.word	0x08008349
 8008304:	08008349 	.word	0x08008349
 8008308:	08008349 	.word	0x08008349
 800830c:	08008349 	.word	0x08008349
 8008310:	08008349 	.word	0x08008349
 8008314:	08008349 	.word	0x08008349
 8008318:	08008349 	.word	0x08008349
 800831c:	08008349 	.word	0x08008349
 8008320:	08008349 	.word	0x08008349
 8008324:	08008349 	.word	0x08008349
 8008328:	08008349 	.word	0x08008349
 800832c:	08008349 	.word	0x08008349
 8008330:	08008349 	.word	0x08008349
 8008334:	08008349 	.word	0x08008349
 8008338:	08008349 	.word	0x08008349
 800833c:	08008349 	.word	0x08008349
 8008340:	08008349 	.word	0x08008349
 8008344:	08008349 	.word	0x08008349
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008348:	bf00      	nop
  }

  return (USBD_OK);
 800834a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	bc80      	pop	{r7}
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop

08008358 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_Transmit_FS("received!", 10);
 8008362:	210a      	movs	r1, #10
 8008364:	4811      	ldr	r0, [pc, #68]	@ (80083ac <CDC_Receive_FS+0x54>)
 8008366:	f000 f827 	bl	80083b8 <CDC_Transmit_FS>
	memset (usb_rx_buffer, '\0', 32);  // clear the buffer
 800836a:	2220      	movs	r2, #32
 800836c:	2100      	movs	r1, #0
 800836e:	4810      	ldr	r0, [pc, #64]	@ (80083b0 <CDC_Receive_FS+0x58>)
 8008370:	f000 fc20 	bl	8008bb4 <memset>
	uint8_t len = (uint8_t)*Len;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	73fb      	strb	r3, [r7, #15]
	memcpy(usb_rx_buffer, Buf, len);  // copy the data to the buffer
 800837a:	7bfb      	ldrb	r3, [r7, #15]
 800837c:	461a      	mov	r2, r3
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	480b      	ldr	r0, [pc, #44]	@ (80083b0 <CDC_Receive_FS+0x58>)
 8008382:	f000 fc4b 	bl	8008c1c <memcpy>
	memset(Buf, '\0', len);
 8008386:	7bfb      	ldrb	r3, [r7, #15]
 8008388:	461a      	mov	r2, r3
 800838a:	2100      	movs	r1, #0
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fc11 	bl	8008bb4 <memset>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008392:	6879      	ldr	r1, [r7, #4]
 8008394:	4807      	ldr	r0, [pc, #28]	@ (80083b4 <CDC_Receive_FS+0x5c>)
 8008396:	f7fe fe32 	bl	8006ffe <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800839a:	4806      	ldr	r0, [pc, #24]	@ (80083b4 <CDC_Receive_FS+0x5c>)
 800839c:	f7fe fe71 	bl	8007082 <USBD_CDC_ReceivePacket>
    // clear the Buf also
    return (USBD_OK);
 80083a0:	2300      	movs	r3, #0
    /* USER CODE END 6 */
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	080094fc 	.word	0x080094fc
 80083b0:	200002d8 	.word	0x200002d8
 80083b4:	2000034c 	.word	0x2000034c

080083b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80083c8:	4b0d      	ldr	r3, [pc, #52]	@ (8008400 <CDC_Transmit_FS+0x48>)
 80083ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80083da:	2301      	movs	r3, #1
 80083dc:	e00b      	b.n	80083f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80083de:	887b      	ldrh	r3, [r7, #2]
 80083e0:	461a      	mov	r2, r3
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	4806      	ldr	r0, [pc, #24]	@ (8008400 <CDC_Transmit_FS+0x48>)
 80083e6:	f7fe fdf1 	bl	8006fcc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80083ea:	4805      	ldr	r0, [pc, #20]	@ (8008400 <CDC_Transmit_FS+0x48>)
 80083ec:	f7fe fe1a 	bl	8007024 <USBD_CDC_TransmitPacket>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	2000034c 	.word	0x2000034c

08008404 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	4603      	mov	r3, r0
 800840c:	6039      	str	r1, [r7, #0]
 800840e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2212      	movs	r2, #18
 8008414:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008416:	4b03      	ldr	r3, [pc, #12]	@ (8008424 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	bc80      	pop	{r7}
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	20000148 	.word	0x20000148

08008428 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	6039      	str	r1, [r7, #0]
 8008432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2204      	movs	r2, #4
 8008438:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800843a:	4b03      	ldr	r3, [pc, #12]	@ (8008448 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	bc80      	pop	{r7}
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	2000015c 	.word	0x2000015c

0800844c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	6039      	str	r1, [r7, #0]
 8008456:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d105      	bne.n	800846a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	4907      	ldr	r1, [pc, #28]	@ (8008480 <USBD_FS_ProductStrDescriptor+0x34>)
 8008462:	4808      	ldr	r0, [pc, #32]	@ (8008484 <USBD_FS_ProductStrDescriptor+0x38>)
 8008464:	f7ff fdf1 	bl	800804a <USBD_GetString>
 8008468:	e004      	b.n	8008474 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	4904      	ldr	r1, [pc, #16]	@ (8008480 <USBD_FS_ProductStrDescriptor+0x34>)
 800846e:	4805      	ldr	r0, [pc, #20]	@ (8008484 <USBD_FS_ProductStrDescriptor+0x38>)
 8008470:	f7ff fdeb 	bl	800804a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008474:	4b02      	ldr	r3, [pc, #8]	@ (8008480 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	20000e10 	.word	0x20000e10
 8008484:	08009508 	.word	0x08009508

08008488 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	6039      	str	r1, [r7, #0]
 8008492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	4904      	ldr	r1, [pc, #16]	@ (80084a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008498:	4804      	ldr	r0, [pc, #16]	@ (80084ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800849a:	f7ff fdd6 	bl	800804a <USBD_GetString>
  return USBD_StrDesc;
 800849e:	4b02      	ldr	r3, [pc, #8]	@ (80084a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	20000e10 	.word	0x20000e10
 80084ac:	08009520 	.word	0x08009520

080084b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	4603      	mov	r3, r0
 80084b8:	6039      	str	r1, [r7, #0]
 80084ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	221a      	movs	r2, #26
 80084c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084c2:	f000 f843 	bl	800854c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084c6:	4b02      	ldr	r3, [pc, #8]	@ (80084d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	20000160 	.word	0x20000160

080084d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	4603      	mov	r3, r0
 80084dc:	6039      	str	r1, [r7, #0]
 80084de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084e0:	79fb      	ldrb	r3, [r7, #7]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d105      	bne.n	80084f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	4907      	ldr	r1, [pc, #28]	@ (8008508 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084ea:	4808      	ldr	r0, [pc, #32]	@ (800850c <USBD_FS_ConfigStrDescriptor+0x38>)
 80084ec:	f7ff fdad 	bl	800804a <USBD_GetString>
 80084f0:	e004      	b.n	80084fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	4904      	ldr	r1, [pc, #16]	@ (8008508 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084f6:	4805      	ldr	r0, [pc, #20]	@ (800850c <USBD_FS_ConfigStrDescriptor+0x38>)
 80084f8:	f7ff fda7 	bl	800804a <USBD_GetString>
  }
  return USBD_StrDesc;
 80084fc:	4b02      	ldr	r3, [pc, #8]	@ (8008508 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20000e10 	.word	0x20000e10
 800850c:	08009534 	.word	0x08009534

08008510 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	4603      	mov	r3, r0
 8008518:	6039      	str	r1, [r7, #0]
 800851a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800851c:	79fb      	ldrb	r3, [r7, #7]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d105      	bne.n	800852e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	4907      	ldr	r1, [pc, #28]	@ (8008544 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008526:	4808      	ldr	r0, [pc, #32]	@ (8008548 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008528:	f7ff fd8f 	bl	800804a <USBD_GetString>
 800852c:	e004      	b.n	8008538 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	4904      	ldr	r1, [pc, #16]	@ (8008544 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008532:	4805      	ldr	r0, [pc, #20]	@ (8008548 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008534:	f7ff fd89 	bl	800804a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008538:	4b02      	ldr	r3, [pc, #8]	@ (8008544 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20000e10 	.word	0x20000e10
 8008548:	08009540 	.word	0x08009540

0800854c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008552:	4b0f      	ldr	r3, [pc, #60]	@ (8008590 <Get_SerialNum+0x44>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008558:	4b0e      	ldr	r3, [pc, #56]	@ (8008594 <Get_SerialNum+0x48>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800855e:	4b0e      	ldr	r3, [pc, #56]	@ (8008598 <Get_SerialNum+0x4c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4413      	add	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d009      	beq.n	8008586 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008572:	2208      	movs	r2, #8
 8008574:	4909      	ldr	r1, [pc, #36]	@ (800859c <Get_SerialNum+0x50>)
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 f814 	bl	80085a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800857c:	2204      	movs	r2, #4
 800857e:	4908      	ldr	r1, [pc, #32]	@ (80085a0 <Get_SerialNum+0x54>)
 8008580:	68b8      	ldr	r0, [r7, #8]
 8008582:	f000 f80f 	bl	80085a4 <IntToUnicode>
  }
}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	1ffff7e8 	.word	0x1ffff7e8
 8008594:	1ffff7ec 	.word	0x1ffff7ec
 8008598:	1ffff7f0 	.word	0x1ffff7f0
 800859c:	20000162 	.word	0x20000162
 80085a0:	20000172 	.word	0x20000172

080085a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	4613      	mov	r3, r2
 80085b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085b6:	2300      	movs	r3, #0
 80085b8:	75fb      	strb	r3, [r7, #23]
 80085ba:	e027      	b.n	800860c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	0f1b      	lsrs	r3, r3, #28
 80085c0:	2b09      	cmp	r3, #9
 80085c2:	d80b      	bhi.n	80085dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	0f1b      	lsrs	r3, r3, #28
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	4619      	mov	r1, r3
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	440b      	add	r3, r1
 80085d4:	3230      	adds	r2, #48	@ 0x30
 80085d6:	b2d2      	uxtb	r2, r2
 80085d8:	701a      	strb	r2, [r3, #0]
 80085da:	e00a      	b.n	80085f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	0f1b      	lsrs	r3, r3, #28
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	7dfb      	ldrb	r3, [r7, #23]
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	4619      	mov	r1, r3
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	440b      	add	r3, r1
 80085ec:	3237      	adds	r2, #55	@ 0x37
 80085ee:	b2d2      	uxtb	r2, r2
 80085f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	011b      	lsls	r3, r3, #4
 80085f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	3301      	adds	r3, #1
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	4413      	add	r3, r2
 8008602:	2200      	movs	r2, #0
 8008604:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008606:	7dfb      	ldrb	r3, [r7, #23]
 8008608:	3301      	adds	r3, #1
 800860a:	75fb      	strb	r3, [r7, #23]
 800860c:	7dfa      	ldrb	r2, [r7, #23]
 800860e:	79fb      	ldrb	r3, [r7, #7]
 8008610:	429a      	cmp	r2, r3
 8008612:	d3d3      	bcc.n	80085bc <IntToUnicode+0x18>
  }
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	371c      	adds	r7, #28
 800861a:	46bd      	mov	sp, r7
 800861c:	bc80      	pop	{r7}
 800861e:	4770      	bx	lr

08008620 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a0d      	ldr	r2, [pc, #52]	@ (8008664 <HAL_PCD_MspInit+0x44>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d113      	bne.n	800865a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008632:	4b0d      	ldr	r3, [pc, #52]	@ (8008668 <HAL_PCD_MspInit+0x48>)
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	4a0c      	ldr	r2, [pc, #48]	@ (8008668 <HAL_PCD_MspInit+0x48>)
 8008638:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800863c:	61d3      	str	r3, [r2, #28]
 800863e:	4b0a      	ldr	r3, [pc, #40]	@ (8008668 <HAL_PCD_MspInit+0x48>)
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800864a:	2200      	movs	r2, #0
 800864c:	2100      	movs	r1, #0
 800864e:	2014      	movs	r0, #20
 8008650:	f7f8 faa5 	bl	8000b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008654:	2014      	movs	r0, #20
 8008656:	f7f8 fabe 	bl	8000bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	40005c00 	.word	0x40005c00
 8008668:	40021000 	.word	0x40021000

0800866c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008680:	4619      	mov	r1, r3
 8008682:	4610      	mov	r0, r2
 8008684:	f7fe fdb3 	bl	80071ee <USBD_LL_SetupStage>
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80086a2:	78fa      	ldrb	r2, [r7, #3]
 80086a4:	6879      	ldr	r1, [r7, #4]
 80086a6:	4613      	mov	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	00db      	lsls	r3, r3, #3
 80086ae:	440b      	add	r3, r1
 80086b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	78fb      	ldrb	r3, [r7, #3]
 80086b8:	4619      	mov	r1, r3
 80086ba:	f7fe fde5 	bl	8007288 <USBD_LL_DataOutStage>
}
 80086be:	bf00      	nop
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	460b      	mov	r3, r1
 80086d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80086d8:	78fa      	ldrb	r2, [r7, #3]
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	4613      	mov	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	440b      	add	r3, r1
 80086e6:	3324      	adds	r3, #36	@ 0x24
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	78fb      	ldrb	r3, [r7, #3]
 80086ec:	4619      	mov	r1, r3
 80086ee:	f7fe fe3c 	bl	800736a <USBD_LL_DataInStage>
}
 80086f2:	bf00      	nop
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b082      	sub	sp, #8
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008708:	4618      	mov	r0, r3
 800870a:	f7fe ff4c 	bl	80075a6 <USBD_LL_SOF>
}
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b084      	sub	sp, #16
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800871e:	2301      	movs	r3, #1
 8008720:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	799b      	ldrb	r3, [r3, #6]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d001      	beq.n	800872e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800872a:	f7f7 ff18 	bl	800055e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008734:	7bfa      	ldrb	r2, [r7, #15]
 8008736:	4611      	mov	r1, r2
 8008738:	4618      	mov	r0, r3
 800873a:	f7fe fefc 	bl	8007536 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008744:	4618      	mov	r0, r3
 8008746:	f7fe feb5 	bl	80074b4 <USBD_LL_Reset>
}
 800874a:	bf00      	nop
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008762:	4618      	mov	r0, r3
 8008764:	f7fe fef6 	bl	8007554 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	7a9b      	ldrb	r3, [r3, #10]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d005      	beq.n	800877c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008770:	4b04      	ldr	r3, [pc, #16]	@ (8008784 <HAL_PCD_SuspendCallback+0x30>)
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	4a03      	ldr	r2, [pc, #12]	@ (8008784 <HAL_PCD_SuspendCallback+0x30>)
 8008776:	f043 0306 	orr.w	r3, r3, #6
 800877a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800877c:	bf00      	nop
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	e000ed00 	.word	0xe000ed00

08008788 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008796:	4618      	mov	r0, r3
 8008798:	f7fe fef0 	bl	800757c <USBD_LL_Resume>
}
 800879c:	bf00      	nop
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80087ac:	4a28      	ldr	r2, [pc, #160]	@ (8008850 <USBD_LL_Init+0xac>)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a26      	ldr	r2, [pc, #152]	@ (8008850 <USBD_LL_Init+0xac>)
 80087b8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80087bc:	4b24      	ldr	r3, [pc, #144]	@ (8008850 <USBD_LL_Init+0xac>)
 80087be:	4a25      	ldr	r2, [pc, #148]	@ (8008854 <USBD_LL_Init+0xb0>)
 80087c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80087c2:	4b23      	ldr	r3, [pc, #140]	@ (8008850 <USBD_LL_Init+0xac>)
 80087c4:	2208      	movs	r2, #8
 80087c6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80087c8:	4b21      	ldr	r3, [pc, #132]	@ (8008850 <USBD_LL_Init+0xac>)
 80087ca:	2202      	movs	r2, #2
 80087cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80087ce:	4b20      	ldr	r3, [pc, #128]	@ (8008850 <USBD_LL_Init+0xac>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80087d4:	4b1e      	ldr	r3, [pc, #120]	@ (8008850 <USBD_LL_Init+0xac>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80087da:	4b1d      	ldr	r3, [pc, #116]	@ (8008850 <USBD_LL_Init+0xac>)
 80087dc:	2200      	movs	r2, #0
 80087de:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80087e0:	481b      	ldr	r0, [pc, #108]	@ (8008850 <USBD_LL_Init+0xac>)
 80087e2:	f7f8 fce7 	bl	80011b4 <HAL_PCD_Init>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80087ec:	f7f7 feb7 	bl	800055e <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80087f6:	2318      	movs	r3, #24
 80087f8:	2200      	movs	r2, #0
 80087fa:	2100      	movs	r1, #0
 80087fc:	f7fa f9f8 	bl	8002bf0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008806:	2358      	movs	r3, #88	@ 0x58
 8008808:	2200      	movs	r2, #0
 800880a:	2180      	movs	r1, #128	@ 0x80
 800880c:	f7fa f9f0 	bl	8002bf0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008816:	23c0      	movs	r3, #192	@ 0xc0
 8008818:	2200      	movs	r2, #0
 800881a:	2181      	movs	r1, #129	@ 0x81
 800881c:	f7fa f9e8 	bl	8002bf0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008826:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800882a:	2200      	movs	r2, #0
 800882c:	2101      	movs	r1, #1
 800882e:	f7fa f9df 	bl	8002bf0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008838:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800883c:	2200      	movs	r2, #0
 800883e:	2182      	movs	r1, #130	@ 0x82
 8008840:	f7fa f9d6 	bl	8002bf0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	20001010 	.word	0x20001010
 8008854:	40005c00 	.word	0x40005c00

08008858 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800886e:	4618      	mov	r0, r3
 8008870:	f7f8 fd96 	bl	80013a0 <HAL_PCD_Start>
 8008874:	4603      	mov	r3, r0
 8008876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	4618      	mov	r0, r3
 800887c:	f000 f94e 	bl	8008b1c <USBD_Get_USB_Status>
 8008880:	4603      	mov	r3, r0
 8008882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008884:	7bbb      	ldrb	r3, [r7, #14]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	4608      	mov	r0, r1
 8008898:	4611      	mov	r1, r2
 800889a:	461a      	mov	r2, r3
 800889c:	4603      	mov	r3, r0
 800889e:	70fb      	strb	r3, [r7, #3]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70bb      	strb	r3, [r7, #2]
 80088a4:	4613      	mov	r3, r2
 80088a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80088b6:	78bb      	ldrb	r3, [r7, #2]
 80088b8:	883a      	ldrh	r2, [r7, #0]
 80088ba:	78f9      	ldrb	r1, [r7, #3]
 80088bc:	f7f8 feea 	bl	8001694 <HAL_PCD_EP_Open>
 80088c0:	4603      	mov	r3, r0
 80088c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 f928 	bl	8008b1c <USBD_Get_USB_Status>
 80088cc:	4603      	mov	r3, r0
 80088ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	460b      	mov	r3, r1
 80088e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80088f4:	78fa      	ldrb	r2, [r7, #3]
 80088f6:	4611      	mov	r1, r2
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7f8 ff28 	bl	800174e <HAL_PCD_EP_Close>
 80088fe:	4603      	mov	r3, r0
 8008900:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008902:	7bfb      	ldrb	r3, [r7, #15]
 8008904:	4618      	mov	r0, r3
 8008906:	f000 f909 	bl	8008b1c <USBD_Get_USB_Status>
 800890a:	4603      	mov	r3, r0
 800890c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800890e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008932:	78fa      	ldrb	r2, [r7, #3]
 8008934:	4611      	mov	r1, r2
 8008936:	4618      	mov	r0, r3
 8008938:	f7f8 ffd0 	bl	80018dc <HAL_PCD_EP_SetStall>
 800893c:	4603      	mov	r3, r0
 800893e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008940:	7bfb      	ldrb	r3, [r7, #15]
 8008942:	4618      	mov	r0, r3
 8008944:	f000 f8ea 	bl	8008b1c <USBD_Get_USB_Status>
 8008948:	4603      	mov	r3, r0
 800894a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800894c:	7bbb      	ldrb	r3, [r7, #14]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	460b      	mov	r3, r1
 8008960:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008970:	78fa      	ldrb	r2, [r7, #3]
 8008972:	4611      	mov	r1, r2
 8008974:	4618      	mov	r0, r3
 8008976:	f7f9 f811 	bl	800199c <HAL_PCD_EP_ClrStall>
 800897a:	4603      	mov	r3, r0
 800897c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800897e:	7bfb      	ldrb	r3, [r7, #15]
 8008980:	4618      	mov	r0, r3
 8008982:	f000 f8cb 	bl	8008b1c <USBD_Get_USB_Status>
 8008986:	4603      	mov	r3, r0
 8008988:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800898a:	7bbb      	ldrb	r3, [r7, #14]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80089a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	da0b      	bge.n	80089c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089b0:	78fb      	ldrb	r3, [r7, #3]
 80089b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089b6:	68f9      	ldr	r1, [r7, #12]
 80089b8:	4613      	mov	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4413      	add	r3, r2
 80089be:	00db      	lsls	r3, r3, #3
 80089c0:	440b      	add	r3, r1
 80089c2:	3312      	adds	r3, #18
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	e00b      	b.n	80089e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089c8:	78fb      	ldrb	r3, [r7, #3]
 80089ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089ce:	68f9      	ldr	r1, [r7, #12]
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	00db      	lsls	r3, r3, #3
 80089d8:	440b      	add	r3, r1
 80089da:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80089de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bc80      	pop	{r7}
 80089e8:	4770      	bx	lr

080089ea <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	460b      	mov	r3, r1
 80089f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a04:	78fa      	ldrb	r2, [r7, #3]
 8008a06:	4611      	mov	r1, r2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7f8 fe1f 	bl	800164c <HAL_PCD_SetAddress>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 f881 	bl	8008b1c <USBD_Get_USB_Status>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	607a      	str	r2, [r7, #4]
 8008a32:	461a      	mov	r2, r3
 8008a34:	460b      	mov	r3, r1
 8008a36:	72fb      	strb	r3, [r7, #11]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a4a:	893b      	ldrh	r3, [r7, #8]
 8008a4c:	7af9      	ldrb	r1, [r7, #11]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	f7f8 ff0d 	bl	800186e <HAL_PCD_EP_Transmit>
 8008a54:	4603      	mov	r3, r0
 8008a56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a58:	7dfb      	ldrb	r3, [r7, #23]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 f85e 	bl	8008b1c <USBD_Get_USB_Status>
 8008a60:	4603      	mov	r3, r0
 8008a62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a64:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3718      	adds	r7, #24
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b086      	sub	sp, #24
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	607a      	str	r2, [r7, #4]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	72fb      	strb	r3, [r7, #11]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a90:	893b      	ldrh	r3, [r7, #8]
 8008a92:	7af9      	ldrb	r1, [r7, #11]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	f7f8 fea2 	bl	80017de <HAL_PCD_EP_Receive>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a9e:	7dfb      	ldrb	r3, [r7, #23]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 f83b 	bl	8008b1c <USBD_Get_USB_Status>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008aaa:	7dbb      	ldrb	r3, [r7, #22]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ac6:	78fa      	ldrb	r2, [r7, #3]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7f8 feb8 	bl	8001840 <HAL_PCD_EP_GetRxCount>
 8008ad0:	4603      	mov	r3, r0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
	...

08008adc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ae4:	4b02      	ldr	r3, [pc, #8]	@ (8008af0 <USBD_static_malloc+0x14>)
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bc80      	pop	{r7}
 8008aee:	4770      	bx	lr
 8008af0:	200012e8 	.word	0x200012e8

08008af4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]

}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bc80      	pop	{r7}
 8008b04:	4770      	bx	lr

08008b06 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b06:	b480      	push	{r7}
 8008b08:	b083      	sub	sp, #12
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008b12:	bf00      	nop
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bc80      	pop	{r7}
 8008b1a:	4770      	bx	lr

08008b1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d817      	bhi.n	8008b60 <USBD_Get_USB_Status+0x44>
 8008b30:	a201      	add	r2, pc, #4	@ (adr r2, 8008b38 <USBD_Get_USB_Status+0x1c>)
 8008b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b36:	bf00      	nop
 8008b38:	08008b49 	.word	0x08008b49
 8008b3c:	08008b4f 	.word	0x08008b4f
 8008b40:	08008b55 	.word	0x08008b55
 8008b44:	08008b5b 	.word	0x08008b5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4c:	e00b      	b.n	8008b66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b4e:	2302      	movs	r3, #2
 8008b50:	73fb      	strb	r3, [r7, #15]
    break;
 8008b52:	e008      	b.n	8008b66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b54:	2301      	movs	r3, #1
 8008b56:	73fb      	strb	r3, [r7, #15]
    break;
 8008b58:	e005      	b.n	8008b66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5e:	e002      	b.n	8008b66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b60:	2302      	movs	r3, #2
 8008b62:	73fb      	strb	r3, [r7, #15]
    break;
 8008b64:	bf00      	nop
  }
  return usb_status;
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bc80      	pop	{r7}
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop

08008b74 <siprintf>:
 8008b74:	b40e      	push	{r1, r2, r3}
 8008b76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008b7a:	b500      	push	{lr}
 8008b7c:	b09c      	sub	sp, #112	@ 0x70
 8008b7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008b80:	9002      	str	r0, [sp, #8]
 8008b82:	9006      	str	r0, [sp, #24]
 8008b84:	9107      	str	r1, [sp, #28]
 8008b86:	9104      	str	r1, [sp, #16]
 8008b88:	4808      	ldr	r0, [pc, #32]	@ (8008bac <siprintf+0x38>)
 8008b8a:	4909      	ldr	r1, [pc, #36]	@ (8008bb0 <siprintf+0x3c>)
 8008b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b90:	9105      	str	r1, [sp, #20]
 8008b92:	6800      	ldr	r0, [r0, #0]
 8008b94:	a902      	add	r1, sp, #8
 8008b96:	9301      	str	r3, [sp, #4]
 8008b98:	f000 f9a0 	bl	8008edc <_svfiprintf_r>
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	9b02      	ldr	r3, [sp, #8]
 8008ba0:	701a      	strb	r2, [r3, #0]
 8008ba2:	b01c      	add	sp, #112	@ 0x70
 8008ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ba8:	b003      	add	sp, #12
 8008baa:	4770      	bx	lr
 8008bac:	2000017c 	.word	0x2000017c
 8008bb0:	ffff0208 	.word	0xffff0208

08008bb4 <memset>:
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	4402      	add	r2, r0
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d100      	bne.n	8008bbe <memset+0xa>
 8008bbc:	4770      	bx	lr
 8008bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008bc2:	e7f9      	b.n	8008bb8 <memset+0x4>

08008bc4 <__errno>:
 8008bc4:	4b01      	ldr	r3, [pc, #4]	@ (8008bcc <__errno+0x8>)
 8008bc6:	6818      	ldr	r0, [r3, #0]
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	2000017c 	.word	0x2000017c

08008bd0 <__libc_init_array>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	2600      	movs	r6, #0
 8008bd4:	4d0c      	ldr	r5, [pc, #48]	@ (8008c08 <__libc_init_array+0x38>)
 8008bd6:	4c0d      	ldr	r4, [pc, #52]	@ (8008c0c <__libc_init_array+0x3c>)
 8008bd8:	1b64      	subs	r4, r4, r5
 8008bda:	10a4      	asrs	r4, r4, #2
 8008bdc:	42a6      	cmp	r6, r4
 8008bde:	d109      	bne.n	8008bf4 <__libc_init_array+0x24>
 8008be0:	f000 fc78 	bl	80094d4 <_init>
 8008be4:	2600      	movs	r6, #0
 8008be6:	4d0a      	ldr	r5, [pc, #40]	@ (8008c10 <__libc_init_array+0x40>)
 8008be8:	4c0a      	ldr	r4, [pc, #40]	@ (8008c14 <__libc_init_array+0x44>)
 8008bea:	1b64      	subs	r4, r4, r5
 8008bec:	10a4      	asrs	r4, r4, #2
 8008bee:	42a6      	cmp	r6, r4
 8008bf0:	d105      	bne.n	8008bfe <__libc_init_array+0x2e>
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
 8008bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf8:	4798      	blx	r3
 8008bfa:	3601      	adds	r6, #1
 8008bfc:	e7ee      	b.n	8008bdc <__libc_init_array+0xc>
 8008bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c02:	4798      	blx	r3
 8008c04:	3601      	adds	r6, #1
 8008c06:	e7f2      	b.n	8008bee <__libc_init_array+0x1e>
 8008c08:	080095b8 	.word	0x080095b8
 8008c0c:	080095b8 	.word	0x080095b8
 8008c10:	080095b8 	.word	0x080095b8
 8008c14:	080095bc 	.word	0x080095bc

08008c18 <__retarget_lock_acquire_recursive>:
 8008c18:	4770      	bx	lr

08008c1a <__retarget_lock_release_recursive>:
 8008c1a:	4770      	bx	lr

08008c1c <memcpy>:
 8008c1c:	440a      	add	r2, r1
 8008c1e:	4291      	cmp	r1, r2
 8008c20:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c24:	d100      	bne.n	8008c28 <memcpy+0xc>
 8008c26:	4770      	bx	lr
 8008c28:	b510      	push	{r4, lr}
 8008c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c2e:	4291      	cmp	r1, r2
 8008c30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c34:	d1f9      	bne.n	8008c2a <memcpy+0xe>
 8008c36:	bd10      	pop	{r4, pc}

08008c38 <_free_r>:
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	2900      	cmp	r1, #0
 8008c3e:	d040      	beq.n	8008cc2 <_free_r+0x8a>
 8008c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c44:	1f0c      	subs	r4, r1, #4
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	bfb8      	it	lt
 8008c4a:	18e4      	addlt	r4, r4, r3
 8008c4c:	f000 f8de 	bl	8008e0c <__malloc_lock>
 8008c50:	4a1c      	ldr	r2, [pc, #112]	@ (8008cc4 <_free_r+0x8c>)
 8008c52:	6813      	ldr	r3, [r2, #0]
 8008c54:	b933      	cbnz	r3, 8008c64 <_free_r+0x2c>
 8008c56:	6063      	str	r3, [r4, #4]
 8008c58:	6014      	str	r4, [r2, #0]
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c60:	f000 b8da 	b.w	8008e18 <__malloc_unlock>
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	d908      	bls.n	8008c7a <_free_r+0x42>
 8008c68:	6820      	ldr	r0, [r4, #0]
 8008c6a:	1821      	adds	r1, r4, r0
 8008c6c:	428b      	cmp	r3, r1
 8008c6e:	bf01      	itttt	eq
 8008c70:	6819      	ldreq	r1, [r3, #0]
 8008c72:	685b      	ldreq	r3, [r3, #4]
 8008c74:	1809      	addeq	r1, r1, r0
 8008c76:	6021      	streq	r1, [r4, #0]
 8008c78:	e7ed      	b.n	8008c56 <_free_r+0x1e>
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	b10b      	cbz	r3, 8008c84 <_free_r+0x4c>
 8008c80:	42a3      	cmp	r3, r4
 8008c82:	d9fa      	bls.n	8008c7a <_free_r+0x42>
 8008c84:	6811      	ldr	r1, [r2, #0]
 8008c86:	1850      	adds	r0, r2, r1
 8008c88:	42a0      	cmp	r0, r4
 8008c8a:	d10b      	bne.n	8008ca4 <_free_r+0x6c>
 8008c8c:	6820      	ldr	r0, [r4, #0]
 8008c8e:	4401      	add	r1, r0
 8008c90:	1850      	adds	r0, r2, r1
 8008c92:	4283      	cmp	r3, r0
 8008c94:	6011      	str	r1, [r2, #0]
 8008c96:	d1e0      	bne.n	8008c5a <_free_r+0x22>
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	4408      	add	r0, r1
 8008c9e:	6010      	str	r0, [r2, #0]
 8008ca0:	6053      	str	r3, [r2, #4]
 8008ca2:	e7da      	b.n	8008c5a <_free_r+0x22>
 8008ca4:	d902      	bls.n	8008cac <_free_r+0x74>
 8008ca6:	230c      	movs	r3, #12
 8008ca8:	602b      	str	r3, [r5, #0]
 8008caa:	e7d6      	b.n	8008c5a <_free_r+0x22>
 8008cac:	6820      	ldr	r0, [r4, #0]
 8008cae:	1821      	adds	r1, r4, r0
 8008cb0:	428b      	cmp	r3, r1
 8008cb2:	bf01      	itttt	eq
 8008cb4:	6819      	ldreq	r1, [r3, #0]
 8008cb6:	685b      	ldreq	r3, [r3, #4]
 8008cb8:	1809      	addeq	r1, r1, r0
 8008cba:	6021      	streq	r1, [r4, #0]
 8008cbc:	6063      	str	r3, [r4, #4]
 8008cbe:	6054      	str	r4, [r2, #4]
 8008cc0:	e7cb      	b.n	8008c5a <_free_r+0x22>
 8008cc2:	bd38      	pop	{r3, r4, r5, pc}
 8008cc4:	2000164c 	.word	0x2000164c

08008cc8 <sbrk_aligned>:
 8008cc8:	b570      	push	{r4, r5, r6, lr}
 8008cca:	4e0f      	ldr	r6, [pc, #60]	@ (8008d08 <sbrk_aligned+0x40>)
 8008ccc:	460c      	mov	r4, r1
 8008cce:	6831      	ldr	r1, [r6, #0]
 8008cd0:	4605      	mov	r5, r0
 8008cd2:	b911      	cbnz	r1, 8008cda <sbrk_aligned+0x12>
 8008cd4:	f000 fbaa 	bl	800942c <_sbrk_r>
 8008cd8:	6030      	str	r0, [r6, #0]
 8008cda:	4621      	mov	r1, r4
 8008cdc:	4628      	mov	r0, r5
 8008cde:	f000 fba5 	bl	800942c <_sbrk_r>
 8008ce2:	1c43      	adds	r3, r0, #1
 8008ce4:	d103      	bne.n	8008cee <sbrk_aligned+0x26>
 8008ce6:	f04f 34ff 	mov.w	r4, #4294967295
 8008cea:	4620      	mov	r0, r4
 8008cec:	bd70      	pop	{r4, r5, r6, pc}
 8008cee:	1cc4      	adds	r4, r0, #3
 8008cf0:	f024 0403 	bic.w	r4, r4, #3
 8008cf4:	42a0      	cmp	r0, r4
 8008cf6:	d0f8      	beq.n	8008cea <sbrk_aligned+0x22>
 8008cf8:	1a21      	subs	r1, r4, r0
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	f000 fb96 	bl	800942c <_sbrk_r>
 8008d00:	3001      	adds	r0, #1
 8008d02:	d1f2      	bne.n	8008cea <sbrk_aligned+0x22>
 8008d04:	e7ef      	b.n	8008ce6 <sbrk_aligned+0x1e>
 8008d06:	bf00      	nop
 8008d08:	20001648 	.word	0x20001648

08008d0c <_malloc_r>:
 8008d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d10:	1ccd      	adds	r5, r1, #3
 8008d12:	f025 0503 	bic.w	r5, r5, #3
 8008d16:	3508      	adds	r5, #8
 8008d18:	2d0c      	cmp	r5, #12
 8008d1a:	bf38      	it	cc
 8008d1c:	250c      	movcc	r5, #12
 8008d1e:	2d00      	cmp	r5, #0
 8008d20:	4606      	mov	r6, r0
 8008d22:	db01      	blt.n	8008d28 <_malloc_r+0x1c>
 8008d24:	42a9      	cmp	r1, r5
 8008d26:	d904      	bls.n	8008d32 <_malloc_r+0x26>
 8008d28:	230c      	movs	r3, #12
 8008d2a:	6033      	str	r3, [r6, #0]
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e08 <_malloc_r+0xfc>
 8008d36:	f000 f869 	bl	8008e0c <__malloc_lock>
 8008d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8008d3e:	461c      	mov	r4, r3
 8008d40:	bb44      	cbnz	r4, 8008d94 <_malloc_r+0x88>
 8008d42:	4629      	mov	r1, r5
 8008d44:	4630      	mov	r0, r6
 8008d46:	f7ff ffbf 	bl	8008cc8 <sbrk_aligned>
 8008d4a:	1c43      	adds	r3, r0, #1
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	d158      	bne.n	8008e02 <_malloc_r+0xf6>
 8008d50:	f8d8 4000 	ldr.w	r4, [r8]
 8008d54:	4627      	mov	r7, r4
 8008d56:	2f00      	cmp	r7, #0
 8008d58:	d143      	bne.n	8008de2 <_malloc_r+0xd6>
 8008d5a:	2c00      	cmp	r4, #0
 8008d5c:	d04b      	beq.n	8008df6 <_malloc_r+0xea>
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	4639      	mov	r1, r7
 8008d62:	4630      	mov	r0, r6
 8008d64:	eb04 0903 	add.w	r9, r4, r3
 8008d68:	f000 fb60 	bl	800942c <_sbrk_r>
 8008d6c:	4581      	cmp	r9, r0
 8008d6e:	d142      	bne.n	8008df6 <_malloc_r+0xea>
 8008d70:	6821      	ldr	r1, [r4, #0]
 8008d72:	4630      	mov	r0, r6
 8008d74:	1a6d      	subs	r5, r5, r1
 8008d76:	4629      	mov	r1, r5
 8008d78:	f7ff ffa6 	bl	8008cc8 <sbrk_aligned>
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	d03a      	beq.n	8008df6 <_malloc_r+0xea>
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	442b      	add	r3, r5
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	f8d8 3000 	ldr.w	r3, [r8]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	bb62      	cbnz	r2, 8008de8 <_malloc_r+0xdc>
 8008d8e:	f8c8 7000 	str.w	r7, [r8]
 8008d92:	e00f      	b.n	8008db4 <_malloc_r+0xa8>
 8008d94:	6822      	ldr	r2, [r4, #0]
 8008d96:	1b52      	subs	r2, r2, r5
 8008d98:	d420      	bmi.n	8008ddc <_malloc_r+0xd0>
 8008d9a:	2a0b      	cmp	r2, #11
 8008d9c:	d917      	bls.n	8008dce <_malloc_r+0xc2>
 8008d9e:	1961      	adds	r1, r4, r5
 8008da0:	42a3      	cmp	r3, r4
 8008da2:	6025      	str	r5, [r4, #0]
 8008da4:	bf18      	it	ne
 8008da6:	6059      	strne	r1, [r3, #4]
 8008da8:	6863      	ldr	r3, [r4, #4]
 8008daa:	bf08      	it	eq
 8008dac:	f8c8 1000 	streq.w	r1, [r8]
 8008db0:	5162      	str	r2, [r4, r5]
 8008db2:	604b      	str	r3, [r1, #4]
 8008db4:	4630      	mov	r0, r6
 8008db6:	f000 f82f 	bl	8008e18 <__malloc_unlock>
 8008dba:	f104 000b 	add.w	r0, r4, #11
 8008dbe:	1d23      	adds	r3, r4, #4
 8008dc0:	f020 0007 	bic.w	r0, r0, #7
 8008dc4:	1ac2      	subs	r2, r0, r3
 8008dc6:	bf1c      	itt	ne
 8008dc8:	1a1b      	subne	r3, r3, r0
 8008dca:	50a3      	strne	r3, [r4, r2]
 8008dcc:	e7af      	b.n	8008d2e <_malloc_r+0x22>
 8008dce:	6862      	ldr	r2, [r4, #4]
 8008dd0:	42a3      	cmp	r3, r4
 8008dd2:	bf0c      	ite	eq
 8008dd4:	f8c8 2000 	streq.w	r2, [r8]
 8008dd8:	605a      	strne	r2, [r3, #4]
 8008dda:	e7eb      	b.n	8008db4 <_malloc_r+0xa8>
 8008ddc:	4623      	mov	r3, r4
 8008dde:	6864      	ldr	r4, [r4, #4]
 8008de0:	e7ae      	b.n	8008d40 <_malloc_r+0x34>
 8008de2:	463c      	mov	r4, r7
 8008de4:	687f      	ldr	r7, [r7, #4]
 8008de6:	e7b6      	b.n	8008d56 <_malloc_r+0x4a>
 8008de8:	461a      	mov	r2, r3
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	42a3      	cmp	r3, r4
 8008dee:	d1fb      	bne.n	8008de8 <_malloc_r+0xdc>
 8008df0:	2300      	movs	r3, #0
 8008df2:	6053      	str	r3, [r2, #4]
 8008df4:	e7de      	b.n	8008db4 <_malloc_r+0xa8>
 8008df6:	230c      	movs	r3, #12
 8008df8:	4630      	mov	r0, r6
 8008dfa:	6033      	str	r3, [r6, #0]
 8008dfc:	f000 f80c 	bl	8008e18 <__malloc_unlock>
 8008e00:	e794      	b.n	8008d2c <_malloc_r+0x20>
 8008e02:	6005      	str	r5, [r0, #0]
 8008e04:	e7d6      	b.n	8008db4 <_malloc_r+0xa8>
 8008e06:	bf00      	nop
 8008e08:	2000164c 	.word	0x2000164c

08008e0c <__malloc_lock>:
 8008e0c:	4801      	ldr	r0, [pc, #4]	@ (8008e14 <__malloc_lock+0x8>)
 8008e0e:	f7ff bf03 	b.w	8008c18 <__retarget_lock_acquire_recursive>
 8008e12:	bf00      	nop
 8008e14:	20001644 	.word	0x20001644

08008e18 <__malloc_unlock>:
 8008e18:	4801      	ldr	r0, [pc, #4]	@ (8008e20 <__malloc_unlock+0x8>)
 8008e1a:	f7ff befe 	b.w	8008c1a <__retarget_lock_release_recursive>
 8008e1e:	bf00      	nop
 8008e20:	20001644 	.word	0x20001644

08008e24 <__ssputs_r>:
 8008e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e28:	461f      	mov	r7, r3
 8008e2a:	688e      	ldr	r6, [r1, #8]
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	42be      	cmp	r6, r7
 8008e30:	460c      	mov	r4, r1
 8008e32:	4690      	mov	r8, r2
 8008e34:	680b      	ldr	r3, [r1, #0]
 8008e36:	d82d      	bhi.n	8008e94 <__ssputs_r+0x70>
 8008e38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e40:	d026      	beq.n	8008e90 <__ssputs_r+0x6c>
 8008e42:	6965      	ldr	r5, [r4, #20]
 8008e44:	6909      	ldr	r1, [r1, #16]
 8008e46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e4a:	eba3 0901 	sub.w	r9, r3, r1
 8008e4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e52:	1c7b      	adds	r3, r7, #1
 8008e54:	444b      	add	r3, r9
 8008e56:	106d      	asrs	r5, r5, #1
 8008e58:	429d      	cmp	r5, r3
 8008e5a:	bf38      	it	cc
 8008e5c:	461d      	movcc	r5, r3
 8008e5e:	0553      	lsls	r3, r2, #21
 8008e60:	d527      	bpl.n	8008eb2 <__ssputs_r+0x8e>
 8008e62:	4629      	mov	r1, r5
 8008e64:	f7ff ff52 	bl	8008d0c <_malloc_r>
 8008e68:	4606      	mov	r6, r0
 8008e6a:	b360      	cbz	r0, 8008ec6 <__ssputs_r+0xa2>
 8008e6c:	464a      	mov	r2, r9
 8008e6e:	6921      	ldr	r1, [r4, #16]
 8008e70:	f7ff fed4 	bl	8008c1c <memcpy>
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e7e:	81a3      	strh	r3, [r4, #12]
 8008e80:	6126      	str	r6, [r4, #16]
 8008e82:	444e      	add	r6, r9
 8008e84:	6026      	str	r6, [r4, #0]
 8008e86:	463e      	mov	r6, r7
 8008e88:	6165      	str	r5, [r4, #20]
 8008e8a:	eba5 0509 	sub.w	r5, r5, r9
 8008e8e:	60a5      	str	r5, [r4, #8]
 8008e90:	42be      	cmp	r6, r7
 8008e92:	d900      	bls.n	8008e96 <__ssputs_r+0x72>
 8008e94:	463e      	mov	r6, r7
 8008e96:	4632      	mov	r2, r6
 8008e98:	4641      	mov	r1, r8
 8008e9a:	6820      	ldr	r0, [r4, #0]
 8008e9c:	f000 faac 	bl	80093f8 <memmove>
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	68a3      	ldr	r3, [r4, #8]
 8008ea4:	1b9b      	subs	r3, r3, r6
 8008ea6:	60a3      	str	r3, [r4, #8]
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	4433      	add	r3, r6
 8008eac:	6023      	str	r3, [r4, #0]
 8008eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb2:	462a      	mov	r2, r5
 8008eb4:	f000 fad8 	bl	8009468 <_realloc_r>
 8008eb8:	4606      	mov	r6, r0
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d1e0      	bne.n	8008e80 <__ssputs_r+0x5c>
 8008ebe:	4650      	mov	r0, sl
 8008ec0:	6921      	ldr	r1, [r4, #16]
 8008ec2:	f7ff feb9 	bl	8008c38 <_free_r>
 8008ec6:	230c      	movs	r3, #12
 8008ec8:	f8ca 3000 	str.w	r3, [sl]
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ed6:	81a3      	strh	r3, [r4, #12]
 8008ed8:	e7e9      	b.n	8008eae <__ssputs_r+0x8a>
	...

08008edc <_svfiprintf_r>:
 8008edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee0:	4698      	mov	r8, r3
 8008ee2:	898b      	ldrh	r3, [r1, #12]
 8008ee4:	4607      	mov	r7, r0
 8008ee6:	061b      	lsls	r3, r3, #24
 8008ee8:	460d      	mov	r5, r1
 8008eea:	4614      	mov	r4, r2
 8008eec:	b09d      	sub	sp, #116	@ 0x74
 8008eee:	d510      	bpl.n	8008f12 <_svfiprintf_r+0x36>
 8008ef0:	690b      	ldr	r3, [r1, #16]
 8008ef2:	b973      	cbnz	r3, 8008f12 <_svfiprintf_r+0x36>
 8008ef4:	2140      	movs	r1, #64	@ 0x40
 8008ef6:	f7ff ff09 	bl	8008d0c <_malloc_r>
 8008efa:	6028      	str	r0, [r5, #0]
 8008efc:	6128      	str	r0, [r5, #16]
 8008efe:	b930      	cbnz	r0, 8008f0e <_svfiprintf_r+0x32>
 8008f00:	230c      	movs	r3, #12
 8008f02:	603b      	str	r3, [r7, #0]
 8008f04:	f04f 30ff 	mov.w	r0, #4294967295
 8008f08:	b01d      	add	sp, #116	@ 0x74
 8008f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0e:	2340      	movs	r3, #64	@ 0x40
 8008f10:	616b      	str	r3, [r5, #20]
 8008f12:	2300      	movs	r3, #0
 8008f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f16:	2320      	movs	r3, #32
 8008f18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f1c:	2330      	movs	r3, #48	@ 0x30
 8008f1e:	f04f 0901 	mov.w	r9, #1
 8008f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f26:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80090c0 <_svfiprintf_r+0x1e4>
 8008f2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f2e:	4623      	mov	r3, r4
 8008f30:	469a      	mov	sl, r3
 8008f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f36:	b10a      	cbz	r2, 8008f3c <_svfiprintf_r+0x60>
 8008f38:	2a25      	cmp	r2, #37	@ 0x25
 8008f3a:	d1f9      	bne.n	8008f30 <_svfiprintf_r+0x54>
 8008f3c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f40:	d00b      	beq.n	8008f5a <_svfiprintf_r+0x7e>
 8008f42:	465b      	mov	r3, fp
 8008f44:	4622      	mov	r2, r4
 8008f46:	4629      	mov	r1, r5
 8008f48:	4638      	mov	r0, r7
 8008f4a:	f7ff ff6b 	bl	8008e24 <__ssputs_r>
 8008f4e:	3001      	adds	r0, #1
 8008f50:	f000 80a7 	beq.w	80090a2 <_svfiprintf_r+0x1c6>
 8008f54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f56:	445a      	add	r2, fp
 8008f58:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f000 809f 	beq.w	80090a2 <_svfiprintf_r+0x1c6>
 8008f64:	2300      	movs	r3, #0
 8008f66:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f6e:	f10a 0a01 	add.w	sl, sl, #1
 8008f72:	9304      	str	r3, [sp, #16]
 8008f74:	9307      	str	r3, [sp, #28]
 8008f76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f7c:	4654      	mov	r4, sl
 8008f7e:	2205      	movs	r2, #5
 8008f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f84:	484e      	ldr	r0, [pc, #312]	@ (80090c0 <_svfiprintf_r+0x1e4>)
 8008f86:	f000 fa61 	bl	800944c <memchr>
 8008f8a:	9a04      	ldr	r2, [sp, #16]
 8008f8c:	b9d8      	cbnz	r0, 8008fc6 <_svfiprintf_r+0xea>
 8008f8e:	06d0      	lsls	r0, r2, #27
 8008f90:	bf44      	itt	mi
 8008f92:	2320      	movmi	r3, #32
 8008f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f98:	0711      	lsls	r1, r2, #28
 8008f9a:	bf44      	itt	mi
 8008f9c:	232b      	movmi	r3, #43	@ 0x2b
 8008f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fa8:	d015      	beq.n	8008fd6 <_svfiprintf_r+0xfa>
 8008faa:	4654      	mov	r4, sl
 8008fac:	2000      	movs	r0, #0
 8008fae:	f04f 0c0a 	mov.w	ip, #10
 8008fb2:	9a07      	ldr	r2, [sp, #28]
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fba:	3b30      	subs	r3, #48	@ 0x30
 8008fbc:	2b09      	cmp	r3, #9
 8008fbe:	d94b      	bls.n	8009058 <_svfiprintf_r+0x17c>
 8008fc0:	b1b0      	cbz	r0, 8008ff0 <_svfiprintf_r+0x114>
 8008fc2:	9207      	str	r2, [sp, #28]
 8008fc4:	e014      	b.n	8008ff0 <_svfiprintf_r+0x114>
 8008fc6:	eba0 0308 	sub.w	r3, r0, r8
 8008fca:	fa09 f303 	lsl.w	r3, r9, r3
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	46a2      	mov	sl, r4
 8008fd2:	9304      	str	r3, [sp, #16]
 8008fd4:	e7d2      	b.n	8008f7c <_svfiprintf_r+0xa0>
 8008fd6:	9b03      	ldr	r3, [sp, #12]
 8008fd8:	1d19      	adds	r1, r3, #4
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	9103      	str	r1, [sp, #12]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	bfbb      	ittet	lt
 8008fe2:	425b      	neglt	r3, r3
 8008fe4:	f042 0202 	orrlt.w	r2, r2, #2
 8008fe8:	9307      	strge	r3, [sp, #28]
 8008fea:	9307      	strlt	r3, [sp, #28]
 8008fec:	bfb8      	it	lt
 8008fee:	9204      	strlt	r2, [sp, #16]
 8008ff0:	7823      	ldrb	r3, [r4, #0]
 8008ff2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ff4:	d10a      	bne.n	800900c <_svfiprintf_r+0x130>
 8008ff6:	7863      	ldrb	r3, [r4, #1]
 8008ff8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ffa:	d132      	bne.n	8009062 <_svfiprintf_r+0x186>
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	3402      	adds	r4, #2
 8009000:	1d1a      	adds	r2, r3, #4
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	9203      	str	r2, [sp, #12]
 8009006:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800900a:	9305      	str	r3, [sp, #20]
 800900c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80090c4 <_svfiprintf_r+0x1e8>
 8009010:	2203      	movs	r2, #3
 8009012:	4650      	mov	r0, sl
 8009014:	7821      	ldrb	r1, [r4, #0]
 8009016:	f000 fa19 	bl	800944c <memchr>
 800901a:	b138      	cbz	r0, 800902c <_svfiprintf_r+0x150>
 800901c:	2240      	movs	r2, #64	@ 0x40
 800901e:	9b04      	ldr	r3, [sp, #16]
 8009020:	eba0 000a 	sub.w	r0, r0, sl
 8009024:	4082      	lsls	r2, r0
 8009026:	4313      	orrs	r3, r2
 8009028:	3401      	adds	r4, #1
 800902a:	9304      	str	r3, [sp, #16]
 800902c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009030:	2206      	movs	r2, #6
 8009032:	4825      	ldr	r0, [pc, #148]	@ (80090c8 <_svfiprintf_r+0x1ec>)
 8009034:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009038:	f000 fa08 	bl	800944c <memchr>
 800903c:	2800      	cmp	r0, #0
 800903e:	d036      	beq.n	80090ae <_svfiprintf_r+0x1d2>
 8009040:	4b22      	ldr	r3, [pc, #136]	@ (80090cc <_svfiprintf_r+0x1f0>)
 8009042:	bb1b      	cbnz	r3, 800908c <_svfiprintf_r+0x1b0>
 8009044:	9b03      	ldr	r3, [sp, #12]
 8009046:	3307      	adds	r3, #7
 8009048:	f023 0307 	bic.w	r3, r3, #7
 800904c:	3308      	adds	r3, #8
 800904e:	9303      	str	r3, [sp, #12]
 8009050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009052:	4433      	add	r3, r6
 8009054:	9309      	str	r3, [sp, #36]	@ 0x24
 8009056:	e76a      	b.n	8008f2e <_svfiprintf_r+0x52>
 8009058:	460c      	mov	r4, r1
 800905a:	2001      	movs	r0, #1
 800905c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009060:	e7a8      	b.n	8008fb4 <_svfiprintf_r+0xd8>
 8009062:	2300      	movs	r3, #0
 8009064:	f04f 0c0a 	mov.w	ip, #10
 8009068:	4619      	mov	r1, r3
 800906a:	3401      	adds	r4, #1
 800906c:	9305      	str	r3, [sp, #20]
 800906e:	4620      	mov	r0, r4
 8009070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009074:	3a30      	subs	r2, #48	@ 0x30
 8009076:	2a09      	cmp	r2, #9
 8009078:	d903      	bls.n	8009082 <_svfiprintf_r+0x1a6>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d0c6      	beq.n	800900c <_svfiprintf_r+0x130>
 800907e:	9105      	str	r1, [sp, #20]
 8009080:	e7c4      	b.n	800900c <_svfiprintf_r+0x130>
 8009082:	4604      	mov	r4, r0
 8009084:	2301      	movs	r3, #1
 8009086:	fb0c 2101 	mla	r1, ip, r1, r2
 800908a:	e7f0      	b.n	800906e <_svfiprintf_r+0x192>
 800908c:	ab03      	add	r3, sp, #12
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	462a      	mov	r2, r5
 8009092:	4638      	mov	r0, r7
 8009094:	4b0e      	ldr	r3, [pc, #56]	@ (80090d0 <_svfiprintf_r+0x1f4>)
 8009096:	a904      	add	r1, sp, #16
 8009098:	f3af 8000 	nop.w
 800909c:	1c42      	adds	r2, r0, #1
 800909e:	4606      	mov	r6, r0
 80090a0:	d1d6      	bne.n	8009050 <_svfiprintf_r+0x174>
 80090a2:	89ab      	ldrh	r3, [r5, #12]
 80090a4:	065b      	lsls	r3, r3, #25
 80090a6:	f53f af2d 	bmi.w	8008f04 <_svfiprintf_r+0x28>
 80090aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090ac:	e72c      	b.n	8008f08 <_svfiprintf_r+0x2c>
 80090ae:	ab03      	add	r3, sp, #12
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	462a      	mov	r2, r5
 80090b4:	4638      	mov	r0, r7
 80090b6:	4b06      	ldr	r3, [pc, #24]	@ (80090d0 <_svfiprintf_r+0x1f4>)
 80090b8:	a904      	add	r1, sp, #16
 80090ba:	f000 f87d 	bl	80091b8 <_printf_i>
 80090be:	e7ed      	b.n	800909c <_svfiprintf_r+0x1c0>
 80090c0:	0800957a 	.word	0x0800957a
 80090c4:	08009580 	.word	0x08009580
 80090c8:	08009584 	.word	0x08009584
 80090cc:	00000000 	.word	0x00000000
 80090d0:	08008e25 	.word	0x08008e25

080090d4 <_printf_common>:
 80090d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d8:	4616      	mov	r6, r2
 80090da:	4698      	mov	r8, r3
 80090dc:	688a      	ldr	r2, [r1, #8]
 80090de:	690b      	ldr	r3, [r1, #16]
 80090e0:	4607      	mov	r7, r0
 80090e2:	4293      	cmp	r3, r2
 80090e4:	bfb8      	it	lt
 80090e6:	4613      	movlt	r3, r2
 80090e8:	6033      	str	r3, [r6, #0]
 80090ea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80090ee:	460c      	mov	r4, r1
 80090f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090f4:	b10a      	cbz	r2, 80090fa <_printf_common+0x26>
 80090f6:	3301      	adds	r3, #1
 80090f8:	6033      	str	r3, [r6, #0]
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	0699      	lsls	r1, r3, #26
 80090fe:	bf42      	ittt	mi
 8009100:	6833      	ldrmi	r3, [r6, #0]
 8009102:	3302      	addmi	r3, #2
 8009104:	6033      	strmi	r3, [r6, #0]
 8009106:	6825      	ldr	r5, [r4, #0]
 8009108:	f015 0506 	ands.w	r5, r5, #6
 800910c:	d106      	bne.n	800911c <_printf_common+0x48>
 800910e:	f104 0a19 	add.w	sl, r4, #25
 8009112:	68e3      	ldr	r3, [r4, #12]
 8009114:	6832      	ldr	r2, [r6, #0]
 8009116:	1a9b      	subs	r3, r3, r2
 8009118:	42ab      	cmp	r3, r5
 800911a:	dc2b      	bgt.n	8009174 <_printf_common+0xa0>
 800911c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009120:	6822      	ldr	r2, [r4, #0]
 8009122:	3b00      	subs	r3, #0
 8009124:	bf18      	it	ne
 8009126:	2301      	movne	r3, #1
 8009128:	0692      	lsls	r2, r2, #26
 800912a:	d430      	bmi.n	800918e <_printf_common+0xba>
 800912c:	4641      	mov	r1, r8
 800912e:	4638      	mov	r0, r7
 8009130:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009134:	47c8      	blx	r9
 8009136:	3001      	adds	r0, #1
 8009138:	d023      	beq.n	8009182 <_printf_common+0xae>
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	6922      	ldr	r2, [r4, #16]
 800913e:	f003 0306 	and.w	r3, r3, #6
 8009142:	2b04      	cmp	r3, #4
 8009144:	bf14      	ite	ne
 8009146:	2500      	movne	r5, #0
 8009148:	6833      	ldreq	r3, [r6, #0]
 800914a:	f04f 0600 	mov.w	r6, #0
 800914e:	bf08      	it	eq
 8009150:	68e5      	ldreq	r5, [r4, #12]
 8009152:	f104 041a 	add.w	r4, r4, #26
 8009156:	bf08      	it	eq
 8009158:	1aed      	subeq	r5, r5, r3
 800915a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800915e:	bf08      	it	eq
 8009160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009164:	4293      	cmp	r3, r2
 8009166:	bfc4      	itt	gt
 8009168:	1a9b      	subgt	r3, r3, r2
 800916a:	18ed      	addgt	r5, r5, r3
 800916c:	42b5      	cmp	r5, r6
 800916e:	d11a      	bne.n	80091a6 <_printf_common+0xd2>
 8009170:	2000      	movs	r0, #0
 8009172:	e008      	b.n	8009186 <_printf_common+0xb2>
 8009174:	2301      	movs	r3, #1
 8009176:	4652      	mov	r2, sl
 8009178:	4641      	mov	r1, r8
 800917a:	4638      	mov	r0, r7
 800917c:	47c8      	blx	r9
 800917e:	3001      	adds	r0, #1
 8009180:	d103      	bne.n	800918a <_printf_common+0xb6>
 8009182:	f04f 30ff 	mov.w	r0, #4294967295
 8009186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800918a:	3501      	adds	r5, #1
 800918c:	e7c1      	b.n	8009112 <_printf_common+0x3e>
 800918e:	2030      	movs	r0, #48	@ 0x30
 8009190:	18e1      	adds	r1, r4, r3
 8009192:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009196:	1c5a      	adds	r2, r3, #1
 8009198:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800919c:	4422      	add	r2, r4
 800919e:	3302      	adds	r3, #2
 80091a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80091a4:	e7c2      	b.n	800912c <_printf_common+0x58>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4622      	mov	r2, r4
 80091aa:	4641      	mov	r1, r8
 80091ac:	4638      	mov	r0, r7
 80091ae:	47c8      	blx	r9
 80091b0:	3001      	adds	r0, #1
 80091b2:	d0e6      	beq.n	8009182 <_printf_common+0xae>
 80091b4:	3601      	adds	r6, #1
 80091b6:	e7d9      	b.n	800916c <_printf_common+0x98>

080091b8 <_printf_i>:
 80091b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091bc:	7e0f      	ldrb	r7, [r1, #24]
 80091be:	4691      	mov	r9, r2
 80091c0:	2f78      	cmp	r7, #120	@ 0x78
 80091c2:	4680      	mov	r8, r0
 80091c4:	460c      	mov	r4, r1
 80091c6:	469a      	mov	sl, r3
 80091c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80091ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80091ce:	d807      	bhi.n	80091e0 <_printf_i+0x28>
 80091d0:	2f62      	cmp	r7, #98	@ 0x62
 80091d2:	d80a      	bhi.n	80091ea <_printf_i+0x32>
 80091d4:	2f00      	cmp	r7, #0
 80091d6:	f000 80d3 	beq.w	8009380 <_printf_i+0x1c8>
 80091da:	2f58      	cmp	r7, #88	@ 0x58
 80091dc:	f000 80ba 	beq.w	8009354 <_printf_i+0x19c>
 80091e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80091e8:	e03a      	b.n	8009260 <_printf_i+0xa8>
 80091ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80091ee:	2b15      	cmp	r3, #21
 80091f0:	d8f6      	bhi.n	80091e0 <_printf_i+0x28>
 80091f2:	a101      	add	r1, pc, #4	@ (adr r1, 80091f8 <_printf_i+0x40>)
 80091f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091f8:	08009251 	.word	0x08009251
 80091fc:	08009265 	.word	0x08009265
 8009200:	080091e1 	.word	0x080091e1
 8009204:	080091e1 	.word	0x080091e1
 8009208:	080091e1 	.word	0x080091e1
 800920c:	080091e1 	.word	0x080091e1
 8009210:	08009265 	.word	0x08009265
 8009214:	080091e1 	.word	0x080091e1
 8009218:	080091e1 	.word	0x080091e1
 800921c:	080091e1 	.word	0x080091e1
 8009220:	080091e1 	.word	0x080091e1
 8009224:	08009367 	.word	0x08009367
 8009228:	0800928f 	.word	0x0800928f
 800922c:	08009321 	.word	0x08009321
 8009230:	080091e1 	.word	0x080091e1
 8009234:	080091e1 	.word	0x080091e1
 8009238:	08009389 	.word	0x08009389
 800923c:	080091e1 	.word	0x080091e1
 8009240:	0800928f 	.word	0x0800928f
 8009244:	080091e1 	.word	0x080091e1
 8009248:	080091e1 	.word	0x080091e1
 800924c:	08009329 	.word	0x08009329
 8009250:	6833      	ldr	r3, [r6, #0]
 8009252:	1d1a      	adds	r2, r3, #4
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6032      	str	r2, [r6, #0]
 8009258:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800925c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009260:	2301      	movs	r3, #1
 8009262:	e09e      	b.n	80093a2 <_printf_i+0x1ea>
 8009264:	6833      	ldr	r3, [r6, #0]
 8009266:	6820      	ldr	r0, [r4, #0]
 8009268:	1d19      	adds	r1, r3, #4
 800926a:	6031      	str	r1, [r6, #0]
 800926c:	0606      	lsls	r6, r0, #24
 800926e:	d501      	bpl.n	8009274 <_printf_i+0xbc>
 8009270:	681d      	ldr	r5, [r3, #0]
 8009272:	e003      	b.n	800927c <_printf_i+0xc4>
 8009274:	0645      	lsls	r5, r0, #25
 8009276:	d5fb      	bpl.n	8009270 <_printf_i+0xb8>
 8009278:	f9b3 5000 	ldrsh.w	r5, [r3]
 800927c:	2d00      	cmp	r5, #0
 800927e:	da03      	bge.n	8009288 <_printf_i+0xd0>
 8009280:	232d      	movs	r3, #45	@ 0x2d
 8009282:	426d      	negs	r5, r5
 8009284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009288:	230a      	movs	r3, #10
 800928a:	4859      	ldr	r0, [pc, #356]	@ (80093f0 <_printf_i+0x238>)
 800928c:	e011      	b.n	80092b2 <_printf_i+0xfa>
 800928e:	6821      	ldr	r1, [r4, #0]
 8009290:	6833      	ldr	r3, [r6, #0]
 8009292:	0608      	lsls	r0, r1, #24
 8009294:	f853 5b04 	ldr.w	r5, [r3], #4
 8009298:	d402      	bmi.n	80092a0 <_printf_i+0xe8>
 800929a:	0649      	lsls	r1, r1, #25
 800929c:	bf48      	it	mi
 800929e:	b2ad      	uxthmi	r5, r5
 80092a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80092a2:	6033      	str	r3, [r6, #0]
 80092a4:	bf14      	ite	ne
 80092a6:	230a      	movne	r3, #10
 80092a8:	2308      	moveq	r3, #8
 80092aa:	4851      	ldr	r0, [pc, #324]	@ (80093f0 <_printf_i+0x238>)
 80092ac:	2100      	movs	r1, #0
 80092ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80092b2:	6866      	ldr	r6, [r4, #4]
 80092b4:	2e00      	cmp	r6, #0
 80092b6:	bfa8      	it	ge
 80092b8:	6821      	ldrge	r1, [r4, #0]
 80092ba:	60a6      	str	r6, [r4, #8]
 80092bc:	bfa4      	itt	ge
 80092be:	f021 0104 	bicge.w	r1, r1, #4
 80092c2:	6021      	strge	r1, [r4, #0]
 80092c4:	b90d      	cbnz	r5, 80092ca <_printf_i+0x112>
 80092c6:	2e00      	cmp	r6, #0
 80092c8:	d04b      	beq.n	8009362 <_printf_i+0x1aa>
 80092ca:	4616      	mov	r6, r2
 80092cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80092d0:	fb03 5711 	mls	r7, r3, r1, r5
 80092d4:	5dc7      	ldrb	r7, [r0, r7]
 80092d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092da:	462f      	mov	r7, r5
 80092dc:	42bb      	cmp	r3, r7
 80092de:	460d      	mov	r5, r1
 80092e0:	d9f4      	bls.n	80092cc <_printf_i+0x114>
 80092e2:	2b08      	cmp	r3, #8
 80092e4:	d10b      	bne.n	80092fe <_printf_i+0x146>
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	07df      	lsls	r7, r3, #31
 80092ea:	d508      	bpl.n	80092fe <_printf_i+0x146>
 80092ec:	6923      	ldr	r3, [r4, #16]
 80092ee:	6861      	ldr	r1, [r4, #4]
 80092f0:	4299      	cmp	r1, r3
 80092f2:	bfde      	ittt	le
 80092f4:	2330      	movle	r3, #48	@ 0x30
 80092f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80092fe:	1b92      	subs	r2, r2, r6
 8009300:	6122      	str	r2, [r4, #16]
 8009302:	464b      	mov	r3, r9
 8009304:	4621      	mov	r1, r4
 8009306:	4640      	mov	r0, r8
 8009308:	f8cd a000 	str.w	sl, [sp]
 800930c:	aa03      	add	r2, sp, #12
 800930e:	f7ff fee1 	bl	80090d4 <_printf_common>
 8009312:	3001      	adds	r0, #1
 8009314:	d14a      	bne.n	80093ac <_printf_i+0x1f4>
 8009316:	f04f 30ff 	mov.w	r0, #4294967295
 800931a:	b004      	add	sp, #16
 800931c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	f043 0320 	orr.w	r3, r3, #32
 8009326:	6023      	str	r3, [r4, #0]
 8009328:	2778      	movs	r7, #120	@ 0x78
 800932a:	4832      	ldr	r0, [pc, #200]	@ (80093f4 <_printf_i+0x23c>)
 800932c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009330:	6823      	ldr	r3, [r4, #0]
 8009332:	6831      	ldr	r1, [r6, #0]
 8009334:	061f      	lsls	r7, r3, #24
 8009336:	f851 5b04 	ldr.w	r5, [r1], #4
 800933a:	d402      	bmi.n	8009342 <_printf_i+0x18a>
 800933c:	065f      	lsls	r7, r3, #25
 800933e:	bf48      	it	mi
 8009340:	b2ad      	uxthmi	r5, r5
 8009342:	6031      	str	r1, [r6, #0]
 8009344:	07d9      	lsls	r1, r3, #31
 8009346:	bf44      	itt	mi
 8009348:	f043 0320 	orrmi.w	r3, r3, #32
 800934c:	6023      	strmi	r3, [r4, #0]
 800934e:	b11d      	cbz	r5, 8009358 <_printf_i+0x1a0>
 8009350:	2310      	movs	r3, #16
 8009352:	e7ab      	b.n	80092ac <_printf_i+0xf4>
 8009354:	4826      	ldr	r0, [pc, #152]	@ (80093f0 <_printf_i+0x238>)
 8009356:	e7e9      	b.n	800932c <_printf_i+0x174>
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	f023 0320 	bic.w	r3, r3, #32
 800935e:	6023      	str	r3, [r4, #0]
 8009360:	e7f6      	b.n	8009350 <_printf_i+0x198>
 8009362:	4616      	mov	r6, r2
 8009364:	e7bd      	b.n	80092e2 <_printf_i+0x12a>
 8009366:	6833      	ldr	r3, [r6, #0]
 8009368:	6825      	ldr	r5, [r4, #0]
 800936a:	1d18      	adds	r0, r3, #4
 800936c:	6961      	ldr	r1, [r4, #20]
 800936e:	6030      	str	r0, [r6, #0]
 8009370:	062e      	lsls	r6, r5, #24
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	d501      	bpl.n	800937a <_printf_i+0x1c2>
 8009376:	6019      	str	r1, [r3, #0]
 8009378:	e002      	b.n	8009380 <_printf_i+0x1c8>
 800937a:	0668      	lsls	r0, r5, #25
 800937c:	d5fb      	bpl.n	8009376 <_printf_i+0x1be>
 800937e:	8019      	strh	r1, [r3, #0]
 8009380:	2300      	movs	r3, #0
 8009382:	4616      	mov	r6, r2
 8009384:	6123      	str	r3, [r4, #16]
 8009386:	e7bc      	b.n	8009302 <_printf_i+0x14a>
 8009388:	6833      	ldr	r3, [r6, #0]
 800938a:	2100      	movs	r1, #0
 800938c:	1d1a      	adds	r2, r3, #4
 800938e:	6032      	str	r2, [r6, #0]
 8009390:	681e      	ldr	r6, [r3, #0]
 8009392:	6862      	ldr	r2, [r4, #4]
 8009394:	4630      	mov	r0, r6
 8009396:	f000 f859 	bl	800944c <memchr>
 800939a:	b108      	cbz	r0, 80093a0 <_printf_i+0x1e8>
 800939c:	1b80      	subs	r0, r0, r6
 800939e:	6060      	str	r0, [r4, #4]
 80093a0:	6863      	ldr	r3, [r4, #4]
 80093a2:	6123      	str	r3, [r4, #16]
 80093a4:	2300      	movs	r3, #0
 80093a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093aa:	e7aa      	b.n	8009302 <_printf_i+0x14a>
 80093ac:	4632      	mov	r2, r6
 80093ae:	4649      	mov	r1, r9
 80093b0:	4640      	mov	r0, r8
 80093b2:	6923      	ldr	r3, [r4, #16]
 80093b4:	47d0      	blx	sl
 80093b6:	3001      	adds	r0, #1
 80093b8:	d0ad      	beq.n	8009316 <_printf_i+0x15e>
 80093ba:	6823      	ldr	r3, [r4, #0]
 80093bc:	079b      	lsls	r3, r3, #30
 80093be:	d413      	bmi.n	80093e8 <_printf_i+0x230>
 80093c0:	68e0      	ldr	r0, [r4, #12]
 80093c2:	9b03      	ldr	r3, [sp, #12]
 80093c4:	4298      	cmp	r0, r3
 80093c6:	bfb8      	it	lt
 80093c8:	4618      	movlt	r0, r3
 80093ca:	e7a6      	b.n	800931a <_printf_i+0x162>
 80093cc:	2301      	movs	r3, #1
 80093ce:	4632      	mov	r2, r6
 80093d0:	4649      	mov	r1, r9
 80093d2:	4640      	mov	r0, r8
 80093d4:	47d0      	blx	sl
 80093d6:	3001      	adds	r0, #1
 80093d8:	d09d      	beq.n	8009316 <_printf_i+0x15e>
 80093da:	3501      	adds	r5, #1
 80093dc:	68e3      	ldr	r3, [r4, #12]
 80093de:	9903      	ldr	r1, [sp, #12]
 80093e0:	1a5b      	subs	r3, r3, r1
 80093e2:	42ab      	cmp	r3, r5
 80093e4:	dcf2      	bgt.n	80093cc <_printf_i+0x214>
 80093e6:	e7eb      	b.n	80093c0 <_printf_i+0x208>
 80093e8:	2500      	movs	r5, #0
 80093ea:	f104 0619 	add.w	r6, r4, #25
 80093ee:	e7f5      	b.n	80093dc <_printf_i+0x224>
 80093f0:	0800958b 	.word	0x0800958b
 80093f4:	0800959c 	.word	0x0800959c

080093f8 <memmove>:
 80093f8:	4288      	cmp	r0, r1
 80093fa:	b510      	push	{r4, lr}
 80093fc:	eb01 0402 	add.w	r4, r1, r2
 8009400:	d902      	bls.n	8009408 <memmove+0x10>
 8009402:	4284      	cmp	r4, r0
 8009404:	4623      	mov	r3, r4
 8009406:	d807      	bhi.n	8009418 <memmove+0x20>
 8009408:	1e43      	subs	r3, r0, #1
 800940a:	42a1      	cmp	r1, r4
 800940c:	d008      	beq.n	8009420 <memmove+0x28>
 800940e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009412:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009416:	e7f8      	b.n	800940a <memmove+0x12>
 8009418:	4601      	mov	r1, r0
 800941a:	4402      	add	r2, r0
 800941c:	428a      	cmp	r2, r1
 800941e:	d100      	bne.n	8009422 <memmove+0x2a>
 8009420:	bd10      	pop	{r4, pc}
 8009422:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009426:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800942a:	e7f7      	b.n	800941c <memmove+0x24>

0800942c <_sbrk_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	2300      	movs	r3, #0
 8009430:	4d05      	ldr	r5, [pc, #20]	@ (8009448 <_sbrk_r+0x1c>)
 8009432:	4604      	mov	r4, r0
 8009434:	4608      	mov	r0, r1
 8009436:	602b      	str	r3, [r5, #0]
 8009438:	f7f7 fa44 	bl	80008c4 <_sbrk>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	d102      	bne.n	8009446 <_sbrk_r+0x1a>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	b103      	cbz	r3, 8009446 <_sbrk_r+0x1a>
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	bd38      	pop	{r3, r4, r5, pc}
 8009448:	20001640 	.word	0x20001640

0800944c <memchr>:
 800944c:	4603      	mov	r3, r0
 800944e:	b510      	push	{r4, lr}
 8009450:	b2c9      	uxtb	r1, r1
 8009452:	4402      	add	r2, r0
 8009454:	4293      	cmp	r3, r2
 8009456:	4618      	mov	r0, r3
 8009458:	d101      	bne.n	800945e <memchr+0x12>
 800945a:	2000      	movs	r0, #0
 800945c:	e003      	b.n	8009466 <memchr+0x1a>
 800945e:	7804      	ldrb	r4, [r0, #0]
 8009460:	3301      	adds	r3, #1
 8009462:	428c      	cmp	r4, r1
 8009464:	d1f6      	bne.n	8009454 <memchr+0x8>
 8009466:	bd10      	pop	{r4, pc}

08009468 <_realloc_r>:
 8009468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800946c:	4680      	mov	r8, r0
 800946e:	4615      	mov	r5, r2
 8009470:	460c      	mov	r4, r1
 8009472:	b921      	cbnz	r1, 800947e <_realloc_r+0x16>
 8009474:	4611      	mov	r1, r2
 8009476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800947a:	f7ff bc47 	b.w	8008d0c <_malloc_r>
 800947e:	b92a      	cbnz	r2, 800948c <_realloc_r+0x24>
 8009480:	f7ff fbda 	bl	8008c38 <_free_r>
 8009484:	2400      	movs	r4, #0
 8009486:	4620      	mov	r0, r4
 8009488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800948c:	f000 f81a 	bl	80094c4 <_malloc_usable_size_r>
 8009490:	4285      	cmp	r5, r0
 8009492:	4606      	mov	r6, r0
 8009494:	d802      	bhi.n	800949c <_realloc_r+0x34>
 8009496:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800949a:	d8f4      	bhi.n	8009486 <_realloc_r+0x1e>
 800949c:	4629      	mov	r1, r5
 800949e:	4640      	mov	r0, r8
 80094a0:	f7ff fc34 	bl	8008d0c <_malloc_r>
 80094a4:	4607      	mov	r7, r0
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d0ec      	beq.n	8009484 <_realloc_r+0x1c>
 80094aa:	42b5      	cmp	r5, r6
 80094ac:	462a      	mov	r2, r5
 80094ae:	4621      	mov	r1, r4
 80094b0:	bf28      	it	cs
 80094b2:	4632      	movcs	r2, r6
 80094b4:	f7ff fbb2 	bl	8008c1c <memcpy>
 80094b8:	4621      	mov	r1, r4
 80094ba:	4640      	mov	r0, r8
 80094bc:	f7ff fbbc 	bl	8008c38 <_free_r>
 80094c0:	463c      	mov	r4, r7
 80094c2:	e7e0      	b.n	8009486 <_realloc_r+0x1e>

080094c4 <_malloc_usable_size_r>:
 80094c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094c8:	1f18      	subs	r0, r3, #4
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	bfbc      	itt	lt
 80094ce:	580b      	ldrlt	r3, [r1, r0]
 80094d0:	18c0      	addlt	r0, r0, r3
 80094d2:	4770      	bx	lr

080094d4 <_init>:
 80094d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d6:	bf00      	nop
 80094d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094da:	bc08      	pop	{r3}
 80094dc:	469e      	mov	lr, r3
 80094de:	4770      	bx	lr

080094e0 <_fini>:
 80094e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e2:	bf00      	nop
 80094e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094e6:	bc08      	pop	{r3}
 80094e8:	469e      	mov	lr, r3
 80094ea:	4770      	bx	lr
