1) In foc.c->MotorInit(): zero angle initialized using attached as5600 sensor.
   Implement as5600 object attached to each motor instance (unique I2C handler address)
   Check sensor connected and store zero startup angle.

2) HAL_GetTick() returns number of ticks since last reboot/startup, with each tick being 1ms.

3) Since timer ticks are unsigned int, there is no need to handle overflow since now - prev if now has overflowed will automatically correct.

4) Timer utils requires DWT_Init() to be called in main.

5) Added open loop velocity control. Function generates and updates the motor->params->el_angle param in each iteration based on the time elapsed and desired velocity.

6) Timer struct (htimx) added to Motor struct
   - NOTE: When accessing a member directly from a struct variable, use the dot (.) operator. Only use arrow (->) when accessing from struct pointer.
   - BUGFIX: motor->TIM_HandleTypeDef->Instance->CCR1 dosnt work. Must be TIM_HandleTypeDef.Instance->CCR1
   

Continue: attach sensor macro


################################## UPDATES ##################################
20/1/25:
- Removed macros to set up motor structs; replaced with a function using static structs.
- Motor & sensor object has to be manually created now, in main().

################################## BUGFIX & THINGS LEARNT ##################################
20/1/25: 
- Remember to change header file funcion definitions after updating source file.

- When accessing a member directly from a struct variable, use the dot (.) operator. Only use arrow (->) when accessing from struct pointer.

- Motor struct timer updated to TIM_HandleTypeDef* pointer 

- Static inline functions defined in the source file are only accessible from within the file.
  Similarly, such functions should be fully defined in the header file (.h) as the compiler does not search for it's definition elsewhere.
  Hence, only small, short functions should be inlined.
  
- Static variables & structs could be created in functions and referenced even after function exit since they persist for the lifetime of the program.

**************** PINOUT ********************

A8    TIM1_CH1
A9    TIM1_CH2
A10   TIM1_CH3

A6    TIM3_CH1
A7    TIM3_CH2
B0    TIM3_CH3

B10   SCL_0
B11   SDA_0

B6    SCL_1
B7    SDA_1

C13   GPIO_OUT

************ PWM frequency: ****************
72MHz / 1024 = 70.3kHz (approx)